
.vsteensy/build/FlightController.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	................
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`8]......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #476]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #476]	; (60001218 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #476]	; (6000121c <ResetHandler+0x1e8>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #476]	; (60001220 <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #472]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	ldr	r1, [pc, #472]	; (60001228 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	ldr	r3, [pc, #464]	; (6000122c <ResetHandler+0x1f8>)
6000105c:	cmp	r2, r3
6000105e:	bcs.n	6000107a <ResetHandler+0x46>
60001060:	mvns	r4, r2
60001062:	mov	r0, r1
60001064:	add	r3, r4
60001066:	bic.w	r3, r3, #3
6000106a:	adds	r3, #4
6000106c:	add	r3, r1
		*dest++ = *src++;
6000106e:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	cmp	r0, r3
		*dest++ = *src++;
60001074:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	ldr	r2, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107c:	ldr	r1, [pc, #436]	; (60001234 <ResetHandler+0x200>)
6000107e:	cmp	r2, r1
60001080:	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	ldr	r3, [pc, #436]	; (60001238 <ResetHandler+0x204>)
60001084:	cmp	r2, r3
60001086:	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	mvns	r4, r2
6000108a:	mov	r0, r1
6000108c:	add	r3, r4
6000108e:	bic.w	r3, r3, #3
60001092:	adds	r3, #4
60001094:	add	r3, r1
		*dest++ = *src++;
60001096:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	cmp	r0, r3
		*dest++ = *src++;
6000109c:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	ldr	r2, [pc, #408]	; (6000123c <ResetHandler+0x208>)
600010a4:	ldr	r3, [pc, #408]	; (60001240 <ResetHandler+0x20c>)
600010a6:	cmp	r2, r3
600010a8:	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	mvns	r0, r2
600010ac:	mov	r1, r2
		*dest++ = 0;
600010ae:	movs	r4, #0
600010b0:	add	r3, r0
600010b2:	bic.w	r3, r3, #3
600010b6:	adds	r3, #4
600010b8:	add	r3, r2
600010ba:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	cmp	r3, r1
600010c0:	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	ldr	r2, [pc, #384]	; (60001244 <ResetHandler+0x210>)
600010c4:	mov.w	r1, #15728640	; 0xf00000
600010c8:	ldr	r3, [pc, #380]	; (60001248 <ResetHandler+0x214>)
600010ca:	str	r1, [r2, #0]
600010cc:	add.w	r1, r3, #704	; 0x2c0
600010d0:	ldr	r2, [pc, #376]	; (6000124c <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	str.w	r2, [r3, #4]!
600010d6:	cmp	r1, r3
600010d8:	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	ldr	r3, [pc, #372]	; (60001250 <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	movs	r1, #128	; 0x80
600010de:	ldr	r2, [pc, #372]	; (60001254 <ResetHandler+0x220>)
600010e0:	strb.w	r1, [r3], #1
600010e4:	cmp	r3, r2
600010e6:	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	ldr	r4, [pc, #364]	; (60001258 <ResetHandler+0x224>)
600010ea:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	ldr	r6, [pc, #364]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	ldr.w	sl, [pc, #420]	; 6000129c <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	ldr.w	r9, [pc, #420]	; 600012a0 <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	ldr.w	r8, [pc, #420]	; 600012a4 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	ldr	r3, [pc, #348]	; (60001260 <ResetHandler+0x22c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	ldr	r1, [pc, #268]	; (60001214 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	ldr	r3, [r6, #28]
6000111c:	bic.w	r3, r3, #127	; 0x7f
60001120:	orr.w	r3, r3, #64	; 0x40
60001124:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	ldr	r3, [r6, #36]	; 0x24
60001128:	bic.w	r3, r3, #127	; 0x7f
6000112c:	orr.w	r3, r3, #64	; 0x40
60001130:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	bl	60001394 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	ldr	r2, [pc, #292]	; (60001264 <ResetHandler+0x230>)
60001140:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	ldr	r3, [pc, #292]	; (60001268 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	ldr	r1, [pc, #292]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r1, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	ldr	r0, [pc, #284]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	ldr	r2, [pc, #280]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	ldr	r0, [pc, #276]	; (60001280 <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	ldr	r1, [pc, #272]	; (60001284 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	orr.w	r3, r3, #1
60001176:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	ldr	r3, [r0, #0]
6000117a:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	bl	60001808 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	ldr	r0, [pc, #256]	; (60001288 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	bl	60001ae0 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	nop
60001198:	nop
6000119a:	nop
6000119c:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	ldr	r2, [pc, #232]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	ldr	r3, [pc, #232]	; (60001290 <ResetHandler+0x25c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	ldr	r2, [r3, #56]	; 0x38
600011be:	lsls	r2, r2, #31
600011c0:	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	ldr	r1, [pc, #204]	; (60001294 <ResetHandler+0x260>)
600011c8:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	ldr	r2, [r3, #56]	; 0x38
600011ce:	orr.w	r2, r2, #1
600011d2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	ldr	r2, [pc, #184]	; (60001290 <ResetHandler+0x25c>)
600011d6:	ldr	r4, [pc, #192]	; (60001298 <ResetHandler+0x264>)
600011d8:	ldr	r3, [r2, #8]
600011da:	orr.w	r3, r3, #65537	; 0x10001
600011de:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011e0:	bl	6000148c <configure_external_ram>
#endif
	startup_early_hook();
600011e4:	bl	60001ad8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e8:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011ea:	cmp	r3, #19
600011ec:	bls.n	600011e8 <ResetHandler+0x1b4>
	usb_init();
600011ee:	bl	600012a8 <usb_init>
	analog_init();
600011f2:	bl	60001988 <analog_init>
	pwm_init();
600011f6:	bl	60001ac8 <__pwm_init_veneer>
	tempmon_init();
600011fa:	bl	6000186c <tempmon_init>

	startup_late_hook();
600011fe:	bl	60001ad0 <__startup_late_hook_veneer>
60001202:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001204:	cmp.w	r3, #300	; 0x12c
60001208:	bcc.n	60001202 <ResetHandler+0x1ce>
	//printf("before C++ constructors\n");
	__libc_init_array();
6000120a:	bl	60001ac0 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120e:	bl	60001ab8 <__main_veneer>
60001212:	b.n	60001212 <ResetHandler+0x1de>
60001214:	.word	0x400ac000
60001218:	.word	0xaaaaaaab
6000121c:	.word	0x00200007
60001220:	.word	0x20078000
60001224:	.word	0x00000000
60001228:	.word	0x60001b20
6000122c:	.word	0x000033c8
60001230:	.word	0x20000000
60001234:	.word	0x60004eec
60001238:	.word	0x20000e50
6000123c:	.word	0x20000e50
60001240:	.word	0x20003700
60001244:	.word	0xe000ed88
60001248:	.word	0x200033fc
6000124c:	.word	0x000020b1
60001250:	.word	0xe000e400
60001254:	.word	0xe000e4a0
60001258:	.word	0x400d8000
6000125c:	.word	0x400fc000
60001260:	.word	0xe000ed08
60001264:	.word	0xe000e014
60001268:	.word	0xe000e018
6000126c:	.word	0x00002989
60001270:	.word	0xe000edfc
60001274:	.word	0x20200000
60001278:	.word	0x0000298d
6000127c:	.word	0xe0001000
60001280:	.word	0xe0001004
60001284:	.word	0x2000131c
60001288:	.word	0x23c34600
6000128c:	.word	0x40084000
60001290:	.word	0x400d4000
60001294:	.word	0x56c00000
60001298:	.word	0x20001324
6000129c:	.word	0x20003400
600012a0:	.word	0x2018101b
600012a4:	.word	0x13110d0c

600012a8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a8:	ldr	r3, [pc, #192]	; (6000136c <usb_init+0xc4>)
600012aa:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012ae:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012b0:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b4:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012b8:	bl	60001af8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012bc:	ldr	r1, [pc, #176]	; (60001370 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012be:	ldr	r0, [pc, #180]	; (60001374 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c4:	ldr	r4, [pc, #176]	; (60001378 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c6:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012ca:	ldr	r3, [pc, #176]	; (6000137c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012cc:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012d0:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012d4:	ldr	r2, [r4, #0]
600012d6:	ands	r3, r2
600012d8:	cbnz	r3, 600012e2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012da:	ldr.w	r3, [r0, #424]	; 0x1a8
600012de:	lsls	r2, r3, #30
600012e0:	beq.n	60001318 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr	r3, [pc, #144]	; (60001374 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012e4:	mov.w	r1, #2147483648	; 0x80000000
600012e8:	ldr	r2, [pc, #140]	; (60001378 <usb_init+0xd0>)
600012ea:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ec:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ee:	ldr.w	r1, [r3, #320]	; 0x140
600012f2:	orr.w	r1, r1, #2
600012f6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012fa:	ldr.w	r3, [r2, #320]	; 0x140
600012fe:	lsls	r3, r3, #30
60001300:	bmi.n	600012fa <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	mov.w	r0, #131072	; 0x20000
60001306:	ldr	r1, [pc, #120]	; (60001380 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001308:	ldr	r3, [pc, #108]	; (60001378 <usb_init+0xd0>)
6000130a:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000130e:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001310:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001312:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001314:	bl	60001ae8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001318:	ldr	r5, [pc, #104]	; (60001384 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131a:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131c:	ldr	r3, [pc, #88]	; (60001378 <usb_init+0xd0>)
6000131e:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	ldr	r4, [pc, #80]	; (60001374 <usb_init+0xcc>)
60001324:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001326:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001328:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000132a:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000132c:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000132e:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001332:	mov.w	r2, #640	; 0x280
60001336:	bl	60001af0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133a:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000133e:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001342:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001346:	ldr	r2, [pc, #64]	; (60001388 <usb_init+0xe0>)
60001348:	ldr	r1, [pc, #64]	; (6000138c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000134a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000134c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000134e:	str.w	r5, [r4, #344]	; 0x158
60001352:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001356:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000135a:	ldr	r2, [pc, #52]	; (60001390 <usb_init+0xe8>)
6000135c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001360:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001362:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001364:	str.w	r3, [r4, #320]	; 0x140
60001368:	pop	{r4, r5, r6, pc}
6000136a:	nop
6000136c:	.word	0x400d8000
60001370:	.word	0x400fc000
60001374:	.word	0x402e0000
60001378:	.word	0x400d9000
6000137c:	.word	0x001e1c00
60001380:	.word	0xe000e28c
60001384:	.word	0x20003000
60001388:	.word	0x20003400
6000138c:	.word	0x000017d9
60001390:	.word	0xe000e10c

60001394 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001394:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001396:	ldr	r2, [pc, #160]	; (60001438 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001398:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000139a:	ldr	r3, [pc, #160]	; (6000143c <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000139c:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013a0:	ldr	r4, [pc, #156]	; (60001440 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013a2:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013a4:	ldr.w	lr, [pc, #216]	; 60001480 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013a8:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013aa:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ac:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600013ae:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013b2:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013b6:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b8:	ldr.w	lr, [pc, #200]	; 60001484 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013bc:	ldr	r7, [pc, #132]	; (60001444 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013be:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013c2:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013c4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013c6:	ldr	r6, [pc, #128]	; (60001448 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c8:	ldr	r7, [pc, #128]	; (6000144c <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013ca:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013cc:	ldr	r1, [pc, #128]	; (60001450 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013ce:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013d0:	ldr	r6, [pc, #128]	; (60001454 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013d2:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d6:	ldr	r7, [pc, #128]	; (60001458 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013d8:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013da:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013dc:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013e0:	ldr	r6, [pc, #120]	; (6000145c <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013e2:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013e4:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013e6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013e8:	ldr.w	lr, [pc, #156]	; 60001488 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013ec:	ldr	r6, [pc, #112]	; (60001460 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ee:	ldr	r1, [pc, #116]	; (60001464 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013f0:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013f4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013f6:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013f8:	ldr	r7, [pc, #108]	; (60001468 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013fa:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013fc:	ldr	r6, [pc, #108]	; (6000146c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fe:	ldr	r1, [pc, #112]	; (60001470 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001400:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001402:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001404:	ldr	r7, [pc, #108]	; (60001474 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001406:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001408:	ldr	r6, [pc, #108]	; (60001478 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000140a:	ldr	r1, [pc, #112]	; (6000147c <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000140c:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000140e:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001410:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001412:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001414:	dsb	sy
	asm("isb");
60001418:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000141c:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001420:	dsb	sy
	asm("isb");
60001424:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001428:	ldr.w	r3, [r2, #-136]
6000142c:	orr.w	r3, r3, #196608	; 0x30000
60001430:	str.w	r3, [r2, #-136]
60001434:	pop	{r4, r5, r6, r7, pc}
60001436:	nop
60001438:	.word	0xe000ed9c
6000143c:	.word	0xe000eda0
60001440:	.word	0xe000ed94
60001444:	.word	0x00100009
60001448:	.word	0x00200013
6000144c:	.word	0x07020021
60001450:	.word	0x20003700
60001454:	.word	0x20000014
60001458:	.word	0x13080025
6000145c:	.word	0x10000009
60001460:	.word	0x40000017
60001464:	.word	0x13100033
60001468:	.word	0x60000018
6000146c:	.word	0x070b002f
60001470:	.word	0x70000019
60001474:	.word	0x170b0037
60001478:	.word	0x7000001a
6000147c:	.word	0x130b002f
60001480:	.word	0x1000003f
60001484:	.word	0x03080025
60001488:	.word	0x20200016

6000148c <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
6000148c:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000148e:	ldr	r3, [pc, #736]	; (60001770 <configure_external_ram+0x2e4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001490:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001492:	ldr	r6, [pc, #736]	; (60001774 <configure_external_ram+0x2e8>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001494:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001496:	ldr	r1, [pc, #736]	; (60001778 <configure_external_ram+0x2ec>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001498:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000149c:	ldr	r5, [pc, #732]	; (6000177c <configure_external_ram+0x2f0>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000149e:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600014a2:	ldr	r4, [pc, #732]	; (60001780 <configure_external_ram+0x2f4>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600014a4:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600014a8:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600014ac:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600014ae:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600014b2:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014b6:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014ba:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600014be:	ldr	r1, [pc, #708]	; (60001784 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014c0:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014c4:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014c8:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600014cc:	ldr	r6, [pc, #696]	; (60001788 <configure_external_ram+0x2fc>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600014ce:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600014d0:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600014d2:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600014d4:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600014d6:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600014d8:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600014dc:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600014e0:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014e4:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600014e8:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600014ec:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600014f0:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600014f4:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600014f8:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600014fc:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001500:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001502:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001504:	ldr	r0, [pc, #644]	; (6000178c <configure_external_ram+0x300>)
60001506:	ands	r0, r3
60001508:	ldr	r3, [pc, #644]	; (60001790 <configure_external_ram+0x304>)
6000150a:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000150c:	ldr	r0, [pc, #644]	; (60001794 <configure_external_ram+0x308>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000150e:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001510:	ldr.w	r3, [r6, #132]	; 0x84
60001514:	orr.w	r3, r3, #12
60001518:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000151c:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000151e:	ldr	r3, [r0, #0]
60001520:	orrs	r3, r6
60001522:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001524:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001526:	and.w	lr, r3, lr
6000152a:	ldr	r3, [pc, #620]	; (60001798 <configure_external_ram+0x30c>)
6000152c:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001530:	ldr.w	lr, [pc, #668]	; 600017d0 <configure_external_ram+0x344>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001534:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001536:	ldr	r3, [pc, #612]	; (6000179c <configure_external_ram+0x310>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001538:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000153a:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000153e:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001540:	ldr	r7, [pc, #604]	; (600017a0 <configure_external_ram+0x314>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001542:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001546:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001548:	ldr	r3, [r0, #12]
6000154a:	bic.w	r3, r3, #120	; 0x78
6000154e:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001550:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001552:	ands	r7, r3
60001554:	ldr	r3, [pc, #588]	; (600017a4 <configure_external_ram+0x318>)
60001556:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001558:	ldr	r7, [pc, #580]	; (600017a0 <configure_external_ram+0x314>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000155a:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000155c:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000155e:	ands	r7, r3
60001560:	ldr	r3, [pc, #576]	; (600017a4 <configure_external_ram+0x318>)
60001562:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001564:	ldr	r7, [pc, #576]	; (600017a8 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001566:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001568:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000156a:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000156c:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001570:	ldr	r7, [pc, #568]	; (600017ac <configure_external_ram+0x320>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001572:	bic.w	r3, r3, #63	; 0x3f
60001576:	orr.w	r3, r3, #1
6000157a:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000157e:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001582:	ldr.w	lr, [pc, #564]	; 600017b8 <configure_external_ram+0x32c>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001586:	bic.w	r3, r3, #63	; 0x3f
6000158a:	orr.w	r3, r3, #1
6000158e:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
60001592:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001594:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001596:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001598:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000159c:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000159e:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600015a0:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600015a4:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015a6:	ldr	r3, [pc, #520]	; (600017b0 <configure_external_ram+0x324>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600015a8:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600015ac:	ldr	r2, [pc, #516]	; (600017b4 <configure_external_ram+0x328>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600015ae:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015b0:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015b4:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600015b6:	str.w	r1, [r3], #4
600015ba:	cmp	r3, r2
600015bc:	bne.n	600015b6 <configure_external_ram+0x12a>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600015be:	ldr	r3, [pc, #468]	; (60001794 <configure_external_ram+0x308>)
600015c0:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600015c2:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600015c4:	orr.w	r2, r2, #1
600015c8:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600015ca:	ldr	r3, [r1, #0]
600015cc:	ldr	r2, [pc, #452]	; (60001794 <configure_external_ram+0x308>)
600015ce:	ands.w	r3, r3, #1
600015d2:	bne.n	600015ca <configure_external_ram+0x13e>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015d4:	ldr	r6, [pc, #480]	; (600017b8 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015d6:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600015d8:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600015dc:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600015e0:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600015e4:	ldr	r7, [pc, #468]	; (600017bc <configure_external_ram+0x330>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015e6:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600015e8:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015ec:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600015ee:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600015f2:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600015f6:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600015fa:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015fe:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001600:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001604:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001606:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000160a:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
6000160e:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001612:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001616:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000161a:	ldr	r6, [pc, #420]	; (600017c0 <configure_external_ram+0x334>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000161c:	ldr	r5, [pc, #420]	; (600017c4 <configure_external_ram+0x338>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000161e:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001622:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001626:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000162a:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000162e:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001632:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001636:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000163a:	ldr	r3, [r1, #20]
6000163c:	ldr	r2, [pc, #340]	; (60001794 <configure_external_ram+0x308>)
6000163e:	lsls	r5, r3, #31
60001640:	bpl.n	6000163a <configure_external_ram+0x1ae>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001642:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001644:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001646:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000164a:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000164c:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000164e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001652:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001656:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000165a:	ldr	r3, [r1, #20]
6000165c:	ldr	r2, [pc, #308]	; (60001794 <configure_external_ram+0x308>)
6000165e:	lsls	r4, r3, #31
60001660:	bpl.n	6000165a <configure_external_ram+0x1ce>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001662:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001664:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001666:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000166a:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000166c:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000166e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001672:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001676:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000167a:	ldr	r3, [r1, #20]
6000167c:	ldr	r2, [pc, #276]	; (60001794 <configure_external_ram+0x308>)
6000167e:	lsls	r0, r3, #31
60001680:	bpl.n	6000167a <configure_external_ram+0x1ee>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001682:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001684:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001686:	ldr	r0, [pc, #320]	; (600017c8 <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001688:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000168a:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000168c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001690:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001694:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001698:	ldr	r3, [r1, #20]
6000169a:	ldr	r2, [pc, #248]	; (60001794 <configure_external_ram+0x308>)
6000169c:	lsls	r3, r3, #31
6000169e:	bpl.n	60001698 <configure_external_ram+0x20c>
	uint32_t id = FLEXSPI2_RFDR0;
600016a0:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016a4:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600016a8:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016aa:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600016ac:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016ae:	cmp	r3, r1
600016b0:	beq.n	600016b4 <configure_external_ram+0x228>
600016b2:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016b4:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016b6:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016ba:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016bc:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016be:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016c2:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016c6:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016ca:	ldr	r3, [r1, #20]
600016cc:	ldr	r2, [pc, #196]	; (60001794 <configure_external_ram+0x308>)
600016ce:	lsls	r7, r3, #31
600016d0:	bpl.n	600016ca <configure_external_ram+0x23e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600016d2:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016d4:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016d8:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016da:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600016dc:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016de:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016e2:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016e6:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016ea:	ldr	r3, [r1, #20]
600016ec:	ldr	r2, [pc, #164]	; (60001794 <configure_external_ram+0x308>)
600016ee:	lsls	r6, r3, #31
600016f0:	bpl.n	600016ea <configure_external_ram+0x25e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600016f2:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016f4:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016f8:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016fc:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600016fe:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001700:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001704:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001708:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000170c:	ldr	r3, [r1, #20]
6000170e:	ldr	r2, [pc, #132]	; (60001794 <configure_external_ram+0x308>)
60001710:	lsls	r5, r3, #31
60001712:	bpl.n	6000170c <configure_external_ram+0x280>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001714:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001716:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000171a:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000171e:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001720:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001722:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001726:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000172a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000172e:	ldr	r3, [r1, #20]
60001730:	ldr	r2, [pc, #96]	; (60001794 <configure_external_ram+0x308>)
60001732:	lsls	r4, r3, #31
60001734:	bpl.n	6000172e <configure_external_ram+0x2a2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001736:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001738:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000173c:	ldr	r0, [pc, #136]	; (600017c8 <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000173e:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001740:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001742:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001746:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000174a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000174e:	ldr	r3, [r1, #20]
60001750:	ldr	r2, [pc, #64]	; (60001794 <configure_external_ram+0x308>)
60001752:	lsls	r0, r3, #31
60001754:	bpl.n	6000174e <configure_external_ram+0x2c2>
	uint32_t id = FLEXSPI2_RFDR0;
60001756:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000175a:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000175e:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001760:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001762:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001764:	cmp	r3, r1
60001766:	beq.n	600017d4 <configure_external_ram+0x348>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001768:	ldr	r3, [pc, #96]	; (600017cc <configure_external_ram+0x340>)
6000176a:	movs	r2, #8
6000176c:	strb	r2, [r3, #0]
6000176e:	pop	{r4, r5, r6, r7, pc}
60001770:	.word	0x401f8000
60001774:	.word	0x000170f9
60001778:	.word	0x0001b0f9
6000177c:	.word	0x000110f9
60001780:	.word	0x000100f9
60001784:	.word	0x401f8400
60001788:	.word	0x400fc000
6000178c:	.word	0x1ffffcff
60001790:	.word	0xa0000300
60001794:	.word	0x402a4000
60001798:	.word	0xffff0012
6000179c:	.word	0x00f737ff
600017a0:	.word	0x7cf0ff00
600017a4:	.word	0x80000040
600017a8:	.word	0x830f00ff
600017ac:	.word	0x00020063
600017b0:	.word	0x402a4200
600017b4:	.word	0x402a4300
600017b8:	.word	0x5af05af0
600017bc:	.word	0x3018049f
600017c0:	.word	0x26013206
600017c4:	.word	0x0a180638
600017c8:	.word	0x00030004
600017cc:	.word	0x20001328
600017d0:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017d4:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600017d8:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017dc:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017de:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017e0:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600017e4:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017e8:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017ec:	ldr	r3, [r1, #20]
600017ee:	ldr	r2, [pc, #16]	; (60001800 <configure_external_ram+0x374>)
600017f0:	lsls	r3, r3, #31
600017f2:	bpl.n	600017ec <configure_external_ram+0x360>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600017f4:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
600017f6:	ldr	r3, [pc, #12]	; (60001804 <configure_external_ram+0x378>)
600017f8:	movs	r1, #16
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600017fa:	str	r0, [r2, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
600017fc:	strb	r1, [r3, #0]
600017fe:	pop	{r4, r5, r6, r7, pc}
60001800:	.word	0x402a4000
60001804:	.word	0x20001328

60001808 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001808:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000180a:	ldr	r2, [pc, #92]	; (60001868 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000180c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000180e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001812:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001816:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000181a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000181e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001822:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001824:	tst.w	r3, #2
60001828:	beq.n	60001838 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000182a:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000182c:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000182e:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001830:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001832:	tst.w	r3, #2
60001836:	bne.n	6000182a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001838:	tst.w	r3, #8192	; 0x2000
6000183c:	bne.n	60001842 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000183e:	str	r5, [r2, #20]
			continue;
60001840:	b.n	60001822 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001842:	tst.w	r3, #4096	; 0x1000
60001846:	bne.n	6000184c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001848:	str	r6, [r2, #20]
			continue;
6000184a:	b.n	60001822 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000184c:	cmp	r3, #0
6000184e:	bge.n	60001822 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001850:	tst.w	r3, #65536	; 0x10000
60001854:	beq.n	6000185a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001856:	str	r1, [r2, #24]
			continue;
60001858:	b.n	60001822 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000185a:	lsls	r3, r3, #25
6000185c:	bmi.n	60001862 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000185e:	str	r7, [r2, #20]
			continue;
60001860:	b.n	60001822 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001862:	pop	{r4, r5, r6, r7}
60001864:	bx	lr
60001866:	nop
60001868:	.word	0x400d8000

6000186c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000186c:	ldr	r2, [pc, #236]	; (6000195c <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000186e:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001872:	ldr	r1, [pc, #236]	; (60001960 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001874:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001876:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001878:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000187a:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000187e:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001880:	ldr.w	lr, [pc, #256]	; 60001984 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001884:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001886:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000188a:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000188e:	ldr	r7, [pc, #212]	; (60001964 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001890:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001892:	ubfx	r4, r3, #8, #12
60001896:	ldr	r6, [pc, #208]	; (60001968 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001898:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000189c:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a0:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018a4:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018a8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ac:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018b0:	vmov	s15, r4
600018b4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018b8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018ba:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018be:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018c2:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018c6:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018c8:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018cc:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018d0:	ldr	r5, [pc, #152]	; (6000196c <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018d2:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018d6:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018d8:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018dc:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600018e0:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018e2:	vdiv.f32	s11, s14, s13
600018e6:	ldr	r6, [pc, #136]	; (60001970 <tempmon_init+0x104>)
600018e8:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018ea:	ldr	r1, [pc, #136]	; (60001974 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018ec:	ldr	r4, [pc, #136]	; (60001978 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018ee:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018f2:	vmov	s15, r3
600018f6:	ldr	r3, [pc, #132]	; (6000197c <tempmon_init+0x110>)
600018f8:	str.w	r3, [r6, #320]	; 0x140
600018fc:	vcvt.f32.u32	s15, s15
60001900:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001904:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001908:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000190c:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001910:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001914:	vmov	r3, s11
60001918:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000191c:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001920:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001924:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001926:	and.w	r1, r1, r5, lsl #16
6000192a:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000192e:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001932:	orrs	r3, r1
60001934:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001938:	vmov	r3, s15
6000193c:	ldr.w	r1, [r2, #272]	; 0x110
60001940:	ubfx	r3, r3, #0, #12
60001944:	orrs	r3, r1
60001946:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000194a:	ldr	r3, [r2, #0]
6000194c:	orr.w	r3, r3, #2
60001950:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001952:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001954:	ldr	r3, [pc, #40]	; (60001980 <tempmon_init+0x114>)
60001956:	movs	r2, #1
60001958:	str	r2, [r3, #0]
6000195a:	pop	{r4, r5, r6, r7, pc}
6000195c:	.word	0x400d8180
60001960:	.word	0x401f4400
60001964:	.word	0x20001334
60001968:	.word	0x20001338
6000196c:	.word	0x20001330
60001970:	.word	0x20003400
60001974:	.word	0x0fff0000
60001978:	.word	0xe000e440
6000197c:	.word	0x000021dd
60001980:	.word	0xe000e108
60001984:	.word	0x2000132c

60001988 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001988:	ldr	r3, [pc, #68]	; (600019d0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000198a:	ldr	r1, [pc, #72]	; (600019d4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000198c:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000198e:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001990:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001994:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001996:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001998:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000199c:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000199e:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019a0:	orr.w	r0, r0, #768	; 0x300
600019a4:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019a6:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019a8:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019aa:	ldr	r3, [r2, #72]	; 0x48
600019ac:	lsls	r3, r3, #24
600019ae:	bmi.n	600019aa <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019b0:	ldr	r3, [pc, #36]	; (600019d8 <analog_init+0x50>)
600019b2:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019b6:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019b8:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ba:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019bc:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019be:	ldr	r3, [r2, #72]	; 0x48
600019c0:	ands.w	r3, r3, #128	; 0x80
600019c4:	bne.n	600019be <analog_init+0x36>
	calibrating = 0;
600019c6:	ldr	r2, [pc, #20]	; (600019dc <analog_init+0x54>)
600019c8:	strb	r3, [r2, #0]
}
600019ca:	pop	{r4, r5}
600019cc:	bx	lr
600019ce:	nop
600019d0:	.word	0x400fc000
600019d4:	.word	0x400c4000
600019d8:	.word	0x400c8000
600019dc:	.word	0x20001389

600019e0 <usb_string_product_name_default>:
600019e0:	..U.S.B. .S.e.r.
600019f0:	i.a.l...

600019f8 <usb_string_manufacturer_name_default>:
600019f8:	..T.e.e.n.s.y.d.
60001a08:	u.i.n.o.

60001a10 <string0>:
60001a10:	....

60001a14 <usb_config_descriptor_12>:
60001a14:	..C.....2.......
60001a24:	...$....$....$..
60001a34:	.$..............
60001a44:	.........@......
60001a54:	@...

60001a58 <usb_config_descriptor_480>:
60001a58:	..C.....2.......
60001a68:	...$....$....$..
60001a78:	.$..............
60001a88:	................
60001a98:	....

60001a9c <qualifier_descriptor>:
60001a9c:	.......@..

60001aa6 <_serialEvent_default>:
60001aa6:	..

60001aa8 <_init>:
60001aa8:	push	{r3, r4, r5, r6, r7, lr}
60001aaa:	nop
60001aac:	pop	{r3, r4, r5, r6, r7}
60001aae:	pop	{r3}
60001ab0:	mov	lr, r3
60001ab2:	bx	lr
60001ab4:			; <UNDEFINED> instruction: 0xffffffff

60001ab8 <__main_veneer>:
60001ab8:	ldr.w	pc, [pc]	; 60001abc <__main_veneer+0x4>
60001abc:	.word	0x000029d9

60001ac0 <____libc_init_array_veneer>:
60001ac0:	ldr.w	pc, [pc]	; 60001ac4 <____libc_init_array_veneer+0x4>
60001ac4:	.word	0x00002a11

60001ac8 <__pwm_init_veneer>:
60001ac8:	ldr.w	pc, [pc]	; 60001acc <__pwm_init_veneer+0x4>
60001acc:	.word	0x000024c1

60001ad0 <__startup_late_hook_veneer>:
60001ad0:	ldr.w	pc, [pc]	; 60001ad4 <__startup_late_hook_veneer+0x4>
60001ad4:	.word	0x000020cd

60001ad8 <__startup_early_hook_veneer>:
60001ad8:	ldr.w	pc, [pc]	; 60001adc <__startup_early_hook_veneer+0x4>
60001adc:	.word	0x000020c9

60001ae0 <__set_arm_clock_veneer>:
60001ae0:	ldr.w	pc, [pc]	; 60001ae4 <__set_arm_clock_veneer+0x4>
60001ae4:	.word	0x000013cd

60001ae8 <__delay_veneer>:
60001ae8:	ldr.w	pc, [pc]	; 60001aec <__delay_veneer+0x4>
60001aec:	.word	0x00001f8d

60001af0 <__memset_veneer>:
60001af0:	ldr.w	pc, [pc]	; 60001af4 <__memset_veneer+0x4>
60001af4:	.word	0x00002fe1

60001af8 <__usb_init_serialnumber_veneer>:
60001af8:	ldr.w	pc, [pc]	; 60001afc <__usb_init_serialnumber_veneer+0x4>
60001afc:	.word	0x00002059

60001b00 <__init_array_start>:
60001b00:	.word	0x00000045
60001b04:	.word	0x0000014d
60001b08:	.word	0x00000171
60001b0c:	.word	0x00000df9
60001b10:	.word	0x00000e61

60001b14 <__init_array_end>:
60001b14:	.word	0xffffffff
60001b18:	.word	0xffffffff
60001b1c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	.short	0xb933

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	.short	0xb113
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	lsrs	r0, r2, #25
      3a:	movs	r0, #0
      3c:	.word	0x00000000
}
      40:	adds	r3, #196	; 0xc4
	...

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	.short	0xf3af
      50:	strh	r0, [r0, #0]
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	cbnz	r3, 5a <frame_dummy+0x16>
      58:	pop	{r4, pc}
      5a:	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	beq.n	58 <frame_dummy+0x14>
      60:	.word	0x4010e8bd
      64:	bx	r3
      66:	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	.word	0x00000000
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	lsrs	r4, r2, #25
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	adds	r3, #196	; 0xc4
  ADC2_CFG = mode1;
      72:	.short	0x0000
  
  if(num >= 4){
      74:	lsrs	r0, r2, #25
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <setRGB(int, int, int)>:
  analogWrite(buzzerPin, 0);
}

void setRGB(int r, int g, int b)
{
  if (r > 0) 
      7c:	.word	0xf04f2800
  {
    // Enable LED
    digitalWrite(redPin, LOW);
  } else {
    // Disable
    digitalWrite(redPin, HIGH);
      80:	movs	r2, r0
  // 0% duty cycle when disabled
  analogWrite(buzzerPin, 0);
}

void setRGB(int r, int g, int b)
{
      82:	.short	0xb538
      84:	mov	r5, r1
  if (r > 0) 
  {
    // Enable LED
    digitalWrite(redPin, LOW);
      86:	.short	0xbfcc
      88:	movgt	r1, #0
  } else {
    // Disable
    digitalWrite(redPin, HIGH);
      8a:	.short	0x2101
  // 0% duty cycle when disabled
  analogWrite(buzzerPin, 0);
}

void setRGB(int r, int g, int b)
{
      8c:	mov	r4, r2
  {
    // Enable LED
    digitalWrite(redPin, LOW);
  } else {
    // Disable
    digitalWrite(redPin, HIGH);
      8e:	.short	0xf002
      90:	ldr.w	r2, [sp, #3328]	; 0xd00
  {
    // Enable
    digitalWrite(greenPin, LOW);
  } else {
    // Disable
    digitalWrite(greenPin, HIGH);
      94:	movle.w	r0, #3
  }

  if (g > 0)
  {
    // Enable
    digitalWrite(greenPin, LOW);
      98:	.word	0x2100bfcc
  } else {
    // Disable
    digitalWrite(greenPin, HIGH);
      9c:	movle	r1, #1
      9e:	.short	0xf002
      a0:	ldr.w	r2, [r5, #3072]	; 0xc00
  }
  
  if (b > 0)
      a4:	ble.n	b2 <setRGB(int, int, int)+0x36>
  {
    // Enable
    digitalWrite(bluePin, LOW);
      a6:	.short	0x2100
      a8:	movs	r0, #4
    // Disable
    digitalWrite(bluePin, HIGH);
  }
  
  
}
      aa:	.short	0xe8bd
      ac:	ands	r0, r7
  }
  
  if (b > 0)
  {
    // Enable
    digitalWrite(bluePin, LOW);
      ae:	b.w	224c <digitalWrite>
  } else {
    // Disable
    digitalWrite(bluePin, HIGH);
      b2:	movs	r1, #1
      b4:	movs	r0, #4
  }
  
  
}
      b6:	.short	0xe8bd
      b8:	ands	r0, r7
  {
    // Enable
    digitalWrite(bluePin, LOW);
  } else {
    // Disable
    digitalWrite(bluePin, HIGH);
      ba:	.short	0xf002
      bc:			; <UNDEFINED> instruction: 0xb8c7
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
      be:	.short	0xbf00

000000c0 <setup>:
  
  
}

void setup()
{
      c0:	push	{r3, lr}
  // Attach gimbal servos to correct pins
  //servoX.attach(servo1Pin);
  //servoY.attach(servo2Pin);

  // Set RGB LED pins as outputs
  pinMode(redPin, OUTPUT);
      c2:	.short	0x2101
      c4:	movs	r0, #2
      c6:	bl	2258 <pinMode>
  pinMode(greenPin, OUTPUT);
      ca:	.short	0x2101
      cc:	movs	r0, #3
      ce:	.short	0xf002
      d0:	str.w	r2, [r3, #257]	; 0x101
  pinMode(bluePin, OUTPUT);
      d4:	.word	0xf0022004
      d8:	ldrh.w	r2, [pc, #257]	; 1dd <SdVolume::cacheFlush()+0x49>

  // Set Teensy LED pin as output
  pinMode(LED_BUILTIN,OUTPUT);
      dc:	.word	0xf002200d
      e0:	ldrh.w	r2, [fp, #33]	; 0x21

  // Set buzzer pin as output
  pinMode(buzzerPin, OUTPUT);
      e4:	.word	0xf0022101
      e8:	ldrh.w	lr, [r7, #3487]	; 0xd9f
  // Set PWM frequency for piezo buzzer according to datasheet
  analogWriteFrequency(buzzerPin, 4000);
      ec:	.word	0x20210a03
}
      f0:	ldmia.w	sp!, {r3, lr}
  pinMode(LED_BUILTIN,OUTPUT);

  // Set buzzer pin as output
  pinMode(buzzerPin, OUTPUT);
  // Set PWM frequency for piezo buzzer according to datasheet
  analogWriteFrequency(buzzerPin, 4000);
      f4:	b.w	2458 <analogWriteFrequency>
      f8:	.word	0x457a0000

000000fc <loop>:
}

void loop()
{

  setRGB(1, 0, 0);
      fc:	movs	r2, #0
      fe:	.short	0x2001
  // Set PWM frequency for piezo buzzer according to datasheet
  analogWriteFrequency(buzzerPin, 4000);
}

void loop()
{
     100:	push	{r3, lr}

  setRGB(1, 0, 0);
     102:	.short	0x4611
     104:	bl	7c <setRGB(int, int, int)>
  delay(2000);
     108:	.word	0x60faf44f
     10c:	bl	1f8c <delay>
  setRGB(0, 0, 1);
     110:	movs	r1, #0
     112:	.short	0x2201
     114:	mov	r0, r1
     116:	.short	0xf7ff
     118:	vcgt.f8	<illegal reg q7.5>, <illegal reg q7.5>, #0
  delay(2000);
     11c:	.word	0xf00160fa
     120:	vhsub.u<illegal width 64>	d2, d5, d0
  setRGB(0, 1, 0);
     124:	movs	r1, #1
     126:	mov	r0, r2
     128:	.word	0xffa8f7ff
  delay(2000);
     12c:	mov.w	r0, #2000	; 0x7d0
     130:	bl	1f8c <delay>
  setRGB(1, 1, 1);
     134:	movs	r2, #1
     136:	.short	0x4610
     138:	mov	r1, r2
     13a:	.short	0xf7ff
     13c:	vmls.i16	<illegal reg q7.5>, <illegal reg q7.5>, d7[1]
  delay(2000);
     140:	str	r2, [r7, #12]

  //enableBuzzer();
  //delay(500);
  //disableBuzzer();
  //delay(3000);
}
     142:	.short	0xe8bd
     144:	ands	r0, r1
  setRGB(0, 0, 1);
  delay(2000);
  setRGB(0, 1, 0);
  delay(2000);
  setRGB(1, 1, 1);
  delay(2000);
     146:	.short	0xf001
     148:	itttt	cs
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     14a:	.short	0xbf00

0000014c <_GLOBAL__sub_I_servoX>:

  //enableBuzzer();
  //delay(500);
  //disableBuzzer();
  //delay(3000);
}
     14c:	push	{r3, lr}
#include "Arduino.h"

#include "Servo.h"

Servo servoX;
     14e:	.short	0x4804
     150:	bl	e18 <Servo::Servo()>	; unpredictable branch in IT block

Servo servoY;
     154:	.word	0xe8bd4803

  //enableBuzzer();
  //delay(500);
  //disableBuzzer();
  //delay(3000);
}
     158:	ands	r0, r1
#include "Arduino.h"

#include "Servo.h"

Servo servoX;
Servo servoY;
     15a:	.short	0xf000
     15c:	bkpt	0x005d
     15e:	.short	0xbf00
     160:	lsrs	r4, r5, #25
     162:	.short	0x2000
     164:	lsrs	r4, r6, #25
     166:	movcs	r0, #0

00000168 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     168:	.word	0x47702000

0000016c <Print::flush()>:
	virtual void flush()				{ }
     16c:	bx	lr	; unpredictable branch in IT block

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
     16e:	nopcs

00000170 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
     170:	ldrcs	r3, [pc, #24]	; (18c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
     172:	.short	0x2200
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     174:	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     176:	.short	0x4906
     178:	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     17a:	.short	0x6058
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     17c:	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     17e:	.short	0xf883
     180:	movs	r0, #36	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     182:	.short	0xf883
     184:	movs	r0, #48	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     186:	strbcs.w	r2, [r3, #50]	; 0x32
     18a:	.short	0x4770
     18c:	lsrs	r4, r7, #25
     18e:	.short	0x2000
     190:	movs	r0, r1
     192:	.short	0x2000

00000194 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
     194:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
     196:	.short	0x4c1a
     198:	ldrb	r3, [r4, #0]
     19a:	cbnz	r3, 1a0 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
     19c:	movs	r0, #1
}
     19e:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
     1a0:	ldr	r5, [pc, #96]	; (204 <SdVolume::cacheFlush()+0x70>)
     1a2:	ldr	r3, [pc, #100]	; (208 <SdVolume::cacheFlush()+0x74>)
     1a4:	ldr	r0, [r5, #0]
     1a6:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
     1a8:	ldrb	r3, [r0, #0]
     1aa:	cmp	r3, #254	; 0xfe
     1ac:	beq.n	1de <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
     1ae:	ldr	r2, [pc, #92]	; (20c <SdVolume::cacheFlush()+0x78>)
     1b0:	bl	d60 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
     1b4:	cbz	r0, 1da <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
     1b6:	ldr	r6, [pc, #88]	; (210 <SdVolume::cacheFlush()+0x7c>)
     1b8:	ldr	r1, [r6, #0]
     1ba:	cbnz	r1, 1c4 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
     1bc:	movs	r3, #0
  }
  return true;
     1be:	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
     1c0:	strb	r3, [r4, #0]
     1c2:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
     1c4:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
     1c6:	ldrb	r3, [r0, #0]
     1c8:	cmp	r3, #254	; 0xfe
     1ca:	beq.n	1ec <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
     1cc:	ldr	r2, [pc, #60]	; (20c <SdVolume::cacheFlush()+0x78>)
     1ce:	bl	d60 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
     1d2:	cbz	r0, 1da <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
     1d4:	movs	r3, #0
     1d6:	str	r3, [r6, #0]
     1d8:	b.n	1bc <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
     1da:	movs	r0, #0
     1dc:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
     1de:	ldr	r0, [pc, #44]	; (20c <SdVolume::cacheFlush()+0x78>)
     1e0:	bl	624 <SDHC_CardWriteBlock(void const*, unsigned long)>
     1e4:	clz	r0, r0
     1e8:	lsrs	r0, r0, #5
     1ea:	b.n	1b4 <SdVolume::cacheFlush()+0x20>
     1ec:	ldr	r0, [pc, #28]	; (20c <SdVolume::cacheFlush()+0x78>)
     1ee:	bl	624 <SDHC_CardWriteBlock(void const*, unsigned long)>
     1f2:	clz	r0, r0
     1f6:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
     1f8:	cmp	r0, #0
     1fa:	bne.n	1d4 <SdVolume::cacheFlush()+0x40>
     1fc:	b.n	1da <SdVolume::cacheFlush()+0x46>
     1fe:	nop
     200:	.word	0x200010d8
     204:	.word	0x20000ed4
     208:	.word	0x20000570
     20c:	.word	0x20000ed8
     210:	.word	0x20000ed0

00000214 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
     214:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
     216:	ldr	r5, [pc, #72]	; (260 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
     218:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
     21a:	ldr	r3, [r5, #0]
     21c:	cmp	r3, r0
     21e:	beq.n	244 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
     220:	mov	r4, r0
    if (!cacheFlush()) return false;
     222:	bl	194 <SdVolume::cacheFlush()>
     226:	cbnz	r0, 22c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
     228:	movs	r0, #0
     22a:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
     22c:	ldr	r3, [pc, #52]	; (264 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
     22e:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
     230:	ldrb	r3, [r0, #0]
     232:	cmp	r3, #254	; 0xfe
     234:	beq.n	250 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
     236:	ldr	r2, [pc, #48]	; (268 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
     238:	mov	r1, r4
     23a:	bl	c70 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
     23e:	cmp	r0, #0
     240:	beq.n	228 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
     242:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
     244:	ldr	r3, [pc, #36]	; (26c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
     246:	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
     248:	ldrb	r1, [r3, #0]
     24a:	orrs	r1, r6
     24c:	strb	r1, [r3, #0]
  return true;
}
     24e:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
     250:	mov	r1, r4
     252:	ldr	r0, [pc, #20]	; (268 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
     254:	bl	52c <SDHC_CardReadBlock(void*, unsigned long)>
     258:	clz	r0, r0
     25c:	lsrs	r0, r0, #5
     25e:	b.n	23e <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
     260:	.word	0x20000570
     264:	.word	0x20000ed4
     268:	.word	0x20000ed8
     26c:	.word	0x200010d8

00000270 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
     270:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     272:	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
     276:	mov	r5, r0
     278:	mov	r6, r1
     27a:	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     27c:	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
     27e:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
     280:	ldr	r3, [pc, #96]	; (2e4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     282:	beq.n	2b4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
     284:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
     288:	ldr	r3, [r3, #0]
     28a:	cmp	r4, r3
     28c:	bne.n	2be <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
     28e:	and.w	r1, r6, #127	; 0x7f
     292:	ldr	r2, [pc, #84]	; (2e8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
     294:	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
     298:	ldr	r1, [pc, #80]	; (2ec <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
     29a:	ldrb	r0, [r5, #24]
     29c:	ldrb	r2, [r1, #0]
     29e:	cmp	r0, #1
     2a0:	orr.w	r2, r2, #1
     2a4:	strb	r2, [r1, #0]
     2a6:	bls.n	2dc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
     2a8:	ldr	r1, [r5, #8]
  return true;
     2aa:	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
     2ac:	ldr	r2, [pc, #64]	; (2f0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
     2ae:	add	r3, r1
     2b0:	str	r3, [r2, #0]
     2b2:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     2b4:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
     2b8:	ldr	r3, [r3, #0]
     2ba:	cmp	r4, r3
     2bc:	beq.n	2d0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
     2be:	movs	r1, #0
     2c0:	mov	r0, r4
     2c2:	bl	214 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
     2c6:	cbz	r0, 2de <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
     2c8:	ldrb.w	r3, [r5, #32]
     2cc:	cmp	r3, #16
     2ce:	bne.n	2e0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
     2d0:	uxtb	r1, r6
     2d2:	ldr	r2, [pc, #20]	; (2e8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
     2d4:	mov	r3, r4
     2d6:	strh.w	r7, [r2, r1, lsl #1]
     2da:	b.n	298 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
     2dc:	movs	r0, #1
}
     2de:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
     2e0:	mov	r3, r4
     2e2:	b.n	28e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
     2e4:	.word	0x20000570
     2e8:	.word	0x20000ed8
     2ec:	.word	0x200010d8
     2f0:	.word	0x20000ed0

000002f4 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
     2f4:	ldr	r3, [r0, #12]
     2f6:	adds	r3, #1
     2f8:	cmp	r3, r1
     2fa:	bcc.n	32e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
     2fc:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     2fe:	ldrb.w	r3, [r0, #32]
     302:	mov	r4, r0
     304:	mov	r6, r2
     306:	mov	r5, r1
     308:	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
     30a:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
     30c:	ldr	r3, [pc, #80]	; (360 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     30e:	beq.n	332 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
     310:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
     314:	ldr	r3, [r3, #0]
     316:	cmp	r0, r3
     318:	bne.n	33c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
     31a:	and.w	r1, r5, #127	; 0x7f
     31e:	ldr	r3, [pc, #68]	; (364 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
     320:	movs	r0, #1
     322:	ldr.w	r3, [r3, r1, lsl #2]
     326:	bic.w	r3, r3, #4026531840	; 0xf0000000
     32a:	str	r3, [r6, #0]
  }
  return true;
}
     32c:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
     32e:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
     330:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     332:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
     336:	ldr	r3, [r3, #0]
     338:	cmp	r0, r3
     33a:	beq.n	34c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
     33c:	movs	r1, #0
     33e:	bl	214 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
     342:	cbz	r0, 35a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
     344:	ldrb.w	r3, [r4, #32]
     348:	cmp	r3, #16
     34a:	bne.n	31a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
     34c:	uxtb	r1, r5
     34e:	ldr	r3, [pc, #20]	; (364 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
     350:	movs	r0, #1
     352:	ldrh.w	r3, [r3, r1, lsl #1]
     356:	str	r3, [r6, #0]
     358:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
     35a:	movs	r0, #0
     35c:	pop	{r4, r5, r6, pc}
     35e:	nop
     360:	.word	0x20000570
     364:	.word	0x20000ed8

00000368 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
     368:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
     36c:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
     36e:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
     370:	cbz	r7, 3cc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
     372:	adds	r7, #1

    // don't save new start location
    setStart = false;
     374:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
     378:	ldr	r3, [r0, #12]
     37a:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
     37e:	cbz	r3, 3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
     380:	mov	fp, r1
     382:	mov	r6, r0
     384:	mov	r9, r2
     386:	mov	r4, r7
     388:	movs	r5, #0
     38a:	b.n	398 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
     38c:	mov	r4, r3
     38e:	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
     390:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
     392:	ldr	r3, [r6, #12]
     394:	cmp	r3, r5
     396:	bls.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
     398:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
     39a:	add	r2, sp, #4
     39c:	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
     39e:	bcs.n	3a4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
     3a0:	movs	r4, #2
     3a2:	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
     3a4:	mov	r1, r4
     3a6:	bl	2f4 <SdVolume::fatGet(unsigned long, unsigned long*) const>
     3aa:	adds	r3, r4, #1
     3ac:	cbz	r0, 3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
     3ae:	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
     3b0:	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
     3b2:	cmp	r2, #0
     3b4:	bne.n	38c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
     3b6:	cmp	fp, r1
     3b8:	beq.n	3dc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
     3ba:	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
     3bc:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
     3be:	ldr	r3, [r6, #12]
     3c0:	cmp	r3, r5
     3c2:	bhi.n	398 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
     3c4:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
     3c6:	add	sp, #12
     3c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
     3cc:	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
     3d0:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
     3d2:	clz	sl, sl
     3d6:	mov.w	sl, sl, lsr #5
     3da:	b.n	378 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
     3dc:	cmp	r4, #1
     3de:	bls.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
     3e0:	ldr	r3, [r6, #12]
     3e2:	adds	r3, #1
     3e4:	cmp	r4, r3
     3e6:	bhi.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
     3e8:	mvn.w	r2, #4026531840	; 0xf0000000
     3ec:	mov	r1, r4
     3ee:	mov	r0, r6
     3f0:	bl	270 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
     3f4:	cmp	r0, #0
     3f6:	beq.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
     3f8:	cmp	r7, r4
     3fa:	bcs.n	426 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
     3fc:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
     3fe:	cmp	r4, #1
     400:	bls.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
     402:	ldr	r3, [r6, #12]
     404:	adds	r3, #1
     406:	cmp	r4, r3
     408:	bhi.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
     40a:	adds	r2, r4, #1
     40c:	mov	r1, r4
     40e:	mov	r0, r6
     410:	bl	270 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
     414:	cmp	r0, #0
     416:	beq.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
     418:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
     41a:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
     41e:	beq.n	426 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
     420:	cmp	r4, #1
     422:	bne.n	402 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
     424:	b.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
     426:	ldr.w	r1, [r9]
     42a:	cbz	r1, 444 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
     42c:	cmp	r1, #1
     42e:	bls.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
     430:	ldr	r3, [r6, #12]
     432:	adds	r3, #1
     434:	cmp	r1, r3
     436:	bhi.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
     438:	mov	r2, r7
     43a:	mov	r0, r6
     43c:	bl	270 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
     440:	cmp	r0, #0
     442:	beq.n	3c4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
     444:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
     448:	cmp.w	sl, #0
     44c:	beq.n	456 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
     44e:	adds	r7, #1

  return true;
     450:	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
     452:	str	r7, [r6, #0]
     454:	b.n	3c6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
     456:	movs	r0, #1
     458:	b.n	3c6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
     45a:	nop

0000045c <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
     45c:	ldr	r3, [pc, #128]	; (4e0 <SDHC_CMD_Do(unsigned long)+0x84>)
     45e:	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
     460:	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
     462:	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
     464:	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
     468:	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
     46a:	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
     46c:	ldr	r2, [r1, #36]	; 0x24
     46e:	ldr	r3, [pc, #112]	; (4e0 <SDHC_CMD_Do(unsigned long)+0x84>)
     470:	lsls	r2, r2, #31
     472:	bmi.n	46c <SDHC_CMD_Do(unsigned long)+0x10>
     474:	ldr	r2, [r4, #36]	; 0x24
     476:	lsls	r2, r2, #30
     478:	bmi.n	46c <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
     47a:	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
     47c:	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
     480:	mov	r0, r3
     482:	b.n	486 <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
     484:	cbz	r2, 4b2 <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
     486:	ldr	r1, [r0, #48]	; 0x30
    timeout--;
     488:	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
     48a:	ldr	r3, [pc, #88]	; (4e4 <SDHC_CMD_Do(unsigned long)+0x88>)
     48c:	ldr	r4, [pc, #80]	; (4e0 <SDHC_CMD_Do(unsigned long)+0x84>)
     48e:	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
     490:	cmp	r3, #0
     492:	beq.n	484 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
     494:	cbz	r2, 4b2 <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
     496:	cmp	r3, #1
     498:	bne.n	4b2 <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
     49a:	ldr	r3, [r4, #48]	; 0x30
     49c:	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
     4a0:	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
     4a2:	beq.n	4c4 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
     4a4:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
     4a8:	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
     4aa:	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
     4ac:	ldr.w	r4, [sp], #4
     4b0:	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
     4b2:	ldr	r2, [pc, #44]	; (4e0 <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
     4b4:	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
     4b6:	ldr	r3, [pc, #48]	; (4e8 <SDHC_CMD_Do(unsigned long)+0x8c>)
     4b8:	ldr	r1, [r2, #48]	; 0x30
     4ba:	orrs	r3, r1
     4bc:	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
     4be:	ldr.w	r4, [sp], #4
     4c2:	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
     4c4:	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
     4c8:	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
     4ca:	beq.n	4d6 <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
     4cc:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
     4d0:	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
     4d2:	str	r3, [r4, #48]	; 0x30
     4d4:	b.n	4be <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
     4d6:	orr.w	r3, r3, #1
     4da:	str	r3, [r4, #48]	; 0x30
     4dc:	b.n	4be <SDHC_CMD_Do(unsigned long)+0x62>
     4de:	nop
     4e0:	.word	0x402c0000
     4e4:	.word	0x000e0001
     4e8:	.word	0x000f0001

000004ec <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
     4ec:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
     4ee:	ldr	r5, [pc, #52]	; (524 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
     4f0:	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
     4f2:	ldr	r0, [pc, #52]	; (528 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
     4f4:	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
     4f8:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
     4fa:	bl	45c <SDHC_CMD_Do(unsigned long)>
     4fe:	mov	r3, r0
     500:	b.n	510 <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
     502:	cbnz	r3, 518 <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
     504:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
     506:	bl	45c <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
     50a:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
     50c:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
     50e:	beq.n	51c <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
     510:	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
     512:	ldr	r0, [pc, #20]	; (528 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
     514:	lsls	r2, r2, #29
     516:	bmi.n	502 <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
     518:	mov	r0, r3
     51a:	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
     51c:	cmp	r0, #0
     51e:	it	eq
     520:	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
     522:	pop	{r4, r5, r6, pc}
     524:	.word	0x402c0000
     528:	.word	0x0cdb0000

0000052c <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
     52c:	ldr	r3, [pc, #224]	; (610 <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
     52e:	ldrb	r2, [r3, #0]
     530:	cbz	r2, 536 <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
     532:	movs	r0, #3
     534:	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
     536:	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
     538:	ldrb	r3, [r3, #1]
     53a:	mov	r6, r0
     53c:	cbnz	r3, 540 <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
     53e:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
     540:	ldr	r5, [pc, #208]	; (614 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
     542:	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
     546:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
     54a:	ldr	r0, [pc, #204]	; (618 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
     54c:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
     54e:	ldr	r3, [r5, #72]	; 0x48
     550:	orr.w	r3, r3, #16
     554:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
     556:	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
     558:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
     55a:	bl	45c <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
     55e:	cmp	r0, #0
     560:	bne.n	5fe <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
     562:	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
     564:	ldr	r3, [r5, #16]
     566:	add.w	r2, r6, #64	; 0x40
     56a:	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
     56e:	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
     570:	ldr	r3, [r4, #48]	; 0x30
     572:	ldr	r6, [pc, #160]	; (614 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
     574:	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
     578:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
     57c:	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
     57e:	bne.n	600 <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
     580:	ldr	r3, [r4, #36]	; 0x24
     582:	lsls	r5, r3, #20
     584:	bpl.n	580 <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
     586:	ldr	r3, [r1, #32]
     588:	adds	r2, #64	; 0x40
     58a:	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
     58e:	ldr	r3, [r1, #32]
     590:	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
     594:	ldr	r3, [r1, #32]
     596:	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
     59a:	ldr	r3, [r1, #32]
     59c:	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
     5a0:	ldr	r3, [r1, #32]
     5a2:	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
     5a6:	ldr	r3, [r1, #32]
     5a8:	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
     5ac:	ldr	r3, [r1, #32]
     5ae:	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
     5b2:	ldr	r3, [r1, #32]
     5b4:	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
     5b8:	ldr	r3, [r1, #32]
     5ba:	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
     5be:	ldr	r3, [r1, #32]
     5c0:	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
     5c4:	ldr	r3, [r1, #32]
     5c6:	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
     5ca:	ldr	r3, [r1, #32]
     5cc:	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
     5d0:	ldr	r3, [r1, #32]
     5d2:	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
     5d6:	ldr	r3, [r1, #32]
     5d8:	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
     5dc:	ldr	r3, [r1, #32]
     5de:	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
     5e2:	ldr	r3, [r1, #32]
     5e4:	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
     5e8:	cmp	r2, r0
     5ea:	bne.n	570 <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
     5ec:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
     5ee:	ldr	r1, [pc, #36]	; (614 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
     5f0:	ldr	r3, [r1, #48]	; 0x30
     5f2:	ldr	r2, [pc, #32]	; (614 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
     5f4:	lsls	r3, r3, #30
     5f6:	bpl.n	5f0 <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
     5f8:	ldr	r3, [pc, #32]	; (61c <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
     5fa:	str	r3, [r2, #48]	; 0x30

  return result;
     5fc:	pop	{r4, r5, r6, pc}
}
     5fe:	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
     600:	ldr	r2, [pc, #28]	; (620 <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
     602:	orrs	r2, r3
     604:	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
     606:	bl	4ec <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
     60a:	movs	r0, #1
     60c:	b.n	5ee <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
     60e:	nop
     610:	.word	0x200010dc
     614:	.word	0x402c0000
     618:	.word	0x113a0010
     61c:	.word	0x01000022
     620:	.word	0x00700020

00000624 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
     624:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
     626:	ldr	r3, [pc, #160]	; (6c8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
     628:	ldrb	r2, [r3, #0]
     62a:	cbz	r2, 630 <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
     62c:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
     62e:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
     630:	ldrb	r3, [r3, #1]
     632:	mov	r4, r0
     634:	cbnz	r3, 638 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
     636:	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
     638:	ldr	r5, [pc, #144]	; (6cc <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
     63a:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
     63e:	ldr	r0, [pc, #144]	; (6d0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
     640:	ldr	r3, [r5, #48]	; 0x30
     642:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
     644:	ldr	r3, [r5, #72]	; 0x48
     646:	bic.w	r3, r3, #16
     64a:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
     64c:	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
     64e:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
     650:	bl	45c <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
     654:	cmp	r0, #0
     656:	bne.n	62e <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
     658:	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
     65a:	ldr	r3, [r5, #16]
     65c:	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
     660:	mov	r6, r5
     662:	ldr	r3, [r2, #48]	; 0x30
     664:	ldr	r1, [pc, #100]	; (6cc <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
     666:	lsls	r0, r3, #27
     668:	bpl.n	662 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
     66a:	ldr	r3, [r6, #48]	; 0x30
     66c:	tst.w	r3, #7340032	; 0x700000
     670:	bne.n	6a6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
     672:	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
     676:	ldr.w	r3, [r4], #4
     67a:	ldr	r5, [pc, #80]	; (6cc <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
     67c:	cmp	r1, r4
			SDHC_DATPORT = *pData++;
     67e:	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
     680:	bne.n	676 <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
     682:	ldr	r3, [r6, #48]	; 0x30
     684:	orr.w	r3, r3, #16
     688:	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
     68a:	ldr	r3, [r6, #48]	; 0x30
     68c:	ands.w	r0, r3, #7340032	; 0x700000
     690:	bne.n	6b6 <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
     692:	cmp	r7, r1
     694:	bne.n	662 <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
     696:	ldr	r1, [pc, #52]	; (6cc <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
     698:	ldr	r3, [r1, #48]	; 0x30
     69a:	ldr	r2, [pc, #48]	; (6cc <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
     69c:	lsls	r3, r3, #30
     69e:	bpl.n	698 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
     6a0:	ldr	r3, [pc, #48]	; (6d4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
     6a2:	str	r3, [r2, #48]	; 0x30

  return result;
     6a4:	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
     6a6:	ldr	r2, [r1, #48]	; 0x30
     6a8:	ldr	r3, [pc, #44]	; (6d8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
     6aa:	orrs	r3, r2
     6ac:	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
     6ae:	bl	4ec <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
     6b2:	movs	r0, #1
     6b4:	b.n	696 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
     6b6:	ldr	r2, [r5, #48]	; 0x30
     6b8:	ldr	r3, [pc, #28]	; (6d8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
     6ba:	orrs	r3, r2
     6bc:	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
     6be:	bl	4ec <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
     6c2:	movs	r0, #1
     6c4:	b.n	696 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
     6c6:	nop
     6c8:	.word	0x200010dc
     6cc:	.word	0x402c0000
     6d0:	.word	0x183a0000
     6d4:	.word	0x01000012
     6d8:	.word	0x00700010

000006dc <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
     6dc:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
     6de:	ldrsb.w	r3, [r0, #5]
     6e2:	cmp	r3, #0
     6e4:	blt.n	6ee <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
     6e6:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
     6ea:	b.w	194 <SdVolume::cacheFlush()>
     6ee:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
     6f0:	movs	r1, #1
     6f2:	ldr	r0, [r0, #16]
     6f4:	bl	214 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
     6f8:	cbz	r0, 73c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
     6fa:	ldrb	r5, [r4, #20]
     6fc:	ldr	r3, [pc, #64]	; (740 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
     6fe:	adds.w	r5, r3, r5, lsl #5
     702:	beq.n	73c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
     704:	ldrb	r3, [r4, #6]
     706:	cmp	r3, #1
     708:	bls.n	736 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
     70a:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
     70c:	ldr	r1, [pc, #52]	; (744 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
     70e:	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
     710:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
     712:	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
     714:	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
     716:	cbz	r3, 726 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
     718:	add.w	r1, r5, #22
     71c:	add.w	r0, r5, #24
     720:	blx	r3
      d->lastAccessDate = d->lastWriteDate;
     722:	ldrh	r3, [r5, #24]
     724:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
     726:	ldrb	r3, [r4, #5]
     728:	and.w	r3, r3, #127	; 0x7f
     72c:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
     72e:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
     732:	b.w	194 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
     736:	ldr	r3, [r4, #24]
     738:	str	r3, [r5, #28]
     73a:	b.n	70a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
     73c:	movs	r0, #0
     73e:	pop	{r3, r4, r5, pc}
     740:	.word	0x20000ed8
     744:	.word	0x200010ec

00000748 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
     748:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
     74a:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
     74e:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
     750:	movs	r1, #1
     752:	ldr	r0, [r0, #32]
     754:	bl	368 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
     758:	cbz	r0, 770 <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
     75a:	ldr	r3, [r4, #28]
     75c:	cbnz	r3, 76e <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
     75e:	ldrb	r3, [r4, #5]
     760:	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
     762:	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
     764:	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
     768:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
     76a:	strb	r3, [r4, #5]
     76c:	pop	{r4, pc}
  }
  return true;
     76e:	movs	r0, #1
}
     770:	pop	{r4, pc}
     772:	nop

00000774 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
     774:	push	{r3, r4, r5, r6, r7, lr}
     776:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
     778:	cbz	r3, 780 <SdFile::seekSet(unsigned long)+0xc>
     77a:	ldr	r2, [r0, #24]
     77c:	cmp	r2, r1
     77e:	bcs.n	784 <SdFile::seekSet(unsigned long)+0x10>
     780:	movs	r0, #0
     782:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
     784:	cmp	r3, #2
     786:	mov	r7, r1
     788:	mov	r5, r0
     78a:	beq.n	7c6 <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
     78c:	cbz	r7, 7cc <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
     78e:	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
     790:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
     792:	ldr	r1, [r5, #12]
     794:	ldrb	r3, [r3, #16]
     796:	subs	r2, r1, #1
     798:	adds	r3, #9
     79a:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
     79c:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
     79e:	cmp	r2, r4
     7a0:	bhi.n	7a8 <SdFile::seekSet(unsigned long)+0x34>
     7a2:	cbz	r1, 7a8 <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
     7a4:	subs	r4, r4, r2
     7a6:	b.n	7ac <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
     7a8:	ldr	r3, [r5, #28]
     7aa:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
     7ac:	add.w	r6, r5, #8
     7b0:	b.n	7c0 <SdFile::seekSet(unsigned long)+0x4c>
     7b2:	ldr	r1, [r5, #8]
     7b4:	subs	r4, #1
     7b6:	ldr	r0, [r5, #32]
     7b8:	bl	2f4 <SdVolume::fatGet(unsigned long, unsigned long*) const>
     7bc:	cmp	r0, #0
     7be:	beq.n	780 <SdFile::seekSet(unsigned long)+0xc>
     7c0:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
     7c2:	cmp	r4, #0
     7c4:	bne.n	7b2 <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
     7c6:	str	r7, [r5, #12]
    return true;
     7c8:	movs	r0, #1
     7ca:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
     7cc:	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
     7ce:	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
     7d0:	str	r7, [r5, #12]
    return true;
     7d2:	pop	{r3, r4, r5, r6, r7, pc}

000007d4 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
     7d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7d8:	sub	sp, #20
     7da:	mov	r7, r0
     7dc:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
     7de:	ldrb	r2, [r0, #6]
     7e0:	cmp	r2, #1
     7e2:	beq.n	7f0 <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     7e4:	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
     7e6:	movs	r0, #0
     7e8:	strb	r3, [r7, #4]
}
     7ea:	add	sp, #20
     7ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
     7f0:	ldrb	r2, [r0, #5]
     7f2:	lsls	r4, r2, #30
     7f4:	bpl.n	7e4 <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
     7f6:	lsls	r3, r2, #29
     7f8:	mov	fp, r1
     7fa:	bpl.n	80e <SdFile::write(void const*, unsigned int)+0x3a>
     7fc:	ldr	r1, [r7, #24]
     7fe:	ldr	r3, [r7, #12]
     800:	cmp	r3, r1
     802:	beq.w	986 <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
     806:	bl	774 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
     80a:	cmp	r0, #0
     80c:	beq.n	7e4 <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
     80e:	ldr	r3, [sp, #4]
     810:	ldr	r1, [r7, #12]
     812:	cmp	r3, #0
     814:	beq.w	9a2 <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
     818:	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
     81c:	ldr.w	r9, [pc, #412]	; 9bc <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
     820:	ldr.w	sl, [pc, #412]	; 9c0 <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
     824:	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
     826:	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
     82a:	ldrb	r2, [r0, #4]
     82c:	subs	r2, #1
     82e:	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
     832:	ands.w	r5, r5, #255	; 0xff
     836:	bne.n	8e0 <SdFile::write(void const*, unsigned int)+0x10c>
     838:	cmp	r6, #0
     83a:	bne.n	8e0 <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
     83c:	ldr	r1, [r7, #8]
     83e:	cmp	r1, #0
     840:	bne.n	936 <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
     842:	ldr	r2, [r7, #28]
     844:	cmp	r2, #0
     846:	beq.w	95c <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
     84a:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
     84c:	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     850:	subs	r2, #2
     852:	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
     856:	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     858:	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
     85a:	cmp	r4, r8
     85c:	bls.n	8e4 <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     85e:	lsl.w	r2, r2, lr
     862:	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
     864:	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     868:	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
     86a:	cbnz	r6, 874 <SdFile::write(void const*, unsigned int)+0xa0>
     86c:	ldr	r0, [r7, #12]
     86e:	ldr	r2, [r7, #24]
     870:	cmp	r0, r2
     872:	bcs.n	91c <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
     874:	mov	r0, r5
     876:	movs	r1, #1
     878:	bl	214 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
     87c:	cmp	r0, #0
     87e:	beq.n	7e4 <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
     880:	add	r6, r9
      uint8_t* end = dst + n;
     882:	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
     886:	cmp	r6, lr
     888:	beq.n	8a6 <SdFile::write(void const*, unsigned int)+0xd2>
     88a:	add.w	r1, fp, #4294967295
     88e:	subs	r2, r6, #1
     890:	add.w	r5, lr, #4294967295
     894:	ldrb.w	r0, [r1, #1]!
     898:	strb.w	r0, [r2, #1]!
     89c:	cmp	r5, r2
     89e:	bne.n	894 <SdFile::write(void const*, unsigned int)+0xc0>
     8a0:	rsb	r6, r6, lr
     8a4:	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
     8a6:	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
     8a8:	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
     8ac:	add.w	r1, r4, r5
     8b0:	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
     8b2:	bne.n	824 <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
     8b4:	ldr	r3, [r7, #24]
     8b6:	cmp	r1, r3
     8b8:	bls.n	990 <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
     8ba:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
     8bc:	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
     8be:	orr.w	r2, r2, #128	; 0x80
     8c2:	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
     8c4:	lsls	r2, r2, #28
     8c6:	bpl.n	8d8 <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
     8c8:	ldrb	r3, [r7, #6]
     8ca:	cmp	r3, #0
     8cc:	beq.n	7e4 <SdFile::write(void const*, unsigned int)+0x10>
     8ce:	mov	r0, r7
     8d0:	bl	6dc <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
     8d4:	cmp	r0, #0
     8d6:	beq.n	7e4 <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
     8d8:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
     8da:	add	sp, #20
     8dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8e0:	ldr	r2, [r7, #8]
     8e2:	b.n	84c <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     8e4:	lsl.w	r2, r2, lr
     8e8:	add	r5, r1
    if (n == 512) {
     8ea:	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     8ee:	add	r5, r2
    if (n == 512) {
     8f0:	bne.n	86a <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
     8f2:	ldr.w	r2, [sl]
     8f6:	cmp	r5, r2
     8f8:	beq.n	96e <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
     8fa:	ldr	r2, [pc, #176]	; (9ac <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
     8fc:	mov	r1, r5
     8fe:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
     900:	ldrb	r2, [r0, #0]
     902:	cmp	r2, #254	; 0xfe
     904:	beq.n	978 <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
     906:	mov	r2, fp
     908:	bl	d60 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
     90c:	cmp	r0, #0
     90e:	beq.w	7e4 <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
     912:	add.w	fp, fp, #512	; 0x200
     916:	mov.w	r4, #512	; 0x200
     91a:	b.n	8a6 <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
     91c:	bl	194 <SdVolume::cacheFlush()>
     920:	cmp	r0, #0
     922:	beq.w	7e4 <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
     926:	ldr	r1, [pc, #136]	; (9b0 <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
     928:	str.w	r5, [sl]
     92c:	ldrb	r2, [r1, #0]
     92e:	orr.w	r2, r2, #1
     932:	strb	r2, [r1, #0]
     934:	b.n	880 <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
     936:	add	r2, sp, #12
     938:	bl	2f4 <SdVolume::fatGet(unsigned long, unsigned long*) const>
     93c:	cmp	r0, #0
     93e:	beq.w	7ea <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
     942:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
     944:	movw	r1, #65528	; 0xfff8
     948:	ldr	r3, [pc, #104]	; (9b4 <SdFile::write(void const*, unsigned int)+0x1e0>)
     94a:	ldrb.w	r4, [r0, #32]
     94e:	ldr	r2, [sp, #12]
     950:	cmp	r4, #16
     952:	it	ne
     954:	movne	r1, r3
     956:	cmp	r2, r1
     958:	bcc.w	84a <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
     95c:	mov	r0, r7
     95e:	bl	748 <SdFile::addCluster()>
     962:	cmp	r0, #0
     964:	beq.w	7e4 <SdFile::write(void const*, unsigned int)+0x10>
     968:	ldr	r0, [r7, #32]
     96a:	ldr	r2, [r7, #8]
     96c:	b.n	84c <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
     96e:	mov.w	r2, #4294967295
     972:	str.w	r2, [sl]
     976:	b.n	8fa <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
     978:	mov	r0, fp
     97a:	bl	624 <SDHC_CardWriteBlock(void const*, unsigned long)>
     97e:	clz	r0, r0
     982:	lsrs	r0, r0, #5
     984:	b.n	90c <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
     986:	ldr	r3, [sp, #4]
     988:	cmp	r3, #0
     98a:	bne.w	818 <SdFile::write(void const*, unsigned int)+0x44>
     98e:	b.n	8c4 <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
     990:	ldr	r3, [pc, #36]	; (9b8 <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
     992:	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
     994:	ldr	r3, [r3, #0]
     996:	cmp	r3, #0
     998:	beq.n	8c4 <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
     99a:	orr.w	r2, r2, #128	; 0x80
     99e:	strb	r2, [r7, #5]
     9a0:	b.n	8c4 <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
     9a2:	ldr	r3, [r7, #24]
     9a4:	cmp	r3, r1
     9a6:	bcc.n	8ba <SdFile::write(void const*, unsigned int)+0xe6>
     9a8:	ldrb	r2, [r7, #5]
     9aa:	b.n	8c4 <SdFile::write(void const*, unsigned int)+0xf0>
     9ac:	.word	0x20000ed4
     9b0:	.word	0x200010d8
     9b4:	.word	0x0ffffff8
     9b8:	.word	0x200010ec
     9bc:	.word	0x20000ed8
     9c0:	.word	0x20000570

000009c4 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
     9c4:	push	{lr}
     9c6:	sub	sp, #12
  return write(&b, 1);
     9c8:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
     9ca:	add	r3, sp, #8
     9cc:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
     9d0:	mov	r1, r3
     9d2:	bl	7d4 <SdFile::write(void const*, unsigned int)>
}
     9d6:	add	sp, #12
     9d8:	ldr.w	pc, [sp], #4

000009dc <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
     9dc:	push	{r4, r5, r6, r7, lr}
     9de:	ldr	r6, [pc, #156]	; (a7c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     9e0:	movs	r7, #255	; 0xff
     9e2:	ldr	r5, [pc, #156]	; (a80 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
     9e4:	ldr.w	lr, [r6]
     9e8:	ldr	r3, [r5, #0]
     9ea:	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     9ec:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     9ee:	tst.w	r4, #2031616	; 0x1f0000
     9f2:	beq.n	9ec <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
     9f4:	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
     9f6:	uxtb	r4, r4
     9f8:	cmp	r4, #255	; 0xff
     9fa:	beq.n	a08 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
     9fc:	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
     9fe:	rsb	r4, lr, r4
     a02:	cmp.w	r4, #300	; 0x12c
     a06:	bcc.n	9ea <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     a08:	orr.w	r4, r1, #64	; 0x40
     a0c:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     a0e:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     a10:	tst.w	r4, #2031616	; 0x1f0000
     a14:	beq.n	a0e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
     a16:	ldr	r4, [r3, #116]	; 0x74
     a18:	movs	r6, #24
     a1a:	lsr.w	r4, r2, r6
     a1e:	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     a20:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     a22:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     a24:	tst.w	r4, #2031616	; 0x1f0000
     a28:	beq.n	a22 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
     a2a:	subs	r6, #8
     a2c:	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
     a2e:	cmn.w	r6, #8
     a32:	bne.n	a1a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
     a34:	cbz	r1, a76 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
     a36:	cmp	r1, #8
     a38:	ite	eq
     a3a:	moveq	r2, #135	; 0x87
     a3c:	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     a3e:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     a40:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     a42:	tst.w	r2, #2031616	; 0x1f0000
     a46:	beq.n	a40 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
     a48:	ldr	r2, [r3, #116]	; 0x74
     a4a:	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     a4c:	movs	r4, #255	; 0xff
     a4e:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     a50:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     a52:	tst.w	r2, #2031616	; 0x1f0000
     a56:	beq.n	a50 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
     a58:	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
     a5a:	uxtb	r3, r1
     a5c:	adds	r1, #1
     a5e:	subs	r3, #255	; 0xff
     a60:	uxtb	r2, r2
     a62:	it	ne
     a64:	movne	r3, #1
     a66:	strb	r2, [r0, #1]
     a68:	ands.w	r3, r3, r2, lsr #7
     a6c:	beq.n	a72 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
     a6e:	ldr	r3, [r5, #0]
     a70:	b.n	a4e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
     a72:	mov	r0, r2
     a74:	pop	{r4, r5, r6, r7, pc}
     a76:	movs	r2, #149	; 0x95
     a78:	b.n	a3e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
     a7a:	nop
     a7c:	.word	0x20001324
     a80:	.word	0x2000057c

00000a84 <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
     a84:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
     a86:	movs	r1, #1
     a88:	ldrb	r0, [r0, #0]
     a8a:	bl	224c <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
     a8e:	ldr	r1, [pc, #76]	; (adc <Sd2Card::chipSelectHigh()+0x58>)
     a90:	ldrb	r3, [r1, #0]
     a92:	cbz	r3, ad0 <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
     a94:	ldr	r2, [pc, #72]	; (ae0 <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
     a96:	movs	r0, #0
     a98:	ldrb	r3, [r2, #19]
     a9a:	strb	r0, [r1, #0]
     a9c:	mov	r1, r3
     a9e:	cbz	r3, ad0 <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
     aa0:	lsls	r0, r3, #31
     aa2:	bpl.n	aaa <Sd2Card::chipSelectHigh()+0x26>
     aa4:	ldr	r4, [r2, #40]	; 0x28
     aa6:	ldr	r0, [pc, #60]	; (ae4 <Sd2Card::chipSelectHigh()+0x60>)
     aa8:	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
     aaa:	lsls	r3, r3, #30
     aac:	bpl.n	ab6 <Sd2Card::chipSelectHigh()+0x32>
     aae:	ldr	r0, [r2, #44]	; 0x2c
     ab0:	ldr	r3, [pc, #52]	; (ae8 <Sd2Card::chipSelectHigh()+0x64>)
     ab2:	ldrb	r1, [r2, #19]
     ab4:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
     ab6:	lsls	r4, r1, #29
     ab8:	bpl.n	ac2 <Sd2Card::chipSelectHigh()+0x3e>
     aba:	ldr	r0, [r2, #48]	; 0x30
     abc:	ldr	r3, [pc, #44]	; (aec <Sd2Card::chipSelectHigh()+0x68>)
     abe:	ldrb	r1, [r2, #19]
     ac0:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     ac2:	lsls	r0, r1, #28
     ac4:	bmi.n	ad2 <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
     ac6:	lsls	r3, r1, #27
     ac8:	bpl.n	ad0 <Sd2Card::chipSelectHigh()+0x4c>
     aca:	ldr	r2, [r2, #56]	; 0x38
     acc:	ldr	r3, [pc, #32]	; (af0 <Sd2Card::chipSelectHigh()+0x6c>)
     ace:	str	r2, [r3, #0]
     ad0:	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
     ad2:	ldr	r0, [r2, #52]	; 0x34
     ad4:	ldr	r3, [pc, #28]	; (af4 <Sd2Card::chipSelectHigh()+0x70>)
     ad6:	ldrb	r1, [r2, #19]
     ad8:	str	r0, [r3, #0]
     ada:	b.n	ac6 <Sd2Card::chipSelectHigh()+0x42>
     adc:	.word	0x200010f8
     ae0:	.word	0x2000057c
     ae4:	.word	0xe000e100
     ae8:	.word	0xe000e104
     aec:	.word	0xe000e108
     af0:	.word	0xe000e110
     af4:	.word	0xe000e10c

00000af8 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
     af8:	ldr	r2, [pc, #256]	; (bfc <Sd2Card::chipSelectLow()+0x104>)
     afa:	ldrb	r3, [r2, #0]
     afc:	cbz	r3, b06 <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
     afe:	ldrb	r0, [r0, #0]
     b00:	movs	r1, #0
     b02:	b.w	224c <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
     b06:	ldr	r3, [pc, #248]	; (c00 <Sd2Card::chipSelectLow()+0x108>)
     b08:	ldr	r1, [pc, #248]	; (c04 <Sd2Card::chipSelectLow()+0x10c>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
     b0a:	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
     b0c:	movs	r4, #1
     b0e:	ldrb	r6, [r3, #19]
     b10:	ldr	r5, [r1, #0]
     b12:	strb	r4, [r2, #0]
     b14:	ldr	r4, [r1, #4]
     b16:	cmp	r6, #0
     b18:	beq.n	b7e <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
     b1a:	cpsid	i
			if (interruptMasksUsed & 0x01) {
     b1c:	ldrb	r1, [r3, #19]
     b1e:	lsls	r6, r1, #31
     b20:	mov	r2, r1
     b22:	bpl.n	b36 <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
     b24:	ldr.w	lr, [pc, #252]	; c24 <Sd2Card::chipSelectLow()+0x12c>
     b28:	ldr	r7, [r3, #20]
     b2a:	ldr.w	r6, [lr]
     b2e:	ands	r6, r7
     b30:	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
     b32:	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
     b36:	lsls	r7, r1, #30
     b38:	bpl.n	b48 <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
     b3a:	ldr	r6, [pc, #204]	; (c08 <Sd2Card::chipSelectLow()+0x110>)
     b3c:	ldr	r1, [r3, #24]
     b3e:	ldr	r7, [r6, #0]
     b40:	ldrb	r2, [r3, #19]
     b42:	ands	r1, r7
     b44:	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
     b46:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
     b48:	lsls	r6, r2, #29
     b4a:	bpl.n	b5a <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
     b4c:	ldr	r6, [pc, #188]	; (c0c <Sd2Card::chipSelectLow()+0x114>)
     b4e:	ldr	r1, [r3, #28]
     b50:	ldr	r7, [r6, #0]
     b52:	ldrb	r2, [r3, #19]
     b54:	ands	r1, r7
     b56:	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
     b58:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
     b5a:	lsls	r1, r2, #28
     b5c:	bpl.n	b6c <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
     b5e:	ldr	r6, [pc, #176]	; (c10 <Sd2Card::chipSelectLow()+0x118>)
     b60:	ldr	r1, [r3, #32]
     b62:	ldr	r7, [r6, #0]
     b64:	ldrb	r2, [r3, #19]
     b66:	ands	r1, r7
     b68:	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
     b6a:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
     b6c:	lsls	r2, r2, #27
     b6e:	bpl.n	b7c <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
     b70:	ldr	r1, [pc, #160]	; (c14 <Sd2Card::chipSelectLow()+0x11c>)
     b72:	ldr	r2, [r3, #36]	; 0x24
     b74:	ldr	r6, [r1, #0]
     b76:	ands	r2, r6
     b78:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
     b7a:	str	r2, [r1, #0]
			}
			__enable_irq();
     b7c:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
     b7e:	ldr	r2, [r3, #8]
     b80:	ldr	r1, [pc, #124]	; (c00 <Sd2Card::chipSelectLow()+0x108>)
     b82:	cmp	r2, r5
     b84:	beq.n	bde <Sd2Card::chipSelectLow()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     b86:	ldr	r2, [pc, #144]	; (c18 <Sd2Card::chipSelectLow()+0x120>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     b88:	ldr	r6, [pc, #144]	; (c1c <Sd2Card::chipSelectLow()+0x124>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
     b8a:	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
     b8c:	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
     b8e:	ubfx	r1, r2, #4, #2
     b92:	ubfx	r2, r2, #26, #3
     b96:	ldr.w	r1, [r6, r1, lsl #2]
     b9a:	adds	r2, #1
     b9c:	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     ba0:	cbz	r5, bda <Sd2Card::chipSelectLow()+0xe2>
     ba2:	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
     ba6:	cbz	r2, bba <Sd2Card::chipSelectLow()+0xc2>
     ba8:	udiv	r1, r1, r2
     bac:	cmp	r1, r5
     bae:	it	hi
     bb0:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
     bb2:	cmp.w	r2, #258	; 0x102
     bb6:	bcc.n	be2 <Sd2Card::chipSelectLow()+0xea>
     bb8:	ldr	r2, [pc, #100]	; (c20 <Sd2Card::chipSelectLow()+0x128>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     bba:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     bbc:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     bbe:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     bc0:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
     bc2:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
     bc4:	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
     bc6:	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
     bc8:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
     bca:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
     bcc:	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
     bce:	movs	r1, #0
     bd0:	ldrb	r0, [r0, #0]
}
     bd2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
     bd6:	b.w	224c <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     bda:	mov	r2, r1
     bdc:	b.n	ba6 <Sd2Card::chipSelectLow()+0xae>
     bde:	ldr	r2, [r1, #12]
     be0:	b.n	bbc <Sd2Card::chipSelectLow()+0xc4>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
     be2:	cmp	r2, #2
     be4:	it	ls
     be6:	movls	r2, #0
     be8:	bls.n	bba <Sd2Card::chipSelectLow()+0xc2>
     bea:	subs	r2, #2
     bec:	lsrs	r5, r2, #1
     bee:	lsls	r1, r5, #16
     bf0:	orr.w	r2, r2, r5, lsl #8
     bf4:	and.w	r1, r1, #16711680	; 0xff0000
     bf8:	orrs	r2, r1
     bfa:	b.n	bba <Sd2Card::chipSelectLow()+0xc2>
     bfc:	.word	0x200010f8
     c00:	.word	0x2000057c
     c04:	.word	0x200010f0
     c08:	.word	0xe000e184
     c0c:	.word	0xe000e188
     c10:	.word	0xe000e18c
     c14:	.word	0xe000e190
     c18:	.word	0x400fc000
     c1c:	.word	0x20000018
     c20:	.word	0x007f7fff
     c24:	.word	0xe000e180

00000c28 <Sd2Card::waitStartBlock()>:
     c28:	ldr	r1, [pc, #60]	; (c68 <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
     c2a:	push	{r4, r5, r6}
     c2c:	ldr	r5, [pc, #60]	; (c6c <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c2e:	movs	r4, #255	; 0xff
     c30:	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     c32:	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     c34:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     c36:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     c38:	tst.w	r3, #2031616	; 0x1f0000
     c3c:	beq.n	c36 <Sd2Card::waitStartBlock()+0xe>
     c3e:	ldr	r3, [r2, #116]	; 0x74
     c40:	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
     c42:	cmp	r3, #255	; 0xff
     c44:	strb	r3, [r0, #1]
     c46:	bne.n	c58 <Sd2Card::waitStartBlock()+0x30>
     c48:	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
     c4a:	subs	r3, r3, r6
     c4c:	cmp.w	r3, #300	; 0x12c
     c50:	bls.n	c32 <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
     c52:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
     c54:	pop	{r4, r5, r6}
     c56:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
     c58:	sub.w	r0, r3, #254	; 0xfe
     c5c:	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
     c60:	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
     c62:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
     c64:	bx	lr
     c66:	nop
     c68:	.word	0x20001324
     c6c:	.word	0x2000057c

00000c70 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
     c70:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
     c72:	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
     c74:	mov	r5, r1
     c76:	mov	r4, r0
     c78:	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
     c7a:	cmp	r3, #3
     c7c:	it	ne
     c7e:	lslne	r5, r1, #9
  chipSelectLow();
     c80:	bl	af8 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
     c84:	movs	r1, #17
     c86:	mov	r2, r5
     c88:	mov	r0, r4
     c8a:	bl	9dc <Sd2Card::cardCommand(unsigned char, unsigned long)>
     c8e:	cbnz	r0, c98 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
     c90:	mov	r0, r4
     c92:	bl	c28 <Sd2Card::waitStartBlock()>
     c96:	cbnz	r0, ca2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
     c98:	mov	r0, r4
     c9a:	bl	a84 <Sd2Card::chipSelectHigh()>
  return false;
     c9e:	movs	r0, #0
}
     ca0:	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
     ca2:	ldr	r5, [pc, #68]	; (ce8 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
     ca4:	mov.w	r2, #512	; 0x200
     ca8:	movs	r1, #255	; 0xff
     caa:	mov	r0, r6
     cac:	bl	2fe0 <memset>
     cb0:	mov.w	r3, #512	; 0x200
     cb4:	mov	r2, r6
     cb6:	mov	r0, r5
     cb8:	mov	r1, r6
     cba:	bl	fc0 <SPIClass::transfer(void const*, void*, unsigned int)>
     cbe:	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     cc0:	movs	r2, #255	; 0xff
     cc2:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     cc4:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     cc6:	tst.w	r2, #2031616	; 0x1f0000
     cca:	beq.n	cc4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     ccc:	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     cce:	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     cd0:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     cd2:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     cd4:	tst.w	r2, #2031616	; 0x1f0000
     cd8:	beq.n	cd2 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
     cda:	mov	r0, r4
     cdc:	ldr	r3, [r3, #116]	; 0x74
     cde:	bl	a84 <Sd2Card::chipSelectHigh()>
  return true;
     ce2:	movs	r0, #1
     ce4:	pop	{r4, r5, r6, pc}
     ce6:	nop
     ce8:	.word	0x2000057c

00000cec <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
     cec:	ldr	r3, [pc, #108]	; (d5c <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
     cee:	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     cf0:	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     cf2:	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     cf4:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     cf6:	tst.w	r3, #2031616	; 0x1f0000
     cfa:	beq.n	cf4 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
     cfc:	subs	r1, r2, #1
     cfe:	ldr	r3, [r4, #116]	; 0x74
     d00:	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d04:	ldrb.w	r3, [r1, #1]!
     d08:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     d0a:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     d0c:	tst.w	r3, #2031616	; 0x1f0000
     d10:	beq.n	d0a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
     d12:	cmp	r1, r2
     d14:	ldr	r3, [r4, #116]	; 0x74
     d16:	bne.n	d04 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d18:	movs	r3, #255	; 0xff
     d1a:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     d1c:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     d1e:	tst.w	r3, #2031616	; 0x1f0000
     d22:	beq.n	d1c <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d24:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     d26:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d28:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     d2a:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     d2c:	tst.w	r3, #2031616	; 0x1f0000
     d30:	beq.n	d2a <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d32:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
     d34:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d36:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     d38:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     d3a:	tst.w	r3, #2031616	; 0x1f0000
     d3e:	beq.n	d38 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
     d40:	ldr	r3, [r4, #116]	; 0x74
     d42:	uxtb	r3, r3
     d44:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
     d48:	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
     d4a:	ldr.w	r4, [sp], #4
     d4e:	sub.w	r0, r2, #5
     d52:	clz	r0, r0
     d56:	lsrs	r0, r0, #5
     d58:	bx	lr
     d5a:	nop
     d5c:	.word	0x2000057c

00000d60 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
     d60:	push	{r3, r4, r5, r6, r7, lr}
     d62:	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
     d64:	cbz	r1, d82 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
     d66:	ldrb	r3, [r0, #2]
     d68:	mov	r4, r1
     d6a:	mov	r6, r2
     d6c:	cmp	r3, #3
     d6e:	it	ne
     d70:	lslne	r4, r1, #9
  chipSelectLow();
     d72:	bl	af8 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
     d76:	movs	r1, #24
     d78:	mov	r2, r4
     d7a:	mov	r0, r5
     d7c:	bl	9dc <Sd2Card::cardCommand(unsigned char, unsigned long)>
     d80:	cbz	r0, d8c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
     d82:	mov	r0, r5
     d84:	bl	a84 <Sd2Card::chipSelectHigh()>
  return false;
     d88:	movs	r0, #0
}
     d8a:	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
     d8c:	mov	r2, r6
     d8e:	movs	r1, #254	; 0xfe
     d90:	mov	r0, r5
     d92:	bl	cec <Sd2Card::writeData(unsigned char, unsigned char const*)>
     d96:	cmp	r0, #0
     d98:	beq.n	d82 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
     d9a:	ldr	r1, [pc, #84]	; (df0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     d9c:	movs	r0, #255	; 0xff
     d9e:	ldr	r6, [pc, #84]	; (df4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
     da0:	ldr	r7, [r1, #0]
     da2:	ldr	r2, [r6, #0]
     da4:	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     da6:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     da8:	tst.w	r3, #2031616	; 0x1f0000
     dac:	beq.n	da6 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
     dae:	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
     db0:	uxtb	r4, r4
     db2:	cmp	r4, #255	; 0xff
     db4:	beq.n	dc2 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
     db6:	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
     db8:	subs	r3, r3, r7
     dba:	cmp.w	r3, #600	; 0x258
     dbe:	bcc.n	da4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
     dc0:	b.n	d82 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
     dc2:	movs	r2, #0
     dc4:	movs	r1, #13
     dc6:	mov	r0, r5
     dc8:	bl	9dc <Sd2Card::cardCommand(unsigned char, unsigned long)>
     dcc:	cmp	r0, #0
     dce:	bne.n	d82 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     dd0:	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
     dd2:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
     dd4:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
     dd6:	tst.w	r3, #2031616	; 0x1f0000
     dda:	beq.n	dd4 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
     ddc:	ldr	r3, [r2, #116]	; 0x74
     dde:	tst.w	r3, #255	; 0xff
     de2:	bne.n	d82 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
     de4:	mov	r0, r5
     de6:	bl	a84 <Sd2Card::chipSelectHigh()>
  return true;
     dea:	movs	r0, #1
     dec:	pop	{r3, r4, r5, r6, r7, pc}
     dee:	nop
     df0:	.word	0x20001324
     df4:	.word	0x2000057c

00000df8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     df8:	ldr	r3, [pc, #8]	; (e04 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
     dfa:	movs	r2, #7
     dfc:	ldr	r1, [pc, #8]	; (e08 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
     dfe:	stmia.w	r3, {r1, r2}
     e02:	bx	lr
     e04:	.word	0x200010f0
     e08:	.word	0x003d0900

00000e0c <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
     e0c:	push	{r4, lr}
     e0e:	mov	r4, r0
		end();
     e10:	bl	2778 <IntervalTimer::end()>
	}
     e14:	mov	r0, r4
     e16:	pop	{r4, pc}

00000e18 <Servo::Servo()>:
static uint16_t servo_ticks[MAX_SERVOS];

static IntervalTimer timer;
static void isr(void);

Servo::Servo()
     e18:	push	{r4, r5, r6}
     e1a:	ldr	r6, [pc, #60]	; (e58 <Servo::Servo()+0x40>)
{
	uint16_t mask;

	servoIndex = 0;
     e1c:	movs	r3, #0
     e1e:	movs	r1, #12
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
     e20:	movs	r2, #1
     e22:	ldr	r5, [r6, #0]

Servo::Servo()
{
	uint16_t mask;

	servoIndex = 0;
     e24:	strb	r3, [r0, #4]
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
		if (!(servo_allocated_mask & mask)) {
     e26:	tst	r2, r5
Servo::Servo()
{
	uint16_t mask;

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
     e28:	mov.w	r4, r2, lsl #1
		if (!(servo_allocated_mask & mask)) {
     e2c:	beq.n	e44 <Servo::Servo()+0x2c>
			servo_allocated_mask |= mask;
			servo_active_mask &= ~mask;
			return;
		}
		servoIndex++;
     e2e:	ldrb	r3, [r0, #4]
Servo::Servo()
{
	uint16_t mask;

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
     e30:	subs	r1, #1
     e32:	uxth	r2, r4
		if (!(servo_allocated_mask & mask)) {
			servo_allocated_mask |= mask;
			servo_active_mask &= ~mask;
			return;
		}
		servoIndex++;
     e34:	add.w	r3, r3, #1
     e38:	strb	r3, [r0, #4]
Servo::Servo()
{
	uint16_t mask;

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
     e3a:	bne.n	e26 <Servo::Servo()+0xe>
			servo_active_mask &= ~mask;
			return;
		}
		servoIndex++;
	}
	servoIndex = INVALID_SERVO;
     e3c:	movs	r3, #255	; 0xff
     e3e:	strb	r3, [r0, #4]
}
     e40:	pop	{r4, r5, r6}
     e42:	bx	lr

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
		if (!(servo_allocated_mask & mask)) {
			servo_allocated_mask |= mask;
			servo_active_mask &= ~mask;
     e44:	ldr	r1, [pc, #20]	; (e5c <Servo::Servo()+0x44>)
	uint16_t mask;

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
		if (!(servo_allocated_mask & mask)) {
			servo_allocated_mask |= mask;
     e46:	orrs	r5, r2
			servo_active_mask &= ~mask;
     e48:	ldr	r3, [r1, #0]
	uint16_t mask;

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
		if (!(servo_allocated_mask & mask)) {
			servo_allocated_mask |= mask;
     e4a:	str	r5, [r6, #0]
			servo_active_mask &= ~mask;
     e4c:	bic.w	r2, r3, r2
			return;
		}
		servoIndex++;
	}
	servoIndex = INVALID_SERVO;
}
     e50:	pop	{r4, r5, r6}

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
		if (!(servo_allocated_mask & mask)) {
			servo_allocated_mask |= mask;
			servo_active_mask &= ~mask;
     e52:	str	r2, [r1, #0]
			return;
		}
		servoIndex++;
	}
	servoIndex = INVALID_SERVO;
}
     e54:	bx	lr
     e56:	nop
     e58:	.word	0x20001100
     e5c:	.word	0x200010fc

00000e60 <_GLOBAL__sub_I__ZN5ServoC2Ev>:
static uint32_t servo_active_mask = 0;
static uint32_t servo_allocated_mask = 0;
static uint8_t servo_pin[MAX_SERVOS];
static uint16_t servo_ticks[MAX_SERVOS];

static IntervalTimer timer;
     e60:	ldr	r2, [pc, #8]	; (e6c <_GLOBAL__sub_I__ZN5ServoC2Ev+0xc>)
     e62:	ldr	r1, [pc, #12]	; (e70 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x10>)
     e64:	ldr	r0, [pc, #12]	; (e74 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x14>)
     e66:	b.w	29ec <__aeabi_atexit>
     e6a:	nop
     e6c:	.word	0x2000056c
     e70:	.word	0x00000e0d
     e74:	.word	0x20000574

00000e78 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
     e78:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     e7a:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     e7c:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     e7e:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     e80:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     e82:	beq.n	e8c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
     e84:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     e88:	b.w	28c4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     e8c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
     e8e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     e92:	bx	r3

00000e94 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
     e94:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
     e96:	movw	r5, #513	; 0x201
     e9a:	ldr	r4, [r0, #0]
     e9c:	str	r5, [r4, #16]

	while (count > 0) {
     e9e:	cbz	r3, ee8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
     ea0:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
     ea2:	cbz	r1, ee2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
     ea4:	ldrb	r5, [r1, #0]
     ea6:	adds	r1, #1
		count--; // how many bytes left to output.
     ea8:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
     eaa:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
     eac:	ldr	r5, [r4, #112]	; 0x70
     eae:	lsls	r5, r5, #30
     eb0:	bmi.n	ec0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
     eb2:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
     eb4:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
     eb6:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
     eb8:	cbz	r2, ec0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
     eba:	strb	r5, [r2, #0]
     ebc:	adds	r2, #1
     ebe:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
     ec0:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
     ec2:	lsls	r5, r5, #31
     ec4:	bpl.n	eac <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
     ec6:	cmp	r3, #0
     ec8:	bne.n	ea2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
     eca:	cbz	r6, ee8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
     ecc:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
     ece:	ldr	r3, [r1, #112]	; 0x70
     ed0:	lsls	r3, r3, #30
     ed2:	bmi.n	ece <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
     ed4:	ldr	r3, [r1, #116]	; 0x74
     ed6:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
     ed8:	cbz	r2, ede <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
     eda:	strb	r3, [r2, #0]
     edc:	adds	r2, #1
			count_read--;
     ede:	subs	r6, #1
     ee0:	b.n	eca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
     ee2:	ldrb.w	r5, [r0, #60]	; 0x3c
     ee6:	b.n	ea8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
     ee8:	pop	{r4, r5, r6}
     eea:	bx	lr

00000eec <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     eec:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
     eee:	ldr	r4, [pc, #192]	; (fb0 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     ef0:	ldr	r3, [pc, #192]	; (fb4 <_spi_dma_rxISR0()+0xc8>)
     ef2:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
     ef4:	ldr	r5, [r4, #68]	; 0x44
     ef6:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
     ef8:	ldr	r2, [r4, #64]	; 0x40
     efa:	strb	r1, [r3, #31]
     efc:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
     efe:	strb	r1, [r3, #28]
     f00:	ldrb	r1, [r0, #4]
     f02:	strb	r1, [r3, #28]
     f04:	cbz	r2, f46 <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
     f06:	cmp.w	r2, #32768	; 0x8000
     f0a:	bcs.n	f3e <_spi_dma_rxISR0()+0x52>
     f0c:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
     f0e:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     f10:	ldrh	r1, [r3, #30]
     f12:	lsls	r6, r1, #16
     f14:	bmi.n	f8e <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
     f16:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
     f18:	ldrh	r1, [r3, #30]
     f1a:	uxth	r1, r1
     f1c:	strh	r1, [r3, #22]
     f1e:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     f20:	ldrh	r1, [r3, #30]
     f22:	lsls	r1, r1, #16
     f24:	bmi.n	f80 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
     f26:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
     f28:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
     f2a:	ldrh	r2, [r3, #30]
     f2c:	uxth	r2, r2
     f2e:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
     f30:	str	r1, [r4, #64]	; 0x40
     f32:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     f34:	ldr	r3, [pc, #124]	; (fb4 <_spi_dma_rxISR0()+0xc8>)
     f36:	strb	r2, [r3, #27]
     f38:	ldrb	r2, [r5, #4]
     f3a:	strb	r2, [r3, #27]
     f3c:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
     f3e:	ldr	r3, [pc, #120]	; (fb8 <_spi_dma_rxISR0()+0xcc>)
     f40:	add	r3, r2
     f42:	str	r3, [r4, #64]	; 0x40
     f44:	b.n	f32 <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
     f46:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
     f48:	movs	r5, #15
     f4a:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
     f4c:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
     f50:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
     f52:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
     f56:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
     f58:	movs	r6, #3
		_dma_event_responder->triggerEvent();
     f5a:	ldr	r5, [r1, #0]
     f5c:	ldr	r1, [pc, #92]	; (fbc <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
     f5e:	str	r2, [r3, #28]
     f60:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
     f62:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
     f66:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
     f68:	strb.w	r6, [r4, #61]	; 0x3d
     f6c:	bne.n	f9e <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
     f6e:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
     f70:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
     f72:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
     f74:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
     f76:	beq.n	fa8 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     f78:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
     f7c:	b.w	28c4 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
     f80:	ldrh	r1, [r3, #30]
     f82:	ubfx	r2, r2, #0, #9
     f86:	and.w	r1, r1, #65024	; 0xfe00
     f8a:	orrs	r2, r1
     f8c:	b.n	f26 <_spi_dma_rxISR0()+0x3a>
     f8e:	ldrh	r1, [r3, #30]
     f90:	ubfx	r6, r2, #0, #9
     f94:	and.w	r1, r1, #65024	; 0xfe00
     f98:	orrs	r1, r6
     f9a:	strh	r1, [r3, #30]
     f9c:	b.n	f18 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
     f9e:	mov	r3, r5
     fa0:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     fa2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
     fa6:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
     fa8:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
     faa:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     fae:	bx	r3
     fb0:	.word	0x2000057c
     fb4:	.word	0x400e8000
     fb8:	.word	0xffff8001
     fbc:	.word	0x00000e79

00000fc0 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
     fc0:	cbz	r3, fc6 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
     fc2:	b.w	e94 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
     fc6:	bx	lr

00000fc8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
     fc8:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
     fca:	orr.w	r3, r1, r0
	ands	r3, r3, #3
     fce:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
     fd2:	bne.n	10b0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
     fd4:	subs	r2, #64	; 0x40
	blo	.Lmid_block
     fd6:	bcc.n	105c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     fd8:	ldr.w	r3, [r1], #4
     fdc:	str.w	r3, [r0], #4
     fe0:	ldr.w	r3, [r1], #4
     fe4:	str.w	r3, [r0], #4
     fe8:	ldr.w	r3, [r1], #4
     fec:	str.w	r3, [r0], #4
     ff0:	ldr.w	r3, [r1], #4
     ff4:	str.w	r3, [r0], #4
     ff8:	ldr.w	r3, [r1], #4
     ffc:	str.w	r3, [r0], #4
    1000:	ldr.w	r3, [r1], #4
    1004:	str.w	r3, [r0], #4
    1008:	ldr.w	r3, [r1], #4
    100c:	str.w	r3, [r0], #4
    1010:	ldr.w	r3, [r1], #4
    1014:	str.w	r3, [r0], #4
    1018:	ldr.w	r3, [r1], #4
    101c:	str.w	r3, [r0], #4
    1020:	ldr.w	r3, [r1], #4
    1024:	str.w	r3, [r0], #4
    1028:	ldr.w	r3, [r1], #4
    102c:	str.w	r3, [r0], #4
    1030:	ldr.w	r3, [r1], #4
    1034:	str.w	r3, [r0], #4
    1038:	ldr.w	r3, [r1], #4
    103c:	str.w	r3, [r0], #4
    1040:	ldr.w	r3, [r1], #4
    1044:	str.w	r3, [r0], #4
    1048:	ldr.w	r3, [r1], #4
    104c:	str.w	r3, [r0], #4
    1050:	ldr.w	r3, [r1], #4
    1054:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1058:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    105a:	bcs.n	fd8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    105c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    105e:	bcc.n	1084 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1060:	ldr.w	r3, [r1], #4
    1064:	str.w	r3, [r0], #4
    1068:	ldr.w	r3, [r1], #4
    106c:	str.w	r3, [r0], #4
    1070:	ldr.w	r3, [r1], #4
    1074:	str.w	r3, [r0], #4
    1078:	ldr.w	r3, [r1], #4
    107c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1080:	subs	r2, #16
	bhs	.Lmid_block_loop
    1082:	bcs.n	1060 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1084:	adds	r2, #12
	blo	.Lcopy_less_than_4
    1086:	bcc.n	1094 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1088:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    108c:	str.w	r3, [r0], #4
	subs	r2, #4
    1090:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1092:	bcs.n	1088 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1094:	adds	r2, #4
	beq	.Ldone
    1096:	beq.n	10aa <memcpy+0xe2>

	lsls	r2, r2, #31
    1098:	lsls	r2, r2, #31
	itt ne
    109a:	itt	ne
	ldrbne  r3, [r1], #1
    109c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    10a0:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    10a4:	bcc.n	10aa <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    10a6:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    10a8:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    10aa:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    10ac:	bx	lr
    10ae:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    10b0:	cmp	r2, #8
	blo	.Lbyte_copy
    10b2:	bcc.n	10dc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    10b4:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    10b6:	beq.n	fd4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    10b8:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    10bc:	beq.n	fd4 <memcpy+0xc>

	rsb	r3, #4
    10be:	rsb	r3, r3, #4
	subs	r2, r3
    10c2:	subs	r2, r2, r3

	lsls    r3, r3, #31
    10c4:	lsls	r3, r3, #31
	itt ne
    10c6:	itt	ne
	ldrbne  r3, [r1], #1
    10c8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    10cc:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    10d0:	bcc.n	fd4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    10d2:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    10d6:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    10da:	b.n	fd4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    10dc:	subs	r2, #4
	blo	.Lcopy_less_than_4
    10de:	bcc.n	1094 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    10e0:	subs	r2, #1
	ldrb    r3, [r1], #1
    10e2:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    10e6:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    10ea:	bcs.n	10e0 <memcpy+0x118>

	ldrb	r3, [r1]
    10ec:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    10ee:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    10f0:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    10f2:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    10f4:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    10f6:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    10f8:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    10fa:	bx	lr

000010fc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    10fc:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    10fe:	ldr	r1, [pc, #80]	; (1150 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1100:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1104:	ldr	r5, [pc, #76]	; (1154 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1106:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1108:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    110c:	ldr	r6, [pc, #72]	; (1158 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    110e:	ldr	r2, [pc, #76]	; (115c <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1110:	add.w	r5, r5, r0, lsl #5
    1114:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1116:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1118:	mov	r0, r5
    111a:	ldrh	r2, [r6, #0]
    111c:	bl	1f10 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1120:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1122:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1126:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    1128:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    112c:	ldr	r2, [pc, #48]	; (1160 <rx_queue_transfer+0x64>)
    112e:	str	r3, [r2, #0]
		location += 32;
    1130:	adds	r3, #32
	} while (location < end_addr);
    1132:	cmp	r1, r3
    1134:	bhi.n	112e <rx_queue_transfer+0x32>
	asm("dsb");
    1136:	dsb	sy
	asm("isb");
    113a:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    113e:	movs	r0, #3
    1140:	mov	r1, r5
    1142:	bl	1f68 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1146:	ldr	r3, [pc, #28]	; (1164 <rx_queue_transfer+0x68>)
    1148:	mov.w	r2, #131072	; 0x20000
    114c:	str	r2, [r3, #0]
    114e:	pop	{r3, r4, r5, r6, r7, pc}
    1150:	.word	0x20200000
    1154:	.word	0x20001120
    1158:	.word	0x2000122e
    115c:	.word	0xe000e18c
    1160:	.word	0xe000ef5c
    1164:	.word	0xe000e10c

00001168 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1168:	ldr	r2, [pc, #144]	; (11fc <rx_event+0x94>)
    116a:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    116c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1170:	ubfx	r3, r3, #16, #15
    1174:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    1176:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1178:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    117a:	cmp	r4, #0
    117c:	ble.n	11f0 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    117e:	ldr	r1, [pc, #128]	; (1200 <rx_event+0x98>)
		if (head != rx_tail) {
    1180:	ldr	r2, [pc, #128]	; (1204 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1182:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    1184:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1186:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    1188:	ldr	r0, [pc, #124]	; (1208 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    118a:	ldr	r6, [pc, #128]	; (120c <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    118c:	cmp	r3, r2
    118e:	beq.n	11a0 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    1190:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1194:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    1198:	rsb	r2, r7, #512	; 0x200
    119c:	cmp	r4, r2
    119e:	bls.n	11c6 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    11a0:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    11a2:	movs	r2, #0
    11a4:	ldr	r7, [pc, #104]	; (1210 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    11a6:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    11a8:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    11ac:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    11b0:	ldr	r6, [pc, #96]	; (1214 <rx_event+0xac>)
    11b2:	ite	ls
    11b4:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    11b6:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    11b8:	strb	r2, [r1, #0]
		rx_available += len;
    11ba:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    11bc:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    11be:	add	r4, r2
    11c0:	str	r4, [r6, #0]
    11c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    11c6:	ldr	r3, [pc, #80]	; (1218 <rx_event+0xb0>)
    11c8:	add.w	r0, r7, r8, lsl #9
    11cc:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    11ce:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    11d0:	add.w	r1, r3, r5, lsl #9
    11d4:	add	r0, r3
    11d6:	bl	fc8 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    11da:	ldr	r2, [pc, #56]	; (1214 <rx_event+0xac>)
				rx_queue_transfer(i);
    11dc:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    11de:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    11e2:	ldr	r3, [r2, #0]
    11e4:	add	r4, r3
    11e6:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    11e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    11ec:	b.w	10fc <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    11f0:	mov	r0, r5
	}
}
    11f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    11f6:	b.w	10fc <rx_queue_transfer>
    11fa:	nop
    11fc:	.word	0x2000122e
    1200:	.word	0x20001244
    1204:	.word	0x20001220
    1208:	.word	0x20001224
    120c:	.word	0x20001230
    1210:	.word	0x20001104
    1214:	.word	0x20001240
    1218:	.word	0x20200000

0000121c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    121c:	ldr	r3, [pc, #120]	; (1298 <usb_serial_flush_callback+0x7c>)
    121e:	ldrb	r2, [r3, #0]
    1220:	cbnz	r2, 123a <usb_serial_flush_callback+0x1e>
    1222:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    1226:	ldr	r2, [pc, #116]	; (129c <usb_serial_flush_callback+0x80>)
    1228:	ldrb	r2, [r2, #0]
    122a:	cbz	r2, 123a <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    122c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    1230:	ldr	r5, [pc, #108]	; (12a0 <usb_serial_flush_callback+0x84>)
    1232:	ldrh	r2, [r5, #0]
    1234:	cbnz	r2, 123c <usb_serial_flush_callback+0x20>
    1236:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    123a:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    123c:	ldr	r6, [pc, #100]	; (12a4 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    123e:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1242:	ldr	r7, [pc, #100]	; (12a8 <usb_serial_flush_callback+0x8c>)
    1244:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1246:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1248:	ldr	r4, [pc, #96]	; (12ac <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    124a:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    124e:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1252:	mov	r0, r7
    1254:	mov	r1, r4
    1256:	bl	1f10 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    125a:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    125e:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1262:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1266:	ldr	r3, [pc, #72]	; (12b0 <usb_serial_flush_callback+0x94>)
    1268:	str	r1, [r3, #0]
		location += 32;
    126a:	adds	r1, #32
	} while (location < end_addr);
    126c:	cmp	r2, r1
    126e:	bhi.n	1268 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    1270:	dsb	sy
	asm("isb");
    1274:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1278:	movs	r0, #4
    127a:	mov	r1, r7
    127c:	bl	1f40 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1280:	ldrb	r3, [r6, #0]
    1282:	ldr	r2, [pc, #32]	; (12a4 <usb_serial_flush_callback+0x88>)
    1284:	adds	r3, #1
    1286:	uxtb	r3, r3
    1288:	cmp	r3, #3
    128a:	it	hi
    128c:	movhi	r3, #0
    128e:	strb	r3, [r2, #0]
	tx_available = 0;
    1290:	movs	r3, #0
    1292:	strh	r3, [r5, #0]
    1294:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1298:	.word	0x20001116
    129c:	.word	0x20001318
    12a0:	.word	0x20001246
    12a4:	.word	0x20001117
    12a8:	.word	0x20001260
    12ac:	.word	0x20201000
    12b0:	.word	0xe000ef70

000012b4 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    12b4:	bx	lr
    12b6:	nop

000012b8 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    12b8:	ldr	r3, [pc, #196]	; (1380 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    12ba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    12be:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    12c0:	ldr	r7, [pc, #192]	; (1384 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    12c2:	cmp	r3, #0
    12c4:	beq.n	1370 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    12c6:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    12ca:	ldr.w	r8, [pc, #236]	; 13b8 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    12ce:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    12d0:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    12d4:	movs	r1, #0
    12d6:	movs	r2, #128	; 0x80
    12d8:	ldr	r0, [pc, #172]	; (1388 <usb_serial_configure+0xd0>)
	tx_head = 0;
    12da:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    12dc:	ldr	r6, [pc, #172]	; (138c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    12de:	bl	2fe0 <memset>
	tx_head = 0;
    12e2:	ldr	r4, [pc, #172]	; (1390 <usb_serial_configure+0xd8>)
	tx_available = 0;
    12e4:	ldr	r3, [pc, #172]	; (1394 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    12e6:	mov	r1, r5
    12e8:	mov.w	r2, #256	; 0x100
    12ec:	ldr	r0, [pc, #168]	; (1398 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    12ee:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    12f0:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    12f2:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    12f4:	bl	2fe0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    12f8:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    12fa:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    12fc:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    12fe:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1300:	str	r5, [r6, #8]
    1302:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1304:	ldr	r1, [pc, #148]	; (139c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1306:	ldr	r6, [pc, #152]	; (13a0 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    1308:	ldr	r0, [pc, #152]	; (13a4 <usb_serial_configure+0xec>)
	rx_available = 0;
    130a:	ldr.w	lr, [pc, #176]	; 13bc <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    130e:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1310:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    1312:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1314:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1316:	str	r5, [r6, #0]
    1318:	str	r5, [r6, #4]
    131a:	str	r5, [r6, #8]
    131c:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    131e:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1322:	bl	1ea8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1326:	ldrh.w	r1, [r8]
    132a:	mov	r2, r5
    132c:	ldr	r3, [pc, #120]	; (13a8 <usb_serial_configure+0xf0>)
    132e:	movs	r0, #3
    1330:	bl	1e44 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1334:	mov	r3, r5
    1336:	ldrh	r1, [r7, #0]
    1338:	movs	r2, #1
    133a:	movs	r0, #4
    133c:	bl	1ea8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1340:	mov	r0, r4
    1342:	adds	r4, #1
    1344:	bl	10fc <rx_queue_transfer>
    1348:	cmp	r4, #8
    134a:	bne.n	1340 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    134c:	ldr	r3, [pc, #92]	; (13ac <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    134e:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1350:	ldr	r0, [pc, #92]	; (13b0 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    1352:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1354:	ldr	r4, [pc, #92]	; (13b4 <usb_serial_configure+0xfc>)
    1356:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1358:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    135c:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1360:	ldr.w	r2, [r3, #328]	; 0x148
    1364:	orr.w	r2, r2, #16777216	; 0x1000000
    1368:	str.w	r2, [r3, #328]	; 0x148
    136c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1370:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    1372:	ldr.w	r8, [pc, #68]	; 13b8 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1376:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    1378:	strh.w	r3, [r8]
    137c:	b.n	12d4 <usb_serial_configure+0x1c>
    137e:	nop
    1380:	.word	0x200012f0
    1384:	.word	0x20001114
    1388:	.word	0x20001260
    138c:	.word	0x20001230
    1390:	.word	0x20001117
    1394:	.word	0x20001246
    1398:	.word	0x20001120
    139c:	.word	0x20001244
    13a0:	.word	0x20001104
    13a4:	.word	0x20001220
    13a8:	.word	0x00001169
    13ac:	.word	0x402e0000
    13b0:	.word	0x200012e0
    13b4:	.word	0x0000121d
    13b8:	.word	0x2000122e
    13bc:	.word	0x20001240

000013c0 <usb_serial_available>:
}

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    13c0:	ldr	r3, [pc, #4]	; (13c8 <usb_serial_available+0x8>)
    13c2:	ldr	r0, [r3, #0]
}
    13c4:	bx	lr
    13c6:	nop
    13c8:	.word	0x20001240

000013cc <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    13cc:	ldr	r2, [pc, #600]	; (1628 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    13ce:	ldr	r3, [pc, #604]	; (162c <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    13d0:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    13d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    13d6:	ldr	r4, [pc, #600]	; (1630 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    13d8:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    13dc:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    13de:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    13e0:	bls.n	141c <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    13e2:	ldr	r3, [pc, #592]	; (1634 <set_arm_clock+0x268>)
    13e4:	cmp	r0, r3
    13e6:	bls.w	1614 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    13ea:	ldr	r3, [pc, #588]	; (1638 <set_arm_clock+0x26c>)
    13ec:	movw	r5, #1575	; 0x627
    13f0:	ldr	r7, [pc, #584]	; (163c <set_arm_clock+0x270>)
    13f2:	add	r3, r0
    13f4:	ldr	r4, [pc, #584]	; (1640 <set_arm_clock+0x274>)
    13f6:	lsrs	r2, r3, #8
    13f8:	umull	r3, r2, r7, r2
    13fc:	lsrs	r3, r2, #7
    13fe:	add.w	r3, r3, r3, lsl #2
    1402:	add.w	r2, r3, r3, lsl #2
    1406:	addw	r3, r2, #1250	; 0x4e2
    140a:	cmp	r3, r5
    140c:	it	cs
    140e:	movcs	r3, r5
    1410:	sub.w	r3, r3, #800	; 0x320
    1414:	umull	r3, r5, r4, r3
    1418:	lsrs	r5, r5, #3
    141a:	b.n	1426 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    141c:	ldr	r5, [pc, #548]	; (1644 <set_arm_clock+0x278>)
    141e:	cmp	r0, r5
    1420:	ite	ls
    1422:	movls	r5, #6
    1424:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1426:	ldr	r2, [pc, #516]	; (162c <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1428:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    142c:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    1430:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    1432:	orr.w	r3, r3, #192	; 0xc0
    1436:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    143a:	bcs.n	1452 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    143c:	ldr	r3, [pc, #496]	; (1630 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    143e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1442:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    1444:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    1446:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    1448:	ldr	r3, [r2, #0]
    144a:	cmp	r3, #0
    144c:	bge.n	1448 <set_arm_clock+0x7c>
    144e:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    1452:	ands.w	r3, lr, #33554432	; 0x2000000
    1456:	bne.n	14bc <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    1458:	ldr	r4, [pc, #492]	; (1648 <set_arm_clock+0x27c>)
    145a:	ldr	r2, [pc, #496]	; (164c <set_arm_clock+0x280>)
    145c:	ldr.w	ip, [r4, #16]
    1460:	mov	r4, r2
    1462:	and.w	r2, ip, r2
    1466:	cmp	r2, r4
    1468:	itet	eq
    146a:	moveq.w	r3, #402653184	; 0x18000000
    146e:	movne.w	r2, #4096	; 0x1000
    1472:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    1474:	eor.w	r4, lr, r3
    1478:	tst.w	r4, #939524096	; 0x38000000
    147c:	beq.n	1490 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    147e:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1482:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    1486:	ldr	r4, [pc, #420]	; (162c <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    1488:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    148c:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    1490:	eor.w	r3, r1, r2
    1494:	tst.w	r3, #12288	; 0x3000
    1498:	beq.n	14ac <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    149a:	ldr	r3, [pc, #400]	; (162c <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    149c:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    14a0:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    14a2:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    14a4:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    14a6:	ldr	r3, [r2, #72]	; 0x48
    14a8:	lsls	r4, r3, #28
    14aa:	bmi.n	14a6 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    14ac:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    14b0:	ldr	r2, [pc, #376]	; (162c <set_arm_clock+0x260>)
    14b2:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    14b6:	ldr	r3, [r2, #72]	; 0x48
    14b8:	lsls	r1, r3, #26
    14ba:	bmi.n	14b6 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    14bc:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    14be:	ldr	r4, [pc, #400]	; (1650 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    14c0:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    14c2:	mul.w	r3, r1, r2
    14c6:	mul.w	r3, r0, r3
    14ca:	cmp	r3, r4
    14cc:	bhi.n	14e2 <set_arm_clock+0x116>
		if (div_arm < 8) {
    14ce:	cmp	r2, #7
    14d0:	bhi.w	15fe <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    14d4:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    14d6:	mul.w	r3, r1, r2
    14da:	mul.w	r3, r0, r3
    14de:	cmp	r3, r4
    14e0:	bls.n	14ce <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    14e2:	ldr	r0, [pc, #368]	; (1654 <set_arm_clock+0x288>)
    14e4:	ldr	r4, [pc, #368]	; (1658 <set_arm_clock+0x28c>)
    14e6:	add	r0, r3
    14e8:	umull	r0, r3, r4, r0
    14ec:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    14ee:	cmp	r3, #108	; 0x6c
    14f0:	bhi.w	160a <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    14f4:	cmp	r3, #53	; 0x35
    14f6:	bhi.w	1618 <set_arm_clock+0x24c>
    14fa:	ldr.w	r8, [pc, #392]	; 1684 <set_arm_clock+0x2b8>
    14fe:	movs	r3, #54	; 0x36
    1500:	ldr	r0, [pc, #344]	; (165c <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1502:	ldr.w	ip, [pc, #324]	; 1648 <set_arm_clock+0x27c>
    1506:	ldr	r4, [pc, #344]	; (1660 <set_arm_clock+0x294>)
    1508:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    150c:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    1510:	and.w	r4, r9, r4
    1514:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    1516:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    151a:	beq.n	1534 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    151c:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1520:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    1524:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    1526:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    152a:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    152e:	ldr	r3, [r4, #0]
    1530:	cmp	r3, #0
    1532:	bge.n	152e <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    1534:	ldr.w	ip, [pc, #244]	; 162c <set_arm_clock+0x260>
    1538:	subs	r2, #1
    153a:	ldr.w	r3, [ip, #16]
    153e:	and.w	r3, r3, #7
    1542:	cmp	r3, r2
    1544:	beq.n	1556 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    1546:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    154a:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    154c:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    1550:	ldr	r3, [r4, #72]	; 0x48
    1552:	lsls	r3, r3, #15
    1554:	bmi.n	1550 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    1556:	subs	r1, #1
    1558:	lsls	r1, r1, #10
    155a:	eor.w	r3, lr, r1
    155e:	tst.w	r3, #7168	; 0x1c00
    1562:	beq.n	157e <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    1564:	ldr	r3, [pc, #196]	; (162c <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    1566:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    156a:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    156e:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    1570:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    1574:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    1578:	ldr	r3, [r2, #72]	; 0x48
    157a:	lsls	r1, r3, #30
    157c:	bmi.n	1578 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    157e:	ldr	r3, [pc, #228]	; (1664 <set_arm_clock+0x298>)
    1580:	ldr	r1, [pc, #228]	; (1668 <set_arm_clock+0x29c>)
    1582:	add	r3, r0
    1584:	lsrs	r3, r3, #7
    1586:	umull	r3, r1, r1, r3
    158a:	lsrs	r1, r1, #12
    158c:	cmp	r1, #4
    158e:	it	cs
    1590:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    1592:	subs	r3, r1, #1
    1594:	lsls	r3, r3, #8
    1596:	eor.w	r2, lr, r3
    159a:	tst.w	r2, #768	; 0x300
    159e:	beq.n	15b0 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    15a0:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    15a4:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    15a8:	ldr	r2, [pc, #128]	; (162c <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    15aa:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    15ae:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    15b0:	ldr	r3, [pc, #120]	; (162c <set_arm_clock+0x260>)
    15b2:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    15b4:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    15b6:	bic.w	r4, r4, #33554432	; 0x2000000
    15ba:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    15bc:	ldr	r3, [r2, #72]	; 0x48
    15be:	lsls	r3, r3, #26
    15c0:	bmi.n	15bc <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    15c2:	ldr	r3, [pc, #168]	; (166c <set_arm_clock+0x2a0>)
    15c4:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    15c8:	ldr	r4, [pc, #164]	; (1670 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    15ca:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    15cc:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    15d0:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    15d2:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    15d6:	ldr	r4, [pc, #156]	; (1674 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    15d8:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    15dc:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    15e0:	ldr	r2, [pc, #148]	; (1678 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    15e2:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    15e4:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    15e6:	bcs.n	15fa <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    15e8:	ldr	r3, [pc, #68]	; (1630 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    15ea:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    15ee:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    15f0:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    15f2:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    15f4:	ldr	r3, [r2, #0]
    15f6:	cmp	r3, #0
    15f8:	bge.n	15f4 <set_arm_clock+0x228>
	}

	return frequency;
}
    15fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    15fe:	cmp	r1, #4
    1600:	bhi.w	14e2 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    1604:	adds	r1, #1
				div_arm = 1;
    1606:	movs	r2, #1
    1608:	b.n	14c2 <set_arm_clock+0xf6>
    160a:	ldr.w	r8, [pc, #124]	; 1688 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    160e:	movs	r3, #108	; 0x6c
    1610:	ldr	r0, [pc, #104]	; (167c <set_arm_clock+0x2b0>)
    1612:	b.n	1502 <set_arm_clock+0x136>
    1614:	movs	r5, #18
    1616:	b.n	1426 <set_arm_clock+0x5a>
    1618:	ldr	r0, [pc, #100]	; (1680 <set_arm_clock+0x2b4>)
    161a:	ldr.w	r8, [pc, #112]	; 168c <set_arm_clock+0x2c0>
    161e:	mul.w	r0, r0, r3
    1622:	orr.w	r8, r3, r8
    1626:	b.n	1502 <set_arm_clock+0x136>
    1628:	.word	0x1f78a400
    162c:	.word	0x400fc000
    1630:	.word	0x40080000
    1634:	.word	0x23c34600
    1638:	.word	0xdc3cba00
    163c:	.word	0x004cb223
    1640:	.word	0x51eb851f
    1644:	.word	0x016e3600
    1648:	.word	0x400d8000
    164c:	.word	0x80003040
    1650:	.word	0x269fb1ff
    1654:	.word	0x005b8d80
    1658:	.word	0x165e9f81
    165c:	.word	0x269fb200
    1660:	.word	0x8001307f
    1664:	.word	0x08f0d17f
    1668:	.word	0x00e5109f
    166c:	.word	0x431bde83
    1670:	.word	0x200005d0
    1674:	.word	0x200005cc
    1678:	.word	0x20001320
    167c:	.word	0x4d3f6400
    1680:	.word	0x00b71b00
    1684:	.word	0x80002036
    1688:	.word	0x8000206c
    168c:	.word	0x80002000

00001690 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1690:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    1692:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    1694:	cbz	r3, 169e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    1696:	ldr	r3, [r2, #4]
    1698:	orr.w	r3, r3, #32768	; 0x8000
    169c:	str	r3, [r2, #4]
	}
	__disable_irq();
    169e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    16a0:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    16a2:	cbz	r4, 16dc <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    16a4:	ldr	r3, [pc, #80]	; (16f8 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    16a6:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    16a8:	ldr.w	r4, [r3, #432]	; 0x1b0
    16ac:	tst	r4, r1
    16ae:	bne.n	16f0 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    16b0:	ldr	r5, [pc, #72]	; (16fc <schedule_transfer+0x6c>)
    16b2:	ldr	r7, [r5, #0]
    16b4:	b.n	16c0 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    16b6:	ldr	r4, [r5, #0]
    16b8:	subs	r4, r4, r7
    16ba:	cmp.w	r4, #2400	; 0x960
    16be:	bcs.n	16d8 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    16c0:	ldr.w	r4, [r3, #320]	; 0x140
    16c4:	orr.w	r4, r4, #16384	; 0x4000
    16c8:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    16cc:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    16d0:	ldr.w	r4, [r3, #320]	; 0x140
    16d4:	lsls	r4, r4, #17
    16d6:	bpl.n	16b6 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    16d8:	tst	r1, r6
    16da:	bne.n	16f0 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    16dc:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    16de:	ldr	r4, [pc, #24]	; (16f8 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    16e0:	str	r2, [r0, #8]
	endpoint->status = 0;
    16e2:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    16e4:	ldr.w	r3, [r4, #432]	; 0x1b0
    16e8:	orrs	r1, r3
    16ea:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    16ee:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    16f0:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    16f2:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    16f4:	pop	{r4, r5, r6, r7}
    16f6:	bx	lr
    16f8:	.word	0x402e0000
    16fc:	.word	0xe0001004

00001700 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1700:	push	{r4, r5, r6, lr}
    1702:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    1704:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    1706:	cbz	r0, 172e <run_callbacks+0x2e>
    1708:	mov	r2, r0
    170a:	movs	r4, #0
    170c:	b.n	1716 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    170e:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    1710:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    1712:	cmp	r2, #1
    1714:	beq.n	1730 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    1716:	ldr	r3, [r2, #4]
    1718:	ands.w	r3, r3, #128	; 0x80
    171c:	beq.n	170e <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    171e:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1720:	cbz	r4, 172e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    1722:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    1724:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    1726:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1728:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    172a:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    172c:	bne.n	1722 <run_callbacks+0x22>
    172e:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    1730:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    1732:	str	r3, [r6, #52]	; 0x34
			break;
    1734:	b.n	1720 <run_callbacks+0x20>
    1736:	nop

00001738 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    1738:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    173a:	cbnz	r1, 1776 <endpoint0_transmit.constprop.1+0x3e>
    173c:	ldr	r4, [pc, #132]	; (17c4 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    173e:	ldr	r1, [pc, #136]	; (17c8 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1740:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1742:	ldr	r3, [pc, #136]	; (17cc <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1744:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1746:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    174a:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    174c:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    174e:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    1750:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1752:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    1754:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1756:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    175a:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    175e:	ldr	r5, [pc, #112]	; (17d0 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1760:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1764:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    1766:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    176a:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    176c:	ldr.w	r3, [r2, #432]	; 0x1b0
    1770:	cmp	r3, #0
    1772:	bne.n	176c <endpoint0_transmit.constprop.1+0x34>
}
    1774:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1776:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1778:	ldr	r3, [pc, #88]	; (17d4 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    177a:	ldr	r5, [pc, #80]	; (17cc <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    177c:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    177e:	ldr	r4, [pc, #68]	; (17c4 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1780:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    1784:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1786:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1788:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    178a:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    178e:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1790:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    1794:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1796:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    179a:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    179e:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    17a2:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    17a4:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    17a6:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    17aa:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    17ae:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    17b2:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    17b4:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    17b6:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    17ba:	ldr.w	r3, [r2, #432]	; 0x1b0
    17be:	cmp	r3, #0
    17c0:	bne.n	17ba <endpoint0_transmit.constprop.1+0x82>
    17c2:	b.n	173e <endpoint0_transmit.constprop.1+0x6>
    17c4:	.word	0x20003000
    17c8:	.word	0x20002020
    17cc:	.word	0x402e0000
    17d0:	.word	0x200012f4
    17d4:	.word	0x20002000

000017d8 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    17d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    17dc:	ldr	r4, [pc, #688]	; (1a90 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    17de:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    17e0:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    17e4:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    17e8:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    17ec:	beq.n	18ac <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    17ee:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    17f2:	cmp	r3, #0
    17f4:	beq.n	18a2 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    17f6:	mov.w	fp, #65537	; 0x10001
    17fa:	ldr.w	r9, [pc, #700]	; 1ab8 <isr+0x2e0>
    17fe:	ldr	r6, [pc, #660]	; (1a94 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    1800:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    1802:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    1804:	str.w	r3, [r4, #428]	; 0x1ac
    1808:	ldr	r0, [r6, #40]	; 0x28
    180a:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    180c:	ldr.w	r3, [r4, #320]	; 0x140
    1810:	orr.w	r3, r3, #8192	; 0x2000
    1814:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    1818:	ldr.w	r3, [r4, #320]	; 0x140
    181c:	lsls	r7, r3, #18
    181e:	bpl.n	180c <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    1820:	ldr.w	r3, [r5, #320]	; 0x140
    1824:	bic.w	r3, r3, #8192	; 0x2000
    1828:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    182c:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    1830:	ldr.w	r3, [r4, #436]	; 0x1b4
    1834:	ands.w	r3, r3, #65537	; 0x10001
    1838:	bne.n	1830 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    183a:	uxth	r1, r0
    183c:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    1840:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1844:	cmp	r1, r7
    1846:	bhi.w	19b2 <isr+0x1da>
    184a:	cmp.w	r1, #1664	; 0x680
    184e:	bcs.w	1c24 <isr+0x44c>
    1852:	cmp.w	r1, #258	; 0x102
    1856:	beq.w	1b30 <isr+0x358>
    185a:	bhi.w	1a3e <isr+0x266>
    185e:	cmp	r1, #128	; 0x80
    1860:	beq.w	1b16 <isr+0x33e>
    1864:	cmp	r1, #130	; 0x82
    1866:	bne.w	1a2e <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    186a:	uxth	r2, r2
    186c:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1870:	cmp	r1, #7
    1872:	bhi.w	1a2e <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1876:	lsls	r1, r1, #2
    1878:	ldr	r0, [pc, #540]	; (1a98 <isr+0x2c0>)
		reply_buffer[0] = 0;
    187a:	ldr	r7, [pc, #544]	; (1a9c <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    187c:	add	r0, r1
    187e:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1880:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    1882:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1884:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1886:	bpl.w	1ca2 <isr+0x4ca>
    188a:	lsls	r2, r1, #15
    188c:	bpl.n	1892 <isr+0xba>
			reply_buffer[0] = 1;
    188e:	movs	r3, #1
    1890:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    1892:	movs	r1, #2
    1894:	ldr	r0, [pc, #516]	; (1a9c <isr+0x2c4>)
    1896:	bl	1738 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    189a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    189e:	cmp	r3, #0
    18a0:	bne.n	1804 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    18a2:	ldr	r2, [pc, #492]	; (1a90 <isr+0x2b8>)
    18a4:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    18a8:	cmp	r3, #0
    18aa:	bne.n	194e <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    18ac:	tst.w	r8, #64	; 0x40
    18b0:	beq.n	18e4 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    18b2:	ldr	r3, [pc, #476]	; (1a90 <isr+0x2b8>)
    18b4:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    18b8:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    18ba:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    18be:	ldr.w	r1, [r3, #444]	; 0x1bc
    18c2:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    18c6:	ldr.w	r4, [r2, #432]	; 0x1b0
    18ca:	ldr	r3, [pc, #452]	; (1a90 <isr+0x2b8>)
    18cc:	cmp	r4, #0
    18ce:	bne.n	18c6 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    18d0:	mov.w	r2, #4294967295
    18d4:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    18d8:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    18dc:	bl	12b4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    18e0:	ldr	r3, [pc, #444]	; (1aa0 <isr+0x2c8>)
    18e2:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    18e4:	tst.w	r8, #16777216	; 0x1000000
    18e8:	beq.n	18f2 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    18ea:	ldr	r3, [pc, #440]	; (1aa4 <isr+0x2cc>)
    18ec:	ldr	r3, [r3, #0]
    18ee:	cbz	r3, 18f2 <isr+0x11a>
    18f0:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    18f2:	tst.w	r8, #33554432	; 0x2000000
    18f6:	beq.n	1900 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    18f8:	ldr	r3, [pc, #428]	; (1aa8 <isr+0x2d0>)
    18fa:	ldr	r3, [r3, #0]
    18fc:	cbz	r3, 1900 <isr+0x128>
    18fe:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    1900:	tst.w	r8, #4
    1904:	beq.n	1918 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    1906:	ldr	r3, [pc, #392]	; (1a90 <isr+0x2b8>)
    1908:	ldr.w	r3, [r3, #388]	; 0x184
    190c:	ands.w	r3, r3, #512	; 0x200
    1910:	beq.n	19ac <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    1912:	ldr	r3, [pc, #408]	; (1aac <isr+0x2d4>)
    1914:	movs	r2, #1
    1916:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1918:	ldr	r3, [pc, #372]	; (1a90 <isr+0x2b8>)
    191a:	ldr.w	r2, [r3, #328]	; 0x148
    191e:	lsls	r2, r2, #24
    1920:	bpl.n	1948 <isr+0x170>
    1922:	tst.w	r8, #128	; 0x80
    1926:	beq.n	1948 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    1928:	ldr	r1, [pc, #388]	; (1ab0 <isr+0x2d8>)
    192a:	ldrb	r2, [r1, #0]
    192c:	cbz	r2, 1948 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    192e:	subs	r2, #1
    1930:	uxtb	r2, r2
    1932:	strb	r2, [r1, #0]
    1934:	cbnz	r2, 1948 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    1936:	ldr	r1, [pc, #380]	; (1ab4 <isr+0x2dc>)
    1938:	ldrb	r2, [r1, #0]
    193a:	and.w	r2, r2, #251	; 0xfb
    193e:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    1940:	cmp	r2, #0
    1942:	beq.w	1daa <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    1946:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    1948:	add	sp, #12
    194a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    194e:	ldr	r1, [pc, #360]	; (1ab8 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    1950:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1954:	ldr	r0, [r1, #0]
    1956:	tst	r3, r0
    1958:	bne.w	1d28 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    195c:	ldr	r2, [pc, #320]	; (1aa0 <isr+0x2c8>)
    195e:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    1960:	ands	r5, r3
    1962:	beq.n	18ac <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1964:	lsrs	r7, r5, #16
    1966:	beq.n	1988 <isr+0x1b0>
    1968:	ldr	r6, [pc, #296]	; (1a94 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    196a:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    196e:	rbit	r4, r7
    1972:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    1976:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    197a:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    197e:	adds	r0, #64	; 0x40
    1980:	bl	1700 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    1984:	bics	r7, r4
    1986:	bne.n	196e <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    1988:	uxth	r5, r5
				while(rx) {
    198a:	cmp	r5, #0
    198c:	beq.n	18ac <isr+0xd4>
    198e:	ldr	r6, [pc, #260]	; (1a94 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    1990:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    1992:	rbit	r4, r5
    1996:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    199a:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    199e:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    19a2:	bl	1700 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    19a6:	bics	r5, r4
    19a8:	bne.n	1992 <isr+0x1ba>
    19aa:	b.n	18ac <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    19ac:	ldr	r2, [pc, #252]	; (1aac <isr+0x2d4>)
    19ae:	strb	r3, [r2, #0]
    19b0:	b.n	1918 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    19b2:	movw	r7, #8225	; 0x2021
    19b6:	cmp	r1, r7
    19b8:	beq.n	1a26 <isr+0x24e>
    19ba:	bhi.w	1ad0 <isr+0x2f8>
    19be:	cmp.w	r1, #2176	; 0x880
    19c2:	beq.w	1c08 <isr+0x430>
    19c6:	cmp.w	r1, #2304	; 0x900
    19ca:	bne.n	1a2e <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    19cc:	ubfx	r0, r0, #16, #8
    19d0:	ldr	r2, [pc, #232]	; (1abc <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    19d2:	ldr	r1, [pc, #236]	; (1ac0 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    19d4:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    19d6:	ldr	r7, [pc, #236]	; (1ac4 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    19d8:	ldr	r2, [pc, #236]	; (1ac8 <isr+0x2f0>)
    19da:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    19dc:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    19e0:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    19e4:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    19e8:	bl	12b8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    19ec:	ldr	r2, [pc, #220]	; (1acc <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    19ee:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    19f0:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    19f2:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    19f4:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    19f6:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    19f8:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    19fa:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    19fc:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1a00:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1a04:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1a06:	orr.w	r2, r1, #65536	; 0x10000
    1a0a:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1a0e:	ldr	r2, [pc, #168]	; (1ab8 <isr+0x2e0>)
    1a10:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    1a12:	ldr.w	r3, [r4, #432]	; 0x1b0
    1a16:	cmp	r3, #0
    1a18:	bne.n	1a12 <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1a1a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1a1e:	cmp	r3, #0
    1a20:	bne.w	1804 <isr+0x2c>
    1a24:	b.n	18a2 <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    1a26:	lsrs	r1, r2, #16
    1a28:	cmp	r1, #7
    1a2a:	beq.w	1caa <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1a2e:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1a32:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1a36:	cmp	r3, #0
    1a38:	bne.w	1804 <isr+0x2c>
    1a3c:	b.n	18a2 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1a3e:	movw	r7, #770	; 0x302
    1a42:	cmp	r1, r7
    1a44:	beq.w	1ba8 <isr+0x3d0>
    1a48:	cmp.w	r1, #1280	; 0x500
    1a4c:	bne.n	1a2e <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1a4e:	ldr	r2, [pc, #124]	; (1acc <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1a50:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1a52:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1a54:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1a56:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1a58:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1a5a:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1a5c:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1a60:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1a64:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1a66:	orr.w	r3, r1, #65536	; 0x10000
    1a6a:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1a6e:	ldr.w	r3, [r4, #432]	; 0x1b0
    1a72:	cmp	r3, #0
    1a74:	bne.n	1a6e <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1a76:	lsrs	r3, r0, #16
    1a78:	lsls	r3, r3, #25
    1a7a:	orr.w	r3, r3, #16777216	; 0x1000000
    1a7e:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1a82:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1a86:	cmp	r3, #0
    1a88:	bne.w	1804 <isr+0x2c>
    1a8c:	b.n	18a2 <isr+0xca>
    1a8e:	nop
    1a90:	.word	0x402e0000
    1a94:	.word	0x20003000
    1a98:	.word	0x402e01c0
    1a9c:	.word	0x20001308
    1aa0:	.word	0x200012e4
    1aa4:	.word	0x200012e0
    1aa8:	.word	0x200012ec
    1aac:	.word	0x200012f0
    1ab0:	.word	0x200012f8
    1ab4:	.word	0x200012e8
    1ab8:	.word	0x200012f4
    1abc:	.word	0x20001318
    1ac0:	.word	0x000200c8
    1ac4:	.word	0x00cc0002
    1ac8:	.word	0x00c80002
    1acc:	.word	0x20002020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1ad0:	movw	r3, #8737	; 0x2221
    1ad4:	cmp	r1, r3
    1ad6:	beq.n	1b90 <isr+0x3b8>
    1ad8:	movw	r3, #8993	; 0x2321
    1adc:	cmp	r1, r3
    1ade:	bne.n	1a2e <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1ae0:	ldr	r3, [pc, #724]	; (1db8 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1ae2:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    1ae4:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1ae6:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1ae8:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1aea:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1aec:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1aee:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1af0:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1af4:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1af8:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1afa:	orr.w	r3, r2, #65536	; 0x10000
    1afe:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1b02:	ldr.w	r3, [r4, #432]	; 0x1b0
    1b06:	cmp	r3, #0
    1b08:	bne.n	1b02 <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1b0a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1b0e:	cmp	r3, #0
    1b10:	bne.w	1804 <isr+0x2c>
    1b14:	b.n	18a2 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1b16:	ldr	r2, [pc, #676]	; (1dbc <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    1b18:	movs	r1, #2
    1b1a:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1b1c:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    1b1e:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    1b20:	bl	1738 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1b24:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1b28:	cmp	r3, #0
    1b2a:	bne.w	1804 <isr+0x2c>
    1b2e:	b.n	18a2 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1b30:	uxth	r2, r2
    1b32:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1b36:	cmp	r3, #7
    1b38:	bhi.w	1a2e <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1b3c:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1b40:	mov.w	r3, r3, lsl #2
    1b44:	ldr	r2, [pc, #632]	; (1dc0 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1b46:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b4a:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1b4e:	add	r2, r3
    1b50:	ldr	r3, [r2, #0]
    1b52:	ite	ne
    1b54:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    1b58:	biceq.w	r3, r3, #1
    1b5c:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b5e:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b60:	ldr	r3, [pc, #596]	; (1db8 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1b62:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1b64:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1b66:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1b68:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1b6a:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1b6e:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1b72:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1b74:	orr.w	r3, r2, #65536	; 0x10000
    1b78:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1b7c:	ldr.w	r3, [r4, #432]	; 0x1b0
    1b80:	cmp	r3, #0
    1b82:	bne.n	1b7c <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1b84:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1b88:	cmp	r3, #0
    1b8a:	bne.w	1804 <isr+0x2c>
    1b8e:	b.n	18a2 <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    1b90:	uxth	r2, r2
    1b92:	cmp	r2, #0
    1b94:	bne.n	1ae0 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1b96:	ldr	r3, [pc, #556]	; (1dc4 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    1b98:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1b9c:	ldr	r2, [pc, #552]	; (1dc8 <isr+0x5f0>)
    1b9e:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1ba0:	ldr	r3, [pc, #552]	; (1dcc <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1ba2:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1ba4:	strb	r0, [r3, #0]
    1ba6:	b.n	1ae0 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1ba8:	uxth	r2, r2
    1baa:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1bae:	cmp	r3, #7
    1bb0:	bhi.w	1a2e <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1bb4:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1bb8:	mov.w	r3, r3, lsl #2
    1bbc:	ldr	r2, [pc, #512]	; (1dc0 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1bbe:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1bc2:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1bc6:	add	r2, r3
    1bc8:	ldr	r3, [r2, #0]
    1bca:	ite	ne
    1bcc:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1bd0:	orreq.w	r3, r3, #1
    1bd4:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1bd6:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1bd8:	ldr	r3, [pc, #476]	; (1db8 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1bda:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1bdc:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1bde:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1be0:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1be2:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1be6:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1bea:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1bec:	orr.w	r3, r2, #65536	; 0x10000
    1bf0:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1bf4:	ldr.w	r3, [r4, #432]	; 0x1b0
    1bf8:	cmp	r3, #0
    1bfa:	bne.n	1bf4 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1bfc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1c00:	cmp	r3, #0
    1c02:	bne.w	1804 <isr+0x2c>
    1c06:	b.n	18a2 <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1c08:	ldr	r2, [pc, #452]	; (1dd0 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    1c0a:	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1c0c:	ldr	r3, [pc, #428]	; (1dbc <isr+0x5e4>)
    1c0e:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1c10:	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1c12:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1c14:	bl	1738 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1c18:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1c1c:	cmp	r3, #0
    1c1e:	bne.w	1804 <isr+0x2c>
    1c22:	b.n	18a2 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1c24:	ldr	r3, [pc, #428]	; (1dd4 <isr+0x5fc>)
    1c26:	ldr	r1, [r3, #4]
    1c28:	cmp	r1, #0
    1c2a:	beq.w	1a2e <isr+0x256>
    1c2e:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1c30:	uxth.w	lr, r2
    1c34:	b.n	1c40 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1c36:	adds	r3, #12
    1c38:	ldr	r1, [r3, #4]
    1c3a:	cmp	r1, #0
    1c3c:	beq.w	1a2e <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1c40:	ldrh	r7, [r3, #0]
    1c42:	cmp	r7, r0
    1c44:	bne.n	1c36 <isr+0x45e>
    1c46:	ldrh	r7, [r3, #2]
    1c48:	cmp	r7, lr
    1c4a:	bne.n	1c36 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    1c4c:	lsrs	r7, r0, #8
    1c4e:	cmp	r7, #3
    1c50:	beq.w	1e26 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1c54:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1c56:	lsrs	r2, r2, #16
    1c58:	cmp	r3, r2
    1c5a:	it	cs
    1c5c:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    1c5e:	cmp.w	r0, #512	; 0x200
    1c62:	beq.w	1e08 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    1c66:	cmp.w	r0, #1792	; 0x700
    1c6a:	beq.w	1d84 <isr+0x5ac>
    1c6e:	ldr	r7, [pc, #360]	; (1dd8 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1c70:	mov	r2, r3
    1c72:	str	r3, [sp, #4]
    1c74:	mov	r0, r7
    1c76:	bl	fc8 <memcpy>
    1c7a:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1c7c:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1c80:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    1c82:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1c86:	ldr	r1, [pc, #340]	; (1ddc <isr+0x604>)
    1c88:	str	r2, [r1, #0]
		location += 32;
    1c8a:	adds	r2, #32
	} while (location < end_addr);
    1c8c:	cmp	r7, r2
    1c8e:	bhi.n	1c86 <isr+0x4ae>
	asm("dsb");
    1c90:	dsb	sy
	asm("isb");
    1c94:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1c98:	ldr	r0, [pc, #316]	; (1dd8 <isr+0x600>)
    1c9a:	mov	r1, r3
    1c9c:	bl	1738 <endpoint0_transmit.constprop.1>
    1ca0:	b.n	189a <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1ca2:	lsls	r3, r1, #31
    1ca4:	bpl.w	1892 <isr+0xba>
    1ca8:	b.n	188e <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1caa:	ldr	r7, [pc, #308]	; (1de0 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1cac:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1cb0:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1cb2:	ldr	r1, [pc, #304]	; (1de4 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1cb4:	ldr	r3, [pc, #304]	; (1de8 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1cb6:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1cb8:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1cbc:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1cbe:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    1cc0:	ldr	r1, [pc, #296]	; (1dec <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1cc2:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1cc6:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1cc8:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1ccc:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1cd0:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1cd2:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1cd6:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1cda:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1cde:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1ce2:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1ce4:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1ce8:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1cea:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1cec:	ldr.w	r3, [r4, #432]	; 0x1b0
    1cf0:	cmp	r3, #0
    1cf2:	bne.n	1cec <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    1cf4:	ldr	r2, [pc, #192]	; (1db8 <isr+0x5e0>)
    1cf6:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1cf8:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1cfc:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1cfe:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1d00:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1d04:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1d06:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1d08:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1d0c:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1d10:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1d12:	orr.w	r3, r1, r0
    1d16:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1d1a:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    1d1e:	ldr.w	r3, [r4, #432]	; 0x1b0
    1d22:	cmp	r3, #0
    1d24:	bne.n	1d1e <isr+0x546>
    1d26:	b.n	189a <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1d28:	ldr	r0, [pc, #180]	; (1de0 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1d2a:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1d2e:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1d30:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1d32:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1d34:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    1d36:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1d38:	bne.w	195c <isr+0x184>
    1d3c:	uxth	r1, r0
    1d3e:	cmp	r1, #0
    1d40:	bne.w	195c <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1d44:	ldr	r1, [pc, #164]	; (1dec <isr+0x614>)
    1d46:	ldr	r4, [pc, #168]	; (1df0 <isr+0x618>)
    1d48:	ldmia	r1, {r0, r1}
    1d4a:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1d4c:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1d4e:	str	r0, [r4, #0]
    1d50:	strh	r1, [r4, #4]
    1d52:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1d54:	bne.w	195c <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1d58:	cpsid	i
	sof_usage |= (1 << interface);
    1d5a:	ldr	r0, [pc, #152]	; (1df4 <isr+0x61c>)
    1d5c:	ldrb	r1, [r0, #0]
    1d5e:	orr.w	r1, r1, #4
    1d62:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1d64:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1d68:	lsls	r0, r1, #24
    1d6a:	bmi.n	1d7a <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1d6c:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1d70:	movs	r0, #128	; 0x80
    1d72:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1d76:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1d7a:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1d7c:	ldr	r2, [pc, #120]	; (1df8 <isr+0x620>)
    1d7e:	movs	r1, #80	; 0x50
    1d80:	strb	r1, [r2, #0]
    1d82:	b.n	195c <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1d84:	ldr	r0, [pc, #116]	; (1dfc <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1d86:	mov	r2, r3
    1d88:	ldr	r7, [pc, #76]	; (1dd8 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1d8a:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    1d8e:	ldr	r1, [pc, #112]	; (1e00 <isr+0x628>)
    1d90:	ldr	r0, [pc, #112]	; (1e04 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    1d92:	str	r3, [sp, #4]
    1d94:	cmp.w	lr, #0
    1d98:	it	eq
    1d9a:	moveq	r1, r0
    1d9c:	mov	r0, r7
    1d9e:	bl	fc8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    1da2:	movs	r2, #7
    1da4:	ldr	r3, [sp, #4]
    1da6:	strb	r2, [r7, #1]
    1da8:	b.n	1c7c <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1daa:	ldr.w	r2, [r3, #328]	; 0x148
    1dae:	bic.w	r2, r2, #128	; 0x80
    1db2:	str.w	r2, [r3, #328]	; 0x148
    1db6:	b.n	1946 <isr+0x16e>
    1db8:	.word	0x20002020
    1dbc:	.word	0x20001308
    1dc0:	.word	0x402e01c0
    1dc4:	.word	0x20001324
    1dc8:	.word	0x200013c8
    1dcc:	.word	0x20001248
    1dd0:	.word	0x20001318
    1dd4:	.word	0x20000098
    1dd8:	.word	0x20203000
    1ddc:	.word	0xe000ef70
    1de0:	.word	0x20001300
    1de4:	.word	0x00070080
    1de8:	.word	0x20002000
    1dec:	.word	0x20001310
    1df0:	.word	0x200013c0
    1df4:	.word	0x200012e8
    1df8:	.word	0x200012f8
    1dfc:	.word	0x200012f0
    1e00:	.word	0x60001a14
    1e04:	.word	0x60001a58

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    1e08:	ldr	r0, [pc, #40]	; (1e34 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1e0a:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1e0c:	ldr	r1, [pc, #40]	; (1e38 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1e0e:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1e10:	ldr	r0, [pc, #40]	; (1e3c <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1e12:	str	r3, [sp, #4]
    1e14:	cmp	r7, #0
    1e16:	it	eq
    1e18:	moveq	r1, r0
    1e1a:	ldr	r0, [pc, #36]	; (1e40 <isr+0x668>)
    1e1c:	bl	fc8 <memcpy>
    1e20:	ldr	r7, [pc, #28]	; (1e40 <isr+0x668>)
    1e22:	ldr	r3, [sp, #4]
    1e24:	b.n	1c7c <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1e26:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1e28:	ldrb	r3, [r1, #0]
    1e2a:	cmp	r3, r2
    1e2c:	it	cs
    1e2e:	movcs	r3, r2
    1e30:	b.n	1c66 <isr+0x48e>
    1e32:	nop
    1e34:	.word	0x200012f0
    1e38:	.word	0x60001a58
    1e3c:	.word	0x60001a14
    1e40:	.word	0x20203000

00001e44 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1e44:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1e46:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1e4a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1e4e:	ite	ne
    1e50:	movne	r7, #0
    1e52:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1e56:	cmp	r2, #2
    1e58:	bls.n	1e5e <usb_config_rx+0x1a>
    1e5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1e5e:	mov.w	sl, r0, lsl #7
    1e62:	ldr.w	r9, [pc, #64]	; 1ea4 <usb_config_rx+0x60>
    1e66:	mov	r5, r1
    1e68:	mov	r4, r0
    1e6a:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1e6e:	movs	r1, #0
    1e70:	movs	r2, #64	; 0x40
    1e72:	mov	r8, r3
    1e74:	mov	r0, r6
    1e76:	bl	2fe0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1e7a:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1e7c:	orr.w	r1, r7, r5, lsl #16
    1e80:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1e84:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1e88:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1e8a:	cmp.w	r8, #0
    1e8e:	beq.n	1e5a <usb_config_rx+0x16>
    1e90:	ldr	r3, [pc, #12]	; (1ea0 <usb_config_rx+0x5c>)
    1e92:	lsls	r0, r4
    1e94:	ldr	r4, [r3, #0]
    1e96:	orrs	r0, r4
    1e98:	str	r0, [r3, #0]
    1e9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e9e:	nop
    1ea0:	.word	0x200012e4
    1ea4:	.word	0x20003000

00001ea8 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1ea8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1eaa:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1eae:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1eb2:	ite	ne
    1eb4:	movne	r7, #0
    1eb6:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1eba:	cmp	r2, #2
    1ebc:	bls.n	1ec2 <usb_config_tx+0x1a>
    1ebe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1ec2:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1ec4:	lsls	r5, r0, #7
    1ec6:	ldr.w	r9, [pc, #68]	; 1f0c <usb_config_tx+0x64>
    1eca:	mov	r8, r1
    1ecc:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1ece:	movs	r1, #0
    1ed0:	mov	r4, r0
    1ed2:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1ed4:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1ed8:	mov	r0, sl
    1eda:	bl	2fe0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1ede:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1ee0:	orr.w	r1, r7, r8, lsl #16
    1ee4:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1ee8:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1eec:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1ef0:	cmp	r6, #0
    1ef2:	beq.n	1ebe <usb_config_tx+0x16>
    1ef4:	add.w	r0, r4, #16
    1ef8:	ldr	r3, [pc, #12]	; (1f08 <usb_config_tx+0x60>)
    1efa:	lsls	r2, r0
    1efc:	ldr	r0, [r3, #0]
    1efe:	orrs	r2, r0
    1f00:	str	r2, [r3, #0]
    1f02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f06:	nop
    1f08:	.word	0x200012e4
    1f0c:	.word	0x20003000

00001f10 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1f10:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1f12:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1f14:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1f16:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    1f1a:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1f1c:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1f1e:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1f20:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1f24:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1f28:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1f2c:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1f30:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1f32:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1f34:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    1f36:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1f38:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1f3a:	pop	{r4, r5, r6, r7}
    1f3c:	bx	lr
    1f3e:	nop

00001f40 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1f40:	subs	r3, r0, #2
    1f42:	cmp	r3, #2
    1f44:	bls.n	1f48 <usb_transmit+0x8>
    1f46:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1f48:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1f4a:	ldr	r3, [pc, #24]	; (1f64 <usb_transmit+0x24>)
    1f4c:	add.w	r4, r0, #16
    1f50:	movs	r5, #1
    1f52:	mov	r2, r1
    1f54:	add.w	r0, r3, r0, lsl #7
    1f58:	lsl.w	r1, r5, r4
}
    1f5c:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1f5e:	b.w	1690 <schedule_transfer>
    1f62:	nop
    1f64:	.word	0x20003040

00001f68 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1f68:	subs	r3, r0, #2
    1f6a:	cmp	r3, #2
    1f6c:	bls.n	1f70 <usb_receive+0x8>
    1f6e:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1f70:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1f72:	ldr	r3, [pc, #20]	; (1f88 <usb_receive+0x20>)
    1f74:	movs	r4, #1
    1f76:	mov	r2, r1
    1f78:	lsl.w	r1, r4, r0
    1f7c:	add.w	r0, r3, r0, lsl #7
}
    1f80:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1f84:	b.w	1690 <schedule_transfer>
    1f88:	.word	0x20003000

00001f8c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    1f8c:	cmp	r0, #0
    1f8e:	beq.n	2040 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1f90:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    1f92:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f96:	sub	sp, #20
    1f98:	mov	fp, r0
    1f9a:	ldr	r4, [pc, #168]	; (2044 <delay+0xb8>)
    1f9c:	ldr	r5, [pc, #168]	; (2048 <delay+0xbc>)
    1f9e:	ldr	r6, [pc, #172]	; (204c <delay+0xc0>)
    1fa0:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1fa4:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1fa8:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    1faa:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1fac:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1fb0:	cmp	r1, #0
    1fb2:	bne.n	1fa4 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1fb4:	ldr	r7, [pc, #152]	; (2050 <delay+0xc4>)
    1fb6:	strd	r8, r9, [sp, #8]
    1fba:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1fbc:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1fbe:	ldr	r2, [pc, #148]	; (2054 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1fc0:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1fc4:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1fc6:	ldr	r2, [r2, #0]
    1fc8:	movs	r7, #1
    1fca:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    1fce:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1fd2:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    1fd4:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1fd6:	cmp	r3, r1
    1fd8:	it	eq
    1fda:	cmpeq	r2, r8
    1fdc:	ite	cs
    1fde:	movcs	sl, r8
    1fe0:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    1fe2:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    1fe6:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    1fea:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    1fec:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    1fee:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    1ff2:	cmp	r3, #0
    1ff4:	bne.n	1fe6 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    1ff6:	ldr	r0, [sp, #4]
    1ff8:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    1ffa:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    1ffc:	ldr	r0, [pc, #84]	; (2054 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    1ffe:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2002:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2004:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2008:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    200c:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2010:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2014:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    2016:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2018:	cmp	r1, r3
    201a:	it	eq
    201c:	cmpeq	r0, r8
    201e:	ite	cs
    2020:	movcs	r3, r8
    2022:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    2024:	add	r2, r3
    2026:	cmp	r2, lr
    2028:	bcc.n	203a <delay+0xae>
			if (--msec == 0) return;
    202a:	subs.w	fp, fp, #1
			start += 1000;
    202e:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    2032:	bne.n	1fe6 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    2034:	add	sp, #20
    2036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    203a:	bl	27d4 <yield>
	}
    203e:	b.n	1fe6 <delay+0x5a>
    2040:	bx	lr
    2042:	nop
    2044:	.word	0x20003280
    2048:	.word	0x20001324
    204c:	.word	0x2000131c
    2050:	.word	0xe0001004
    2054:	.word	0x20001320

00002058 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    2058:	ldr	r2, [pc, #72]	; (20a4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    205a:	ldr	r3, [pc, #76]	; (20a8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    205c:	ldr.w	r0, [r2, #544]	; 0x220
    2060:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    2064:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    2066:	push	{r4, lr}
    2068:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    206a:	bhi.n	2072 <usb_init_serialnumber+0x1a>
    206c:	add.w	r0, r0, r0, lsl #2
    2070:	lsls	r0, r0, #1
    2072:	ldr	r4, [pc, #56]	; (20ac <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    2074:	add	r1, sp, #4
    2076:	movs	r2, #10
    2078:	bl	218c <ultoa>
    207c:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    207e:	movs	r3, #0
    2080:	mov	r0, r4
		char c = buf[i];
    2082:	ldrb.w	r2, [r1], #1
    2086:	adds	r3, #1
		if (!c) break;
    2088:	cbz	r2, 209a <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    208a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    208c:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2090:	bne.n	2082 <usb_init_serialnumber+0x2a>
    2092:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2094:	strb	r3, [r4, #0]
}
    2096:	add	sp, #16
    2098:	pop	{r4, pc}
    209a:	lsls	r3, r3, #1
    209c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    209e:	strb	r3, [r4, #0]
}
    20a0:	add	sp, #16
    20a2:	pop	{r4, pc}
    20a4:	.word	0x401f4400
    20a8:	.word	0x0098967f
    20ac:	.word	0x200005e8

000020b0 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    20b0:	movs	r0, #4
    20b2:	mov	r1, lr
    20b4:	tst	r0, r1
    20b6:	beq.n	20c0 <_MSP>
    20b8:	mrs	r0, PSP
    20bc:	b.w	20d0 <HardFault_HandlerC>

000020c0 <_MSP>:
    20c0:	mrs	r0, MSP
    20c4:	b.w	20d0 <HardFault_HandlerC>

000020c8 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    20c8:	bx	lr
    20ca:	nop

000020cc <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    20cc:	bx	lr
    20ce:	nop

000020d0 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    20d0:	ldr	r3, [pc, #108]	; (2140 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    20d2:	movs	r1, #5
    20d4:	ldr	r2, [pc, #108]	; (2144 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    20d6:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    20d8:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    20da:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    20de:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    20e0:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    20e4:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    20e6:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    20e8:	ldr	r4, [pc, #92]	; (2148 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    20ea:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    20ec:	ldr	r0, [pc, #92]	; (214c <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    20ee:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    20f0:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    20f4:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    20f8:	ldr	r3, [r4, #0]
    20fa:	cmp	r3, r0
    20fc:	bls.n	2104 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    20fe:	ldr	r0, [pc, #80]	; (2150 <HardFault_HandlerC+0x80>)
    2100:	bl	13cc <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    2104:	ldr	r5, [pc, #56]	; (2140 <HardFault_HandlerC+0x70>)
    2106:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2108:	movs	r0, #0
    210a:	ldr	r2, [pc, #72]	; (2154 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    210c:	ldr	r1, [pc, #72]	; (2158 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    210e:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    2112:	str	r0, [sp, #4]
    2114:	ldr	r3, [sp, #4]
    2116:	cmp	r3, r2
    2118:	bhi.n	2126 <HardFault_HandlerC+0x56>
    211a:	ldr	r3, [sp, #4]
    211c:	adds	r3, #1
    211e:	str	r3, [sp, #4]
    2120:	ldr	r3, [sp, #4]
    2122:	cmp	r3, r2
    2124:	bls.n	211a <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    2126:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    212a:	str	r0, [sp, #4]
    212c:	ldr	r3, [sp, #4]
    212e:	cmp	r3, r1
    2130:	bhi.n	210e <HardFault_HandlerC+0x3e>
    2132:	ldr	r3, [sp, #4]
    2134:	adds	r3, #1
    2136:	str	r3, [sp, #4]
    2138:	ldr	r3, [sp, #4]
    213a:	cmp	r3, r1
    213c:	bls.n	2132 <HardFault_HandlerC+0x62>
    213e:	b.n	210e <HardFault_HandlerC+0x3e>
    2140:	.word	0x401bc000
    2144:	.word	0x401f8000
    2148:	.word	0x200005d0
    214c:	.word	0x23c345ff
    2150:	.word	0x11e1a300
    2154:	.word	0x000f423f
    2158:	.word	0x0089543f

0000215c <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    215c:	ldr	r2, [pc, #36]	; (2184 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    215e:	push	{r3, lr}
        char *prev = __brkval;
    2160:	ldr	r3, [r2, #0]
        if (incr != 0) {
    2162:	cbz	r0, 216e <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    2164:	add	r0, r3
    2166:	ldr	r1, [pc, #32]	; (2188 <_sbrk+0x2c>)
    2168:	cmp	r0, r1
    216a:	bhi.n	2172 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    216c:	str	r0, [r2, #0]
        }
        return prev;
}
    216e:	mov	r0, r3
    2170:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    2172:	bl	2a04 <__errno>
    2176:	movs	r2, #12
                        return (void *)-1;
    2178:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    217c:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    217e:	mov	r0, r3
    2180:	pop	{r3, pc}
    2182:	nop
    2184:	.word	0x20000600
    2188:	.word	0x20280000

0000218c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    218c:	push	{r4, r5, r6, r7}
    218e:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    2190:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    2192:	mov	r7, r6
    2194:	b.n	2198 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    2196:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    2198:	udiv	r3, r0, r2
    219c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    21a0:	add.w	r4, r0, #55	; 0x37
    21a4:	cmp	r0, #9
    21a6:	add.w	r0, r0, #48	; 0x30
    21aa:	uxtb	r4, r4
    21ac:	it	ls
    21ae:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    21b0:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    21b2:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    21b6:	cmp	r3, #0
    21b8:	bne.n	2196 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    21ba:	adds	r2, r1, r5
    21bc:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    21be:	cbz	r5, 21d4 <ultoa+0x48>
    21c0:	adds	r3, #1
		t = buf[j];
    21c2:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    21c6:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    21c8:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    21ca:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    21cc:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    21ce:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    21d2:	blt.n	21c0 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    21d4:	mov	r0, r1
    21d6:	pop	{r4, r5, r6, r7}
    21d8:	bx	lr
    21da:	nop

000021dc <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    21dc:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    21de:	ldr	r2, [pc, #24]	; (21f8 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    21e0:	movs	r1, #7
    21e2:	ldr	r3, [pc, #24]	; (21fc <Panic_Temp_isr+0x20>)
    21e4:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    21e6:	ldr	r3, [r2, #56]	; 0x38
    21e8:	orr.w	r3, r3, #64	; 0x40
    21ec:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    21ee:	dsb	sy
  while (1) asm ("wfi");
    21f2:	wfi
    21f4:	b.n	21f2 <Panic_Temp_isr+0x16>
    21f6:	nop
    21f8:	.word	0x400d4000
    21fc:	.word	0x400ac000

00002200 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    2200:	lsls	r0, r0, #4
    2202:	ldr	r3, [pc, #60]	; (2240 <digitalWrite.part.0+0x40>)
    2204:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    2206:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    2208:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    220a:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    220c:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    220e:	tst	r4, r0
    2210:	beq.n	221e <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    2212:	cbz	r1, 222c <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    2214:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    2218:	ldr.w	r4, [sp], #4
    221c:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    221e:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    2220:	cbnz	r1, 2236 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2222:	ldr	r2, [pc, #32]	; (2244 <digitalWrite.part.0+0x44>)
		}
	}
}
    2224:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    2228:	str	r2, [r3, #0]
		}
	}
}
    222a:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    222c:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    2230:	ldr.w	r4, [sp], #4
    2234:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2236:	ldr	r2, [pc, #16]	; (2248 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    2238:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    223c:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    223e:	bx	lr
    2240:	.word	0x20000104
    2244:	.word	0x00013038
    2248:	.word	0x0001f038

0000224c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    224c:	cmp	r0, #54	; 0x36
    224e:	bhi.n	2254 <digitalWrite+0x8>
    2250:	b.w	2200 <digitalWrite.part.0>
    2254:	bx	lr
    2256:	nop

00002258 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    2258:	cmp	r0, #54	; 0x36
    225a:	bhi.n	2296 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    225c:	lsls	r0, r0, #4
    225e:	ldr	r2, [pc, #104]	; (22c8 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2260:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    2262:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2266:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    2268:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    226a:	beq.n	2298 <pinMode+0x40>
    226c:	cmp	r1, #4
    226e:	beq.n	2298 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2270:	ldr	r4, [r3, #12]
    2272:	ldr	r2, [r0, #4]
    2274:	bic.w	r2, r2, r4
    2278:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    227a:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    227c:	cbz	r1, 22ba <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    227e:	cmp	r1, #2
    2280:	beq.n	22c0 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    2282:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    2284:	ldr	r3, [r3, #4]
}
    2286:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    228a:	ite	eq
    228c:	ldreq	r1, [pc, #60]	; (22cc <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    228e:	ldrne	r1, [pc, #64]	; (22d0 <pinMode+0x78>)
    2290:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    2292:	movs	r2, #21
    2294:	str	r2, [r3, #0]
}
    2296:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2298:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    229a:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    229c:	ldr	r4, [r0, #4]
    229e:	orr.w	r2, r2, r4
    22a2:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    22a4:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    22a6:	beq.n	22ba <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    22a8:	movw	r1, #2104	; 0x838
    22ac:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    22ae:	ldr	r3, [r3, #4]
    22b0:	movs	r2, #21
}
    22b2:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    22b6:	str	r2, [r3, #0]
}
    22b8:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    22ba:	movs	r1, #56	; 0x38
    22bc:	str	r1, [r2, #0]
    22be:	b.n	22ae <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    22c0:	ldr	r1, [pc, #16]	; (22d4 <pinMode+0x7c>)
    22c2:	str	r1, [r2, #0]
    22c4:	b.n	22ae <pinMode+0x56>
    22c6:	nop
    22c8:	.word	0x20000104
    22cc:	.word	0x00013038
    22d0:	.word	0x00010038
    22d4:	.word	0x0001f038

000022d8 <flexpwmFrequency>:
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
    22d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
    22dc:	mov.w	lr, r1, lsl #1
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    22e0:	ldr	r2, [pc, #224]	; (23c4 <flexpwmFrequency+0xec>)
    22e2:	vmov.f32	s14, #96	; 0x3f000000  0.5
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    22e6:	mov.w	ip, #1
	uint32_t olddiv = p->SM[submodule].VAL1;
    22ea:	add.w	r3, lr, r1
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    22ee:	lsl.w	r7, ip, r1
	uint32_t olddiv = p->SM[submodule].VAL1;
    22f2:	add.w	r3, r0, r3, lsl #5
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    22f6:	uxth	r6, r7
	uint32_t olddiv = p->SM[submodule].VAL1;
    22f8:	ldrh	r3, [r3, #14]
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    22fa:	vldr	s15, [r2]
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
    22fe:	uxth	r5, r3
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    2300:	vcvt.f32.u32	s15, s15
    2304:	vdiv.f32	s0, s15, s0
    2308:	vadd.f32	s0, s0, s14
    230c:	vcvt.u32.f32	s15, s0
    2310:	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
    2314:	cmp.w	r3, #65536	; 0x10000
    2318:	bcc.n	23b8 <flexpwmFrequency+0xe0>
    231a:	movs	r2, #0
    231c:	movw	r4, #65535	; 0xffff
    2320:	b.n	2326 <flexpwmFrequency+0x4e>
    2322:	cmp	r2, #6
    2324:	bhi.n	232e <flexpwmFrequency+0x56>
		newdiv = newdiv >> 1;
    2326:	lsrs	r3, r3, #1
		prescale = prescale + 1;
    2328:	adds	r2, #1
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
    232a:	cmp	r3, r4
    232c:	bhi.n	2322 <flexpwmFrequency+0x4a>
		newdiv = newdiv >> 1;
		prescale = prescale + 1;
	}
	if (newdiv > 65535) {
    232e:	cmp.w	r3, #65536	; 0x10000
    2332:	mov.w	r2, r2, lsl #4
    2336:	bcs.n	23a8 <flexpwmFrequency+0xd0>
    2338:	orr.w	r2, r2, #1024	; 0x400
    233c:	uxth	r2, r2
    233e:	add.w	ip, r3, #4294967295
    2342:	uxth.w	ip, ip
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    2346:	ldrh.w	r8, [r0, #392]	; 0x188
    234a:	lsls	r6, r6, #4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    234c:	and.w	r4, r7, #15
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    2350:	add	r1, lr
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    2352:	uxtb	r6, r6
    2354:	uxth.w	r7, r8
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    2358:	add.w	r1, r0, r1, lsl #5
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    235c:	orrs	r6, r7
    235e:	strh.w	r6, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    2362:	strh	r2, [r1, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    2364:	strh.w	ip, [r1, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    2368:	ldrh	r2, [r1, #10]
    236a:	uxth	r2, r2
    236c:	mul.w	r2, r3, r2
    2370:	udiv	r2, r2, r5
    2374:	uxth	r2, r2
    2376:	strh	r2, [r1, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    2378:	ldrh	r2, [r1, #22]
    237a:	uxth	r2, r2
    237c:	mul.w	r2, r3, r2
    2380:	udiv	r2, r2, r5
    2384:	uxth	r2, r2
    2386:	strh	r2, [r1, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    2388:	ldrh	r2, [r1, #30]
    238a:	uxth	r2, r2
    238c:	mul.w	r3, r3, r2
    2390:	udiv	r3, r3, r5
    2394:	uxth	r3, r3
    2396:	strh	r3, [r1, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    2398:	ldrh.w	r3, [r0, #392]	; 0x188
    239c:	uxth	r3, r3
    239e:	orrs	r4, r3
    23a0:	strh.w	r4, [r0, #392]	; 0x188
    23a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23a8:	orr.w	r2, r2, #1024	; 0x400
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
		newdiv = newdiv >> 1;
		prescale = prescale + 1;
	}
	if (newdiv > 65535) {
    23ac:	movw	ip, #65534	; 0xfffe
		newdiv = 65535;
    23b0:	movw	r3, #65535	; 0xffff
    23b4:	uxth	r2, r2
    23b6:	b.n	2346 <flexpwmFrequency+0x6e>
	} else if (newdiv < 2) {
    23b8:	cmp	r3, #1
    23ba:	mov.w	r2, #1024	; 0x400
    23be:	bhi.n	233e <flexpwmFrequency+0x66>
		newdiv = 2;
    23c0:	movs	r3, #2
    23c2:	b.n	2346 <flexpwmFrequency+0x6e>
    23c4:	.word	0x200005cc

000023c8 <quadtimerFrequency>:
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    23c8:	ldr	r3, [pc, #136]	; (2454 <quadtimerFrequency+0x8c>)
    23ca:	vmov.f32	s14, #96	; 0x3f000000  0.5
    23ce:	vldr	s15, [r3]
    23d2:	vcvt.f32.u32	s15, s15
	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
    23d6:	push	{r4, r5}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    23d8:	vdiv.f32	s0, s15, s0
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    23dc:	movw	r4, #65534	; 0xfffe
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    23e0:	vadd.f32	s0, s0, s14
    23e4:	vcvt.u32.f32	s15, s0
    23e8:	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    23ec:	cmp	r3, r4
    23ee:	bls.n	2446 <quadtimerFrequency+0x7e>
    23f0:	movs	r2, #0
    23f2:	b.n	23f8 <quadtimerFrequency+0x30>
    23f4:	cmp	r2, #6
    23f6:	bhi.n	2400 <quadtimerFrequency+0x38>
		newdiv = newdiv >> 1; 
    23f8:	lsrs	r3, r3, #1
		prescale = prescale + 1;
    23fa:	adds	r2, #1
void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    23fc:	cmp	r3, r4
    23fe:	bhi.n	23f4 <quadtimerFrequency+0x2c>
    2400:	adds	r2, #8
		newdiv = newdiv >> 1; 
		prescale = prescale + 1;
	}
	if (newdiv > 65534) {
    2402:	movw	r5, #65534	; 0xfffe
    2406:	movw	r4, #8230	; 0x2026
    240a:	lsls	r2, r2, #9
    240c:	cmp	r3, r5
    240e:	and.w	r2, r2, #7680	; 0x1e00
		newdiv = 65534;
    2412:	it	hi
    2414:	movhi	r3, r5
    2416:	orrs	r4, r2
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    2418:	add.w	r1, r0, r1, lsl #5
    241c:	ldrh	r5, [r1, #16]
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    241e:	ldrh	r2, [r1, #6]
		newdiv = 65534;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    2420:	uxth	r5, r5
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    2422:	uxth	r2, r2
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    2424:	mul.w	r0, r5, r3
    2428:	rsb	r2, r2, #65537	; 0x10001
    242c:	add	r2, r5
    242e:	udiv	r2, r0, r2
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
    2432:	subs	r3, r3, r2
	p->CH[submodule].CMPLD1 = high;
    2434:	uxth	r2, r2
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
    2436:	rsb	r3, r3, #1
    243a:	uxth	r3, r3
    243c:	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    243e:	strh	r2, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    2440:	strh	r4, [r1, #12]
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
}
    2442:	pop	{r4, r5}
    2444:	bx	lr
		newdiv = newdiv >> 1; 
		prescale = prescale + 1;
	}
	if (newdiv > 65534) {
		newdiv = 65534;
	} else if (newdiv < 2) {
    2446:	cmp	r3, #1
    2448:	movw	r4, #12326	; 0x3026
		newdiv = 2;
    244c:	it	ls
    244e:	movls	r3, #2
    2450:	b.n	2418 <quadtimerFrequency+0x50>
    2452:	nop
    2454:	.word	0x200005cc

00002458 <analogWriteFrequency>:

void analogWriteFrequency(uint8_t pin, float frequency)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    2458:	cmp	r0, #54	; 0x36
    245a:	bhi.n	2470 <analogWriteFrequency+0x18>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
    245c:	sxth	r0, r0
    245e:	ldr	r3, [pc, #76]	; (24ac <analogWriteFrequency+0x54>)
	if (info->type == 1) {
    2460:	ldrb.w	r2, [r3, r0, lsl #2]
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
    2464:	add.w	r3, r3, r0, lsl #2
	if (info->type == 1) {
    2468:	cmp	r2, #1
    246a:	beq.n	2472 <analogWriteFrequency+0x1a>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
    246c:	cmp	r2, #2
    246e:	beq.n	248c <analogWriteFrequency+0x34>
    2470:	bx	lr
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    2472:	ldrb	r1, [r3, #1]
    2474:	ubfx	r2, r1, #4, #2
    2478:	cmp	r2, #3
    247a:	beq.n	24a4 <analogWriteFrequency+0x4c>
    247c:	ldr	r0, [pc, #48]	; (24b0 <analogWriteFrequency+0x58>)
    247e:	ldr.w	r0, [r0, r2, lsl #2]
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    2482:	ldrb	r2, [r3, #2]
    2484:	and.w	r1, r1, #3
    2488:	b.w	22d8 <flexpwmFrequency>
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    248c:	ldrb	r1, [r3, #1]
    248e:	ubfx	r3, r1, #4, #2
    2492:	cmp	r3, #3
    2494:	beq.n	24a8 <analogWriteFrequency+0x50>
    2496:	ldr	r2, [pc, #28]	; (24b4 <analogWriteFrequency+0x5c>)
    2498:	ldr.w	r0, [r2, r3, lsl #2]
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    249c:	and.w	r1, r1, #3
    24a0:	b.w	23c8 <quadtimerFrequency>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    24a4:	ldr	r0, [pc, #16]	; (24b8 <analogWriteFrequency+0x60>)
    24a6:	b.n	2482 <analogWriteFrequency+0x2a>
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    24a8:	ldr	r0, [pc, #16]	; (24bc <analogWriteFrequency+0x64>)
    24aa:	b.n	249c <analogWriteFrequency+0x44>
    24ac:	.word	0x20000474
    24b0:	.word	0x20000550
    24b4:	.word	0x2000055c
    24b8:	.word	0x403e8000
    24bc:	.word	0x401e8000

000024c0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    24c0:	ldr	r0, [pc, #656]	; (2754 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    24c2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    24c6:	ldr	r3, [pc, #656]	; (2758 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    24c8:	ldr	r2, [r0, #120]	; 0x78
    24ca:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    24ce:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    24d0:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    24d2:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    24d4:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    24d8:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    24dc:	ldr	r4, [pc, #636]	; (275c <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    24de:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    24e2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    24e4:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    24e8:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    24ea:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    24ec:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    24f0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    24f4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    24f8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    24fc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2500:	ldrh.w	r0, [r3, #392]	; 0x188
    2504:	uxth	r0, r0
    2506:	orr.w	r0, r0, #240	; 0xf0
    250a:	strh.w	r0, [r3, #392]	; 0x188
    250e:	add.w	r0, r1, r1, lsl #1
    2512:	ldr	r3, [pc, #580]	; (2758 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    2514:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2516:	movs	r5, #0
    2518:	lsls	r0, r0, #5
    251a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    251c:	cmp	r1, #4
    251e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2520:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2524:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    2526:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2528:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    252a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    252c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    252e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2530:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2532:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2534:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2536:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2538:	bne.n	250e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    253a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    253e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2542:	ldr	r3, [pc, #540]	; (2760 <pwm_init+0x2a0>)
    2544:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2548:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    254a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    254c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2550:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2552:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2556:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    255a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    255e:	ldrh.w	r0, [r4, #392]	; 0x188
    2562:	uxth	r0, r0
    2564:	orr.w	r0, r0, #3840	; 0xf00
    2568:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    256c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2570:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2574:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2578:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    257c:	ldrh.w	r0, [r3, #392]	; 0x188
    2580:	uxth	r0, r0
    2582:	orr.w	r0, r0, #240	; 0xf0
    2586:	strh.w	r0, [r3, #392]	; 0x188
    258a:	add.w	r0, r1, r1, lsl #1
    258e:	ldr	r3, [pc, #464]	; (2760 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    2590:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2592:	movs	r5, #0
    2594:	lsls	r0, r0, #5
    2596:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2598:	cmp	r1, #4
    259a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    259c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    259e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    25a2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    25a4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    25a6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    25a8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    25aa:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    25ac:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    25ae:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    25b0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    25b2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    25b4:	bne.n	258a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    25b6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    25ba:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    25be:	ldr	r3, [pc, #420]	; (2764 <pwm_init+0x2a4>)
    25c0:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    25c4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    25c6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    25c8:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    25cc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    25ce:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    25d2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    25d6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    25da:	ldrh.w	r0, [r4, #392]	; 0x188
    25de:	uxth	r0, r0
    25e0:	orr.w	r0, r0, #3840	; 0xf00
    25e4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    25e8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    25ec:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    25f0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    25f4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    25f8:	ldrh.w	r0, [r3, #392]	; 0x188
    25fc:	uxth	r0, r0
    25fe:	orr.w	r0, r0, #240	; 0xf0
    2602:	strh.w	r0, [r3, #392]	; 0x188
    2606:	add.w	r0, r1, r1, lsl #1
    260a:	ldr	r3, [pc, #344]	; (2764 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    260c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    260e:	movs	r5, #0
    2610:	lsls	r0, r0, #5
    2612:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2614:	cmp	r1, #4
    2616:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2618:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    261a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    261e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2620:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2622:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2624:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2626:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2628:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    262a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    262c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    262e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2630:	bne.n	2606 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2632:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2636:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    263a:	ldr	r3, [pc, #300]	; (2768 <pwm_init+0x2a8>)
    263c:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2640:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2642:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2644:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2648:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    264a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    264e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2652:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2656:	ldrh.w	r0, [r4, #392]	; 0x188
    265a:	uxth	r0, r0
    265c:	orr.w	r0, r0, #3840	; 0xf00
    2660:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2664:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2668:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    266c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2670:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2674:	ldrh.w	r0, [r3, #392]	; 0x188
    2678:	uxth	r0, r0
    267a:	orr.w	r0, r0, #240	; 0xf0
    267e:	strh.w	r0, [r3, #392]	; 0x188
    2682:	add.w	r0, r1, r1, lsl #1
    2686:	ldr	r3, [pc, #224]	; (2768 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    2688:	adds	r1, #1
    268a:	lsls	r0, r0, #5
    268c:	mov	r4, r3
    268e:	cmp	r1, #4
    2690:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2692:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2694:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2698:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    269a:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    269c:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    269e:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    26a0:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    26a2:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    26a4:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    26a6:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    26a8:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    26aa:	bne.n	2682 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    26ac:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    26b0:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    26b2:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    26b4:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    26b8:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    26ba:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    26be:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    26c0:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    26c4:	orrs	r3, r7
    26c6:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    26ca:	ldrh.w	r3, [r4, #392]	; 0x188
    26ce:	uxth	r3, r3
    26d0:	orr.w	r3, r3, #3840	; 0xf00
    26d4:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    26d8:	lsls	r0, r2, #5
    26da:	ldr	r3, [pc, #144]	; (276c <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    26dc:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    26de:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    26e0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    26e2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    26e4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    26e6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    26e8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    26ea:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    26ee:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    26f0:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    26f2:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    26f4:	bne.n	26d8 <pwm_init+0x218>
    26f6:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    26f8:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    26fa:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    26fe:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2702:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2704:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2708:	lsls	r0, r2, #5
    270a:	ldr	r3, [pc, #100]	; (2770 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    270c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    270e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2710:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2712:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2714:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2716:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2718:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    271a:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    271c:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    271e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2720:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2722:	bne.n	2708 <pwm_init+0x248>
    2724:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2726:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2728:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    272c:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2730:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2732:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    2736:	lsls	r0, r2, #5
    2738:	ldr	r3, [pc, #56]	; (2774 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    273a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    273c:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    273e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    2740:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    2742:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2744:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    2746:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2748:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    274a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    274c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    274e:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    2750:	bne.n	2736 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    2752:	pop	{r4, r5, r6, r7, pc}
    2754:	.word	0x400fc000
    2758:	.word	0x403dc000
    275c:	.word	0xfc030000
    2760:	.word	0x403e0000
    2764:	.word	0x403e4000
    2768:	.word	0x403e8000
    276c:	.word	0x401dc000
    2770:	.word	0x401e0000
    2774:	.word	0x401e4000

00002778 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
    2778:	ldr	r2, [r0, #0]
    277a:	cbz	r2, 27c0 <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
    277c:	ldr	r3, [pc, #68]	; (27c4 <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    277e:	ldr	r1, [pc, #72]	; (27c8 <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    2780:	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
    2782:	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    2784:	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    2786:	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    2788:	movs	r4, #0
    278a:	ldr.w	lr, [pc, #68]	; 27d0 <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    278e:	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    2790:	ldrb	r6, [r1, #0]
    2792:	ldrb	r5, [r1, #1]
    2794:	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
    2796:	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    2798:	str.w	r4, [lr, r3, lsl #2]
    279c:	it	cs
    279e:	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    27a0:	ldrb	r2, [r1, #2]
    27a2:	ldrb	r1, [r1, #3]
    27a4:	cmp	r6, r5
    27a6:	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    27a8:	ldr	r7, [pc, #32]	; (27cc <IntervalTimer::end()+0x54>)
    27aa:	it	cs
    27ac:	movcs	r3, r5
    27ae:	cmp	r3, r2
    27b0:	it	cs
    27b2:	movcs	r3, r2
    27b4:	cmp	r3, r1
    27b6:	it	cs
    27b8:	movcs	r3, r1
    27ba:	strb	r3, [r7, #0]
		channel = 0;
    27bc:	str	r4, [r0, #0]
    27be:	pop	{r4, r5, r6, r7, pc}
    27c0:	bx	lr
    27c2:	nop
    27c4:	.word	0xbff7bf00
    27c8:	.word	0x20000604
    27cc:	.word	0xe000e47a
    27d0:	.word	0x20001340

000027d4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    27d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    27d8:	ldr	r6, [pc, #200]	; (28a4 <yield+0xd0>)
    27da:	ldrb	r3, [r6, #0]
    27dc:	cbz	r3, 2804 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    27de:	ldr	r7, [pc, #200]	; (28a8 <yield+0xd4>)
    27e0:	ldrb	r2, [r7, #0]
    27e2:	cbnz	r2, 2804 <yield+0x30>
	running = 1;
    27e4:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    27e6:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    27e8:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    27ea:	bmi.n	285c <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    27ec:	lsls	r2, r3, #30
    27ee:	bmi.n	2824 <yield+0x50>

	running = 0;
    27f0:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    27f2:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    27f4:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    27f6:	bpl.n	2804 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    27f8:	ldr	r3, [pc, #176]	; (28ac <yield+0xd8>)
    27fa:	ldr	r2, [r3, #0]
    27fc:	cbz	r2, 2804 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    27fe:	mrs	r2, IPSR
		if (ipsr != 0) return;
    2802:	cbz	r2, 2808 <yield+0x34>
    2804:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2808:	mrs	r0, PRIMASK
		__disable_irq();
    280c:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    280e:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    2810:	cbz	r2, 281a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2812:	ldr	r4, [pc, #156]	; (28b0 <yield+0xdc>)
    2814:	ldrb	r1, [r4, #0]
    2816:	cmp	r1, #0
    2818:	beq.n	287a <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    281a:	cmp	r0, #0
    281c:	bne.n	2804 <yield+0x30>
    281e:	cpsie	i
    2820:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2824:	ldr.w	r8, [pc, #148]	; 28bc <yield+0xe8>
    2828:	ldrb.w	r2, [r8]
    282c:	cmp	r2, #0
    282e:	beq.n	27f0 <yield+0x1c>
    2830:	movs	r4, #0
    2832:	ldr.w	r9, [pc, #140]	; 28c0 <yield+0xec>
    2836:	b.n	2844 <yield+0x70>
    2838:	adds	r4, #1
    283a:	ldrb.w	r3, [r8]
    283e:	uxtb	r4, r4
    2840:	cmp	r3, r4
    2842:	bls.n	286c <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    2844:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    2848:	ldr	r3, [r5, #0]
    284a:	mov	r0, r5
    284c:	ldr	r3, [r3, #16]
    284e:	blx	r3
    2850:	cmp	r0, #0
    2852:	beq.n	2838 <yield+0x64>
    2854:	ldr	r3, [r5, #20]
    2856:	ldr	r3, [r3, #8]
    2858:	blx	r3
    285a:	b.n	2838 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    285c:	bl	13c0 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2860:	cbnz	r0, 2898 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    2862:	ldr	r3, [pc, #80]	; (28b4 <yield+0xe0>)
    2864:	ldrb	r3, [r3, #0]
    2866:	cbnz	r3, 2870 <yield+0x9c>
    2868:	ldrb	r3, [r6, #0]
    286a:	b.n	27ec <yield+0x18>
    286c:	ldrb	r3, [r6, #0]
    286e:	b.n	27f0 <yield+0x1c>
    2870:	ldrb	r3, [r6, #0]
    2872:	and.w	r3, r3, #254	; 0xfe
    2876:	strb	r3, [r6, #0]
    2878:	b.n	27ec <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    287a:	movs	r6, #1
		firstYield = first->_next;
    287c:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    287e:	strb	r6, [r4, #0]
		firstYield = first->_next;
    2880:	str	r5, [r3, #0]
		if (firstYield) {
    2882:	cbz	r5, 289e <yield+0xca>
			firstYield->_prev = nullptr;
    2884:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2886:	cbnz	r0, 288a <yield+0xb6>
    2888:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    288a:	movs	r5, #0
		(*(first->_function))(*first);
    288c:	ldr	r3, [r2, #8]
    288e:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2890:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    2892:	blx	r3
		runningFromYield = false;
    2894:	strb	r5, [r4, #0]
    2896:	b.n	2804 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    2898:	bl	29e8 <serialEvent()>
    289c:	b.n	2862 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    289e:	ldr	r3, [pc, #24]	; (28b8 <yield+0xe4>)
    28a0:	str	r5, [r3, #0]
    28a2:	b.n	2886 <yield+0xb2>
    28a4:	.word	0x20000608
    28a8:	.word	0x20001350
    28ac:	.word	0x20001360
    28b0:	.word	0x20001364
    28b4:	.word	0x60001aa6
    28b8:	.word	0x2000135c
    28bc:	.word	0x20001388
    28c0:	.word	0x20001368

000028c4 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    28c4:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    28c6:	mrs	r2, PRIMASK
		__disable_irq();
    28ca:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    28cc:	ldrb	r3, [r0, #29]
    28ce:	cbnz	r3, 28de <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    28d0:	ldrb	r1, [r0, #28]
    28d2:	cmp	r1, #1
    28d4:	beq.n	28e8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    28d6:	cmp	r1, #3
    28d8:	beq.n	28fc <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    28da:	movs	r3, #1
    28dc:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    28de:	cbnz	r2, 28e2 <EventResponder::triggerEventNotImmediate()+0x1e>
    28e0:	cpsie	i
	}
	enableInterrupts(irq);
}
    28e2:	ldr.w	r4, [sp], #4
    28e6:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    28e8:	ldr	r4, [pc, #68]	; (2930 <EventResponder::triggerEventNotImmediate()+0x6c>)
    28ea:	ldr	r1, [r4, #0]
    28ec:	cbz	r1, 2918 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    28ee:	ldr	r1, [pc, #68]	; (2934 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    28f0:	str	r3, [r0, #20]
				_prev = lastYield;
    28f2:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    28f4:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    28f6:	str	r3, [r0, #24]
				_prev->_next = this;
    28f8:	str	r0, [r3, #20]
    28fa:	b.n	28da <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    28fc:	ldr	r4, [pc, #56]	; (2938 <EventResponder::triggerEventNotImmediate()+0x74>)
    28fe:	ldr	r1, [r4, #0]
    2900:	cbz	r1, 2924 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    2902:	ldr	r1, [pc, #56]	; (293c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    2904:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    2906:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    2908:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    290a:	str	r3, [r0, #24]
				_prev->_next = this;
    290c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    290e:	ldr	r3, [pc, #48]	; (2940 <EventResponder::triggerEventNotImmediate()+0x7c>)
    2910:	mov.w	r1, #268435456	; 0x10000000
    2914:	str	r1, [r3, #0]
    2916:	b.n	28da <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    2918:	ldr	r3, [pc, #24]	; (2934 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    291a:	str	r1, [r0, #20]
				_prev = nullptr;
    291c:	str	r1, [r0, #24]
				firstYield = this;
    291e:	str	r0, [r4, #0]
				lastYield = this;
    2920:	str	r0, [r3, #0]
    2922:	b.n	28da <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    2924:	ldr	r3, [pc, #20]	; (293c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    2926:	str	r1, [r0, #20]
				_prev = nullptr;
    2928:	str	r1, [r0, #24]
				firstInterrupt = this;
    292a:	str	r0, [r4, #0]
				lastInterrupt = this;
    292c:	str	r0, [r3, #0]
    292e:	b.n	290e <EventResponder::triggerEventNotImmediate()+0x4a>
    2930:	.word	0x20001360
    2934:	.word	0x2000135c
    2938:	.word	0x20001354
    293c:	.word	0x20001358
    2940:	.word	0xe000ed04

00002944 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    2944:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2946:	mrs	r1, PRIMASK
		__disable_irq();
    294a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    294c:	ldr	r4, [pc, #48]	; (2980 <EventResponder::runFromInterrupt()+0x3c>)
    294e:	ldr	r3, [r4, #0]
		if (first) {
    2950:	cbz	r3, 2976 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    2952:	ldr	r6, [pc, #48]	; (2984 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    2954:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    2956:	ldr	r2, [r3, #20]
    2958:	str	r2, [r4, #0]
			if (firstInterrupt) {
    295a:	cbz	r2, 297c <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    295c:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    295e:	cbnz	r1, 2962 <EventResponder::runFromInterrupt()+0x1e>
    2960:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    2962:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    2964:	mov	r0, r3
    2966:	ldr	r3, [r3, #8]
    2968:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    296a:	mrs	r1, PRIMASK
		__disable_irq();
    296e:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    2970:	ldr	r3, [r4, #0]
		if (first) {
    2972:	cmp	r3, #0
    2974:	bne.n	2956 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2976:	cbnz	r1, 297a <EventResponder::runFromInterrupt()+0x36>
    2978:	cpsie	i
    297a:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    297c:	str	r2, [r6, #0]
    297e:	b.n	295e <EventResponder::runFromInterrupt()+0x1a>
    2980:	.word	0x20001354
    2984:	.word	0x20001358

00002988 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    2988:	b.w	2944 <EventResponder::runFromInterrupt()>

0000298c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    298c:	ldr	r2, [pc, #16]	; (29a0 <systick_isr+0x14>)
    298e:	ldr	r3, [pc, #20]	; (29a4 <systick_isr+0x18>)
    2990:	ldr	r1, [r2, #0]
	systick_millis_count++;
    2992:	ldr	r2, [pc, #20]	; (29a8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2994:	str	r1, [r3, #0]
	systick_millis_count++;
    2996:	ldr	r3, [r2, #0]
    2998:	adds	r3, #1
    299a:	str	r3, [r2, #0]
    299c:	bx	lr
    299e:	nop
    29a0:	.word	0xe0001004
    29a4:	.word	0x2000131c
    29a8:	.word	0x20001324

000029ac <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    29ac:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    29ae:	mov	r6, r1
    29b0:	cbz	r1, 29d0 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    29b2:	cbz	r2, 29d4 <Print::write(unsigned char const*, unsigned int)+0x28>
    29b4:	mov	r7, r0
    29b6:	mov	r4, r2
    29b8:	movs	r5, #0
    29ba:	ldr	r3, [r7, #0]
    29bc:	mov	r0, r7
    29be:	ldrb.w	r1, [r6], #1
    29c2:	ldr	r3, [r3, #0]
    29c4:	blx	r3
    29c6:	subs	r4, #1
    29c8:	add	r5, r0
    29ca:	bne.n	29ba <Print::write(unsigned char const*, unsigned int)+0xe>
    29cc:	mov	r0, r5
    29ce:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    29d0:	mov	r0, r1
    29d2:	pop	{r3, r4, r5, r6, r7, pc}
    29d4:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    29d6:	pop	{r3, r4, r5, r6, r7, pc}

000029d8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    29d8:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    29da:	bl	c0 <setup>
	while (1) {
		loop();
    29de:	bl	fc <loop>
		yield();
    29e2:	bl	27d4 <yield>
    29e6:	b.n	29de <main+0x6>

000029e8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    29e8:	bx	lr
    29ea:	nop

000029ec <__aeabi_atexit>:
    29ec:	mov	r3, r1
    29ee:	mov	r1, r0
    29f0:	mov	r0, r3
    29f2:	b.w	29f8 <__cxa_atexit>
    29f6:	nop

000029f8 <__cxa_atexit>:
    29f8:	mov	r3, r2
    29fa:	mov	r2, r1
    29fc:	mov	r1, r0
    29fe:	movs	r0, #2
    2a00:	b.w	30a8 <__register_exitproc>

00002a04 <__errno>:
    2a04:	ldr	r3, [pc, #4]	; (2a0c <__errno+0x8>)
    2a06:	ldr	r0, [r3, #0]
    2a08:	bx	lr
    2a0a:	nop
    2a0c:	.word	0x20000a38

00002a10 <__libc_init_array>:
    2a10:	push	{r4, r5, r6, lr}
    2a12:	ldr	r6, [pc, #60]	; (2a50 <__libc_init_array+0x40>)
    2a14:	ldr	r5, [pc, #60]	; (2a54 <__libc_init_array+0x44>)
    2a16:	subs	r6, r6, r5
    2a18:	asrs	r6, r6, #2
    2a1a:	it	ne
    2a1c:	movne	r4, #0
    2a1e:	beq.n	2a2c <__libc_init_array+0x1c>
    2a20:	adds	r4, #1
    2a22:	ldr.w	r3, [r5], #4
    2a26:	blx	r3
    2a28:	cmp	r6, r4
    2a2a:	bne.n	2a20 <__libc_init_array+0x10>
    2a2c:	ldr	r6, [pc, #40]	; (2a58 <__libc_init_array+0x48>)
    2a2e:	ldr	r5, [pc, #44]	; (2a5c <__libc_init_array+0x4c>)
    2a30:	subs	r6, r6, r5
    2a32:	bl	33b8 <___init_veneer>
    2a36:	asrs	r6, r6, #2
    2a38:	it	ne
    2a3a:	movne	r4, #0
    2a3c:	beq.n	2a4c <__libc_init_array+0x3c>
    2a3e:	adds	r4, #1
    2a40:	ldr.w	r3, [r5], #4
    2a44:	blx	r3
    2a46:	cmp	r6, r4
    2a48:	bne.n	2a3e <__libc_init_array+0x2e>
    2a4a:	pop	{r4, r5, r6, pc}
    2a4c:	pop	{r4, r5, r6, pc}
    2a4e:	nop
    2a50:	.word	0x60001b00
    2a54:	.word	0x60001b00
    2a58:	.word	0x60001b14
    2a5c:	.word	0x60001b00

00002a60 <malloc>:
    2a60:	ldr	r3, [pc, #8]	; (2a6c <malloc+0xc>)
    2a62:	mov	r1, r0
    2a64:	ldr	r0, [r3, #0]
    2a66:	b.w	2a70 <_malloc_r>
    2a6a:	nop
    2a6c:	.word	0x20000a38

00002a70 <_malloc_r>:
    2a70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a74:	add.w	r5, r1, #11
    2a78:	cmp	r5, #22
    2a7a:	sub	sp, #12
    2a7c:	mov	r6, r0
    2a7e:	bls.w	2bc0 <_malloc_r+0x150>
    2a82:	bics.w	r5, r5, #7
    2a86:	bmi.w	2c08 <_malloc_r+0x198>
    2a8a:	cmp	r1, r5
    2a8c:	bhi.w	2c08 <_malloc_r+0x198>
    2a90:	bl	307c <__malloc_lock>
    2a94:	cmp.w	r5, #504	; 0x1f8
    2a98:	bcc.w	2fd4 <_malloc_r+0x564>
    2a9c:	lsrs	r3, r5, #9
    2a9e:	beq.w	2c16 <_malloc_r+0x1a6>
    2aa2:	cmp	r3, #4
    2aa4:	bhi.w	2dae <_malloc_r+0x33e>
    2aa8:	lsrs	r0, r5, #6
    2aaa:	add.w	lr, r0, #57	; 0x39
    2aae:	mov.w	r3, lr, lsl #1
    2ab2:	adds	r0, #56	; 0x38
    2ab4:	ldr	r7, [pc, #784]	; (2dc8 <_malloc_r+0x358>)
    2ab6:	add.w	r3, r7, r3, lsl #2
    2aba:	sub.w	r1, r3, #8
    2abe:	ldr	r4, [r3, #4]
    2ac0:	cmp	r1, r4
    2ac2:	bne.n	2ad4 <_malloc_r+0x64>
    2ac4:	b.n	2c20 <_malloc_r+0x1b0>
    2ac6:	cmp	r2, #0
    2ac8:	bge.w	2c24 <_malloc_r+0x1b4>
    2acc:	ldr	r4, [r4, #12]
    2ace:	cmp	r1, r4
    2ad0:	beq.w	2c20 <_malloc_r+0x1b0>
    2ad4:	ldr	r3, [r4, #4]
    2ad6:	bic.w	r3, r3, #3
    2ada:	subs	r2, r3, r5
    2adc:	cmp	r2, #15
    2ade:	ble.n	2ac6 <_malloc_r+0x56>
    2ae0:	ldr	r1, [pc, #740]	; (2dc8 <_malloc_r+0x358>)
    2ae2:	ldr	r4, [r7, #16]
    2ae4:	add.w	lr, r1, #8
    2ae8:	cmp	r4, lr
    2aea:	beq.w	2e54 <_malloc_r+0x3e4>
    2aee:	ldr	r3, [r4, #4]
    2af0:	bic.w	r3, r3, #3
    2af4:	subs	r2, r3, r5
    2af6:	cmp	r2, #15
    2af8:	bgt.w	2e2e <_malloc_r+0x3be>
    2afc:	cmp	r2, #0
    2afe:	str.w	lr, [r1, #20]
    2b02:	str.w	lr, [r1, #16]
    2b06:	bge.w	2c46 <_malloc_r+0x1d6>
    2b0a:	cmp.w	r3, #512	; 0x200
    2b0e:	bcs.w	2de0 <_malloc_r+0x370>
    2b12:	lsrs	r3, r3, #3
    2b14:	add.w	ip, r3, #1
    2b18:	movs	r2, #1
    2b1a:	asrs	r3, r3, #2
    2b1c:	lsl.w	r3, r2, r3
    2b20:	ldr	r2, [r1, #4]
    2b22:	ldr.w	r8, [r1, ip, lsl #3]
    2b26:	str.w	r8, [r4, #8]
    2b2a:	add.w	r9, r1, ip, lsl #3
    2b2e:	orrs	r2, r3
    2b30:	sub.w	r3, r9, #8
    2b34:	str	r3, [r4, #12]
    2b36:	str	r2, [r1, #4]
    2b38:	str.w	r4, [r1, ip, lsl #3]
    2b3c:	str.w	r4, [r8, #12]
    2b40:	asrs	r3, r0, #2
    2b42:	movs	r4, #1
    2b44:	lsls	r4, r3
    2b46:	cmp	r4, r2
    2b48:	bhi.w	2c60 <_malloc_r+0x1f0>
    2b4c:	tst	r4, r2
    2b4e:	bne.n	2b5e <_malloc_r+0xee>
    2b50:	bic.w	r0, r0, #3
    2b54:	lsls	r4, r4, #1
    2b56:	tst	r4, r2
    2b58:	add.w	r0, r0, #4
    2b5c:	beq.n	2b54 <_malloc_r+0xe4>
    2b5e:	add.w	r9, r7, r0, lsl #3
    2b62:	mov	ip, r9
    2b64:	mov	r8, r0
    2b66:	ldr.w	r1, [ip, #12]
    2b6a:	cmp	ip, r1
    2b6c:	bne.n	2b7e <_malloc_r+0x10e>
    2b6e:	b.n	2e58 <_malloc_r+0x3e8>
    2b70:	cmp	r2, #0
    2b72:	bge.w	2e78 <_malloc_r+0x408>
    2b76:	ldr	r1, [r1, #12]
    2b78:	cmp	ip, r1
    2b7a:	beq.w	2e58 <_malloc_r+0x3e8>
    2b7e:	ldr	r3, [r1, #4]
    2b80:	bic.w	r3, r3, #3
    2b84:	subs	r2, r3, r5
    2b86:	cmp	r2, #15
    2b88:	ble.n	2b70 <_malloc_r+0x100>
    2b8a:	mov	r4, r1
    2b8c:	ldr.w	ip, [r1, #12]
    2b90:	ldr.w	r8, [r4, #8]!
    2b94:	adds	r3, r1, r5
    2b96:	orr.w	r5, r5, #1
    2b9a:	str	r5, [r1, #4]
    2b9c:	orr.w	r1, r2, #1
    2ba0:	str.w	ip, [r8, #12]
    2ba4:	mov	r0, r6
    2ba6:	str.w	r8, [ip, #8]
    2baa:	str	r3, [r7, #20]
    2bac:	str	r3, [r7, #16]
    2bae:	str.w	lr, [r3, #12]
    2bb2:	str.w	lr, [r3, #8]
    2bb6:	str	r1, [r3, #4]
    2bb8:	str	r2, [r3, r2]
    2bba:	bl	3080 <__malloc_unlock>
    2bbe:	b.n	2c00 <_malloc_r+0x190>
    2bc0:	cmp	r1, #16
    2bc2:	bhi.n	2c08 <_malloc_r+0x198>
    2bc4:	bl	307c <__malloc_lock>
    2bc8:	movs	r5, #16
    2bca:	movs	r3, #6
    2bcc:	movs	r0, #2
    2bce:	ldr	r7, [pc, #504]	; (2dc8 <_malloc_r+0x358>)
    2bd0:	add.w	r3, r7, r3, lsl #2
    2bd4:	sub.w	r2, r3, #8
    2bd8:	ldr	r4, [r3, #4]
    2bda:	cmp	r4, r2
    2bdc:	beq.w	2e6a <_malloc_r+0x3fa>
    2be0:	ldr	r3, [r4, #4]
    2be2:	ldr	r1, [r4, #12]
    2be4:	ldr	r5, [r4, #8]
    2be6:	bic.w	r3, r3, #3
    2bea:	add	r3, r4
    2bec:	mov	r0, r6
    2bee:	ldr	r2, [r3, #4]
    2bf0:	str	r1, [r5, #12]
    2bf2:	orr.w	r2, r2, #1
    2bf6:	str	r5, [r1, #8]
    2bf8:	str	r2, [r3, #4]
    2bfa:	bl	3080 <__malloc_unlock>
    2bfe:	adds	r4, #8
    2c00:	mov	r0, r4
    2c02:	add	sp, #12
    2c04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c08:	movs	r4, #0
    2c0a:	movs	r3, #12
    2c0c:	mov	r0, r4
    2c0e:	str	r3, [r6, #0]
    2c10:	add	sp, #12
    2c12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c16:	movs	r3, #128	; 0x80
    2c18:	mov.w	lr, #64	; 0x40
    2c1c:	movs	r0, #63	; 0x3f
    2c1e:	b.n	2ab4 <_malloc_r+0x44>
    2c20:	mov	r0, lr
    2c22:	b.n	2ae0 <_malloc_r+0x70>
    2c24:	add	r3, r4
    2c26:	ldr	r1, [r4, #12]
    2c28:	ldr	r2, [r3, #4]
    2c2a:	ldr	r5, [r4, #8]
    2c2c:	orr.w	r2, r2, #1
    2c30:	str	r1, [r5, #12]
    2c32:	mov	r0, r6
    2c34:	str	r5, [r1, #8]
    2c36:	str	r2, [r3, #4]
    2c38:	bl	3080 <__malloc_unlock>
    2c3c:	adds	r4, #8
    2c3e:	mov	r0, r4
    2c40:	add	sp, #12
    2c42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c46:	add	r3, r4
    2c48:	mov	r0, r6
    2c4a:	ldr	r2, [r3, #4]
    2c4c:	orr.w	r2, r2, #1
    2c50:	str	r2, [r3, #4]
    2c52:	bl	3080 <__malloc_unlock>
    2c56:	adds	r4, #8
    2c58:	mov	r0, r4
    2c5a:	add	sp, #12
    2c5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c60:	ldr	r4, [r7, #8]
    2c62:	ldr	r3, [r4, #4]
    2c64:	bic.w	r8, r3, #3
    2c68:	cmp	r8, r5
    2c6a:	bcc.n	2c76 <_malloc_r+0x206>
    2c6c:	rsb	r3, r5, r8
    2c70:	cmp	r3, #15
    2c72:	bgt.w	2d8e <_malloc_r+0x31e>
    2c76:	ldr	r3, [pc, #340]	; (2dcc <_malloc_r+0x35c>)
    2c78:	ldr.w	r9, [pc, #352]	; 2ddc <_malloc_r+0x36c>
    2c7c:	ldr	r2, [r3, #0]
    2c7e:	ldr.w	r3, [r9]
    2c82:	adds	r3, #1
    2c84:	add	r2, r5
    2c86:	add.w	sl, r4, r8
    2c8a:	beq.w	2f4e <_malloc_r+0x4de>
    2c8e:	add.w	r2, r2, #4096	; 0x1000
    2c92:	adds	r2, #15
    2c94:	bic.w	r2, r2, #4080	; 0xff0
    2c98:	bic.w	r2, r2, #15
    2c9c:	mov	r1, r2
    2c9e:	mov	r0, r6
    2ca0:	str	r2, [sp, #4]
    2ca2:	bl	3084 <_sbrk_r>
    2ca6:	cmp.w	r0, #4294967295
    2caa:	mov	fp, r0
    2cac:	ldr	r2, [sp, #4]
    2cae:	beq.w	2f62 <_malloc_r+0x4f2>
    2cb2:	cmp	sl, r0
    2cb4:	bhi.w	2eb0 <_malloc_r+0x440>
    2cb8:	ldr	r3, [pc, #276]	; (2dd0 <_malloc_r+0x360>)
    2cba:	ldr	r1, [r3, #0]
    2cbc:	cmp	sl, fp
    2cbe:	add	r1, r2
    2cc0:	str	r1, [r3, #0]
    2cc2:	beq.w	2f6c <_malloc_r+0x4fc>
    2cc6:	ldr.w	r0, [r9]
    2cca:	ldr.w	lr, [pc, #272]	; 2ddc <_malloc_r+0x36c>
    2cce:	adds	r0, #1
    2cd0:	ittet	ne
    2cd2:	rsbne	sl, sl, fp
    2cd6:	addne	r1, sl
    2cd8:	streq.w	fp, [lr]
    2cdc:	strne	r1, [r3, #0]
    2cde:	ands.w	r1, fp, #7
    2ce2:	beq.w	2f14 <_malloc_r+0x4a4>
    2ce6:	rsb	r0, r1, #8
    2cea:	rsb	r1, r1, #4096	; 0x1000
    2cee:	add	fp, r0
    2cf0:	adds	r1, #8
    2cf2:	add	r2, fp
    2cf4:	ubfx	r2, r2, #0, #12
    2cf8:	rsb	r9, r2, r1
    2cfc:	mov	r1, r9
    2cfe:	mov	r0, r6
    2d00:	str	r3, [sp, #4]
    2d02:	bl	3084 <_sbrk_r>
    2d06:	adds	r3, r0, #1
    2d08:	ldr	r3, [sp, #4]
    2d0a:	beq.w	2f8c <_malloc_r+0x51c>
    2d0e:	rsb	r2, fp, r0
    2d12:	add	r2, r9
    2d14:	orr.w	r2, r2, #1
    2d18:	ldr	r1, [r3, #0]
    2d1a:	str.w	fp, [r7, #8]
    2d1e:	add	r1, r9
    2d20:	cmp	r4, r7
    2d22:	str.w	r2, [fp, #4]
    2d26:	str	r1, [r3, #0]
    2d28:	ldr.w	r9, [pc, #164]	; 2dd0 <_malloc_r+0x360>
    2d2c:	beq.n	2d5c <_malloc_r+0x2ec>
    2d2e:	cmp.w	r8, #15
    2d32:	bls.w	2f30 <_malloc_r+0x4c0>
    2d36:	ldr	r2, [r4, #4]
    2d38:	sub.w	r3, r8, #12
    2d3c:	bic.w	r3, r3, #7
    2d40:	adds	r0, r4, r3
    2d42:	and.w	r2, r2, #1
    2d46:	mov.w	lr, #5
    2d4a:	orrs	r2, r3
    2d4c:	cmp	r3, #15
    2d4e:	str	r2, [r4, #4]
    2d50:	str.w	lr, [r0, #4]
    2d54:	str.w	lr, [r0, #8]
    2d58:	bhi.w	2f94 <_malloc_r+0x524>
    2d5c:	ldr	r3, [pc, #116]	; (2dd4 <_malloc_r+0x364>)
    2d5e:	ldr	r4, [r7, #8]
    2d60:	ldr	r2, [r3, #0]
    2d62:	cmp	r1, r2
    2d64:	it	hi
    2d66:	strhi	r1, [r3, #0]
    2d68:	ldr	r3, [pc, #108]	; (2dd8 <_malloc_r+0x368>)
    2d6a:	ldr	r2, [r3, #0]
    2d6c:	cmp	r1, r2
    2d6e:	ldr	r2, [r4, #4]
    2d70:	it	hi
    2d72:	strhi	r1, [r3, #0]
    2d74:	bic.w	r2, r2, #3
    2d78:	cmp	r5, r2
    2d7a:	sub.w	r3, r2, r5
    2d7e:	bhi.n	2d84 <_malloc_r+0x314>
    2d80:	cmp	r3, #15
    2d82:	bgt.n	2d8e <_malloc_r+0x31e>
    2d84:	mov	r0, r6
    2d86:	bl	3080 <__malloc_unlock>
    2d8a:	movs	r4, #0
    2d8c:	b.n	2c00 <_malloc_r+0x190>
    2d8e:	adds	r2, r4, r5
    2d90:	orr.w	r3, r3, #1
    2d94:	orr.w	r5, r5, #1
    2d98:	str	r5, [r4, #4]
    2d9a:	mov	r0, r6
    2d9c:	str	r2, [r7, #8]
    2d9e:	str	r3, [r2, #4]
    2da0:	bl	3080 <__malloc_unlock>
    2da4:	adds	r4, #8
    2da6:	mov	r0, r4
    2da8:	add	sp, #12
    2daa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dae:	cmp	r3, #20
    2db0:	bls.n	2e96 <_malloc_r+0x426>
    2db2:	cmp	r3, #84	; 0x54
    2db4:	bhi.w	2f00 <_malloc_r+0x490>
    2db8:	lsrs	r0, r5, #12
    2dba:	add.w	lr, r0, #111	; 0x6f
    2dbe:	mov.w	r3, lr, lsl #1
    2dc2:	adds	r0, #110	; 0x6e
    2dc4:	b.n	2ab4 <_malloc_r+0x44>
    2dc6:	nop
    2dc8:	.word	0x20000a3c
    2dcc:	.word	0x20001394
    2dd0:	.word	0x20001398
    2dd4:	.word	0x20001390
    2dd8:	.word	0x2000138c
    2ddc:	.word	0x20000e48
    2de0:	lsrs	r2, r3, #9
    2de2:	cmp	r2, #4
    2de4:	bls.n	2ea4 <_malloc_r+0x434>
    2de6:	cmp	r2, #20
    2de8:	bhi.w	2f52 <_malloc_r+0x4e2>
    2dec:	add.w	r1, r2, #92	; 0x5c
    2df0:	lsls	r1, r1, #1
    2df2:	adds	r2, #91	; 0x5b
    2df4:	add.w	ip, r7, r1, lsl #2
    2df8:	ldr.w	r1, [r7, r1, lsl #2]
    2dfc:	ldr.w	r8, [pc, #476]	; 2fdc <_malloc_r+0x56c>
    2e00:	sub.w	ip, ip, #8
    2e04:	cmp	ip, r1
    2e06:	beq.w	2f1a <_malloc_r+0x4aa>
    2e0a:	ldr	r2, [r1, #4]
    2e0c:	bic.w	r2, r2, #3
    2e10:	cmp	r3, r2
    2e12:	bcs.n	2e1a <_malloc_r+0x3aa>
    2e14:	ldr	r1, [r1, #8]
    2e16:	cmp	ip, r1
    2e18:	bne.n	2e0a <_malloc_r+0x39a>
    2e1a:	ldr.w	ip, [r1, #12]
    2e1e:	ldr	r2, [r7, #4]
    2e20:	str.w	ip, [r4, #12]
    2e24:	str	r1, [r4, #8]
    2e26:	str.w	r4, [ip, #8]
    2e2a:	str	r4, [r1, #12]
    2e2c:	b.n	2b40 <_malloc_r+0xd0>
    2e2e:	adds	r3, r4, r5
    2e30:	orr.w	r7, r2, #1
    2e34:	orr.w	r5, r5, #1
    2e38:	str	r5, [r4, #4]
    2e3a:	mov	r0, r6
    2e3c:	str	r3, [r1, #20]
    2e3e:	str	r3, [r1, #16]
    2e40:	str.w	lr, [r3, #12]
    2e44:	str.w	lr, [r3, #8]
    2e48:	str	r7, [r3, #4]
    2e4a:	str	r2, [r3, r2]
    2e4c:	adds	r4, #8
    2e4e:	bl	3080 <__malloc_unlock>
    2e52:	b.n	2c00 <_malloc_r+0x190>
    2e54:	ldr	r2, [r1, #4]
    2e56:	b.n	2b40 <_malloc_r+0xd0>
    2e58:	add.w	r8, r8, #1
    2e5c:	tst.w	r8, #3
    2e60:	add.w	ip, ip, #8
    2e64:	bne.w	2b66 <_malloc_r+0xf6>
    2e68:	b.n	2ecc <_malloc_r+0x45c>
    2e6a:	ldr	r4, [r3, #12]
    2e6c:	cmp	r3, r4
    2e6e:	it	eq
    2e70:	addeq	r0, #2
    2e72:	beq.w	2ae0 <_malloc_r+0x70>
    2e76:	b.n	2be0 <_malloc_r+0x170>
    2e78:	add	r3, r1
    2e7a:	mov	r4, r1
    2e7c:	ldr	r2, [r3, #4]
    2e7e:	ldr	r1, [r1, #12]
    2e80:	ldr.w	r5, [r4, #8]!
    2e84:	orr.w	r2, r2, #1
    2e88:	str	r2, [r3, #4]
    2e8a:	mov	r0, r6
    2e8c:	str	r1, [r5, #12]
    2e8e:	str	r5, [r1, #8]
    2e90:	bl	3080 <__malloc_unlock>
    2e94:	b.n	2c00 <_malloc_r+0x190>
    2e96:	add.w	lr, r3, #92	; 0x5c
    2e9a:	add.w	r0, r3, #91	; 0x5b
    2e9e:	mov.w	r3, lr, lsl #1
    2ea2:	b.n	2ab4 <_malloc_r+0x44>
    2ea4:	lsrs	r2, r3, #6
    2ea6:	add.w	r1, r2, #57	; 0x39
    2eaa:	lsls	r1, r1, #1
    2eac:	adds	r2, #56	; 0x38
    2eae:	b.n	2df4 <_malloc_r+0x384>
    2eb0:	cmp	r4, r7
    2eb2:	ldr	r3, [pc, #296]	; (2fdc <_malloc_r+0x56c>)
    2eb4:	beq.w	2cb8 <_malloc_r+0x248>
    2eb8:	ldr	r4, [r3, #8]
    2eba:	ldr	r2, [r4, #4]
    2ebc:	bic.w	r2, r2, #3
    2ec0:	b.n	2d78 <_malloc_r+0x308>
    2ec2:	ldr.w	r3, [r9], #-8
    2ec6:	cmp	r9, r3
    2ec8:	bne.w	2fd0 <_malloc_r+0x560>
    2ecc:	tst.w	r0, #3
    2ed0:	add.w	r0, r0, #4294967295
    2ed4:	bne.n	2ec2 <_malloc_r+0x452>
    2ed6:	ldr	r3, [r7, #4]
    2ed8:	bic.w	r3, r3, r4
    2edc:	str	r3, [r7, #4]
    2ede:	lsls	r4, r4, #1
    2ee0:	cmp	r4, r3
    2ee2:	bhi.w	2c60 <_malloc_r+0x1f0>
    2ee6:	cmp	r4, #0
    2ee8:	beq.w	2c60 <_malloc_r+0x1f0>
    2eec:	tst	r4, r3
    2eee:	mov	r0, r8
    2ef0:	bne.w	2b5e <_malloc_r+0xee>
    2ef4:	lsls	r4, r4, #1
    2ef6:	tst	r4, r3
    2ef8:	add.w	r0, r0, #4
    2efc:	beq.n	2ef4 <_malloc_r+0x484>
    2efe:	b.n	2b5e <_malloc_r+0xee>
    2f00:	cmp.w	r3, #340	; 0x154
    2f04:	bhi.n	2f38 <_malloc_r+0x4c8>
    2f06:	lsrs	r0, r5, #15
    2f08:	add.w	lr, r0, #120	; 0x78
    2f0c:	mov.w	r3, lr, lsl #1
    2f10:	adds	r0, #119	; 0x77
    2f12:	b.n	2ab4 <_malloc_r+0x44>
    2f14:	mov.w	r1, #4096	; 0x1000
    2f18:	b.n	2cf2 <_malloc_r+0x282>
    2f1a:	movs	r1, #1
    2f1c:	ldr.w	r3, [r8, #4]
    2f20:	asrs	r2, r2, #2
    2f22:	lsl.w	r2, r1, r2
    2f26:	orrs	r2, r3
    2f28:	str.w	r2, [r8, #4]
    2f2c:	mov	r1, ip
    2f2e:	b.n	2e20 <_malloc_r+0x3b0>
    2f30:	movs	r3, #1
    2f32:	str.w	r3, [fp, #4]
    2f36:	b.n	2d84 <_malloc_r+0x314>
    2f38:	movw	r2, #1364	; 0x554
    2f3c:	cmp	r3, r2
    2f3e:	bhi.n	2f82 <_malloc_r+0x512>
    2f40:	lsrs	r0, r5, #18
    2f42:	add.w	lr, r0, #125	; 0x7d
    2f46:	mov.w	r3, lr, lsl #1
    2f4a:	adds	r0, #124	; 0x7c
    2f4c:	b.n	2ab4 <_malloc_r+0x44>
    2f4e:	adds	r2, #16
    2f50:	b.n	2c9c <_malloc_r+0x22c>
    2f52:	cmp	r2, #84	; 0x54
    2f54:	bhi.n	2fa4 <_malloc_r+0x534>
    2f56:	lsrs	r2, r3, #12
    2f58:	add.w	r1, r2, #111	; 0x6f
    2f5c:	lsls	r1, r1, #1
    2f5e:	adds	r2, #110	; 0x6e
    2f60:	b.n	2df4 <_malloc_r+0x384>
    2f62:	ldr	r4, [r7, #8]
    2f64:	ldr	r2, [r4, #4]
    2f66:	bic.w	r2, r2, #3
    2f6a:	b.n	2d78 <_malloc_r+0x308>
    2f6c:	ubfx	r0, sl, #0, #12
    2f70:	cmp	r0, #0
    2f72:	bne.w	2cc6 <_malloc_r+0x256>
    2f76:	add	r2, r8
    2f78:	ldr	r3, [r7, #8]
    2f7a:	orr.w	r2, r2, #1
    2f7e:	str	r2, [r3, #4]
    2f80:	b.n	2d5c <_malloc_r+0x2ec>
    2f82:	movs	r3, #254	; 0xfe
    2f84:	mov.w	lr, #127	; 0x7f
    2f88:	movs	r0, #126	; 0x7e
    2f8a:	b.n	2ab4 <_malloc_r+0x44>
    2f8c:	movs	r2, #1
    2f8e:	mov.w	r9, #0
    2f92:	b.n	2d18 <_malloc_r+0x2a8>
    2f94:	add.w	r1, r4, #8
    2f98:	mov	r0, r6
    2f9a:	bl	31e8 <_free_r>
    2f9e:	ldr.w	r1, [r9]
    2fa2:	b.n	2d5c <_malloc_r+0x2ec>
    2fa4:	cmp.w	r2, #340	; 0x154
    2fa8:	bhi.n	2fb6 <_malloc_r+0x546>
    2faa:	lsrs	r2, r3, #15
    2fac:	add.w	r1, r2, #120	; 0x78
    2fb0:	lsls	r1, r1, #1
    2fb2:	adds	r2, #119	; 0x77
    2fb4:	b.n	2df4 <_malloc_r+0x384>
    2fb6:	movw	r1, #1364	; 0x554
    2fba:	cmp	r2, r1
    2fbc:	bhi.n	2fca <_malloc_r+0x55a>
    2fbe:	lsrs	r2, r3, #18
    2fc0:	add.w	r1, r2, #125	; 0x7d
    2fc4:	lsls	r1, r1, #1
    2fc6:	adds	r2, #124	; 0x7c
    2fc8:	b.n	2df4 <_malloc_r+0x384>
    2fca:	movs	r1, #254	; 0xfe
    2fcc:	movs	r2, #126	; 0x7e
    2fce:	b.n	2df4 <_malloc_r+0x384>
    2fd0:	ldr	r3, [r7, #4]
    2fd2:	b.n	2ede <_malloc_r+0x46e>
    2fd4:	lsrs	r0, r5, #3
    2fd6:	adds	r3, r0, #1
    2fd8:	lsls	r3, r3, #1
    2fda:	b.n	2bce <_malloc_r+0x15e>
    2fdc:	.word	0x20000a3c

00002fe0 <memset>:
    2fe0:	push	{r4, r5, r6}
    2fe2:	lsls	r4, r0, #30
    2fe4:	beq.n	3074 <memset+0x94>
    2fe6:	subs	r4, r2, #1
    2fe8:	cmp	r2, #0
    2fea:	beq.n	3070 <memset+0x90>
    2fec:	uxtb	r5, r1
    2fee:	mov	r3, r0
    2ff0:	b.n	2ff8 <memset+0x18>
    2ff2:	subs	r2, r4, #1
    2ff4:	cbz	r4, 3070 <memset+0x90>
    2ff6:	mov	r4, r2
    2ff8:	strb.w	r5, [r3], #1
    2ffc:	lsls	r2, r3, #30
    2ffe:	bne.n	2ff2 <memset+0x12>
    3000:	cmp	r4, #3
    3002:	bls.n	3062 <memset+0x82>
    3004:	uxtb	r5, r1
    3006:	orr.w	r5, r5, r5, lsl #8
    300a:	cmp	r4, #15
    300c:	orr.w	r5, r5, r5, lsl #16
    3010:	bls.n	3046 <memset+0x66>
    3012:	add.w	r2, r3, #16
    3016:	mov	r6, r4
    3018:	subs	r6, #16
    301a:	cmp	r6, #15
    301c:	str.w	r5, [r2, #-16]
    3020:	str.w	r5, [r2, #-12]
    3024:	str.w	r5, [r2, #-8]
    3028:	str.w	r5, [r2, #-4]
    302c:	add.w	r2, r2, #16
    3030:	bhi.n	3018 <memset+0x38>
    3032:	sub.w	r2, r4, #16
    3036:	bic.w	r2, r2, #15
    303a:	and.w	r4, r4, #15
    303e:	adds	r2, #16
    3040:	cmp	r4, #3
    3042:	add	r3, r2
    3044:	bls.n	3062 <memset+0x82>
    3046:	mov	r6, r3
    3048:	mov	r2, r4
    304a:	subs	r2, #4
    304c:	cmp	r2, #3
    304e:	str.w	r5, [r6], #4
    3052:	bhi.n	304a <memset+0x6a>
    3054:	subs	r2, r4, #4
    3056:	bic.w	r2, r2, #3
    305a:	adds	r2, #4
    305c:	add	r3, r2
    305e:	and.w	r4, r4, #3
    3062:	cbz	r4, 3070 <memset+0x90>
    3064:	uxtb	r1, r1
    3066:	add	r4, r3
    3068:	strb.w	r1, [r3], #1
    306c:	cmp	r3, r4
    306e:	bne.n	3068 <memset+0x88>
    3070:	pop	{r4, r5, r6}
    3072:	bx	lr
    3074:	mov	r4, r2
    3076:	mov	r3, r0
    3078:	b.n	3000 <memset+0x20>
    307a:	nop

0000307c <__malloc_lock>:
    307c:	bx	lr
    307e:	nop

00003080 <__malloc_unlock>:
    3080:	bx	lr
    3082:	nop

00003084 <_sbrk_r>:
    3084:	push	{r3, r4, r5, lr}
    3086:	ldr	r4, [pc, #28]	; (30a4 <_sbrk_r+0x20>)
    3088:	movs	r3, #0
    308a:	mov	r5, r0
    308c:	mov	r0, r1
    308e:	str	r3, [r4, #0]
    3090:	bl	215c <_sbrk>
    3094:	adds	r3, r0, #1
    3096:	beq.n	309a <_sbrk_r+0x16>
    3098:	pop	{r3, r4, r5, pc}
    309a:	ldr	r3, [r4, #0]
    309c:	cmp	r3, #0
    309e:	beq.n	3098 <_sbrk_r+0x14>
    30a0:	str	r3, [r5, #0]
    30a2:	pop	{r3, r4, r5, pc}
    30a4:	.word	0x200036c0

000030a8 <__register_exitproc>:
    30a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30ac:	ldr	r4, [pc, #148]	; (3144 <__register_exitproc+0x9c>)
    30ae:	ldr	r5, [r4, #0]
    30b0:	ldr.w	r4, [r5, #328]	; 0x148
    30b4:	mov	r6, r0
    30b6:	mov	r8, r1
    30b8:	mov	sl, r2
    30ba:	mov	r9, r3
    30bc:	cbz	r4, 3130 <__register_exitproc+0x88>
    30be:	ldr	r0, [r4, #4]
    30c0:	cmp	r0, #31
    30c2:	bgt.n	30f4 <__register_exitproc+0x4c>
    30c4:	adds	r3, r0, #1
    30c6:	cbz	r6, 30e6 <__register_exitproc+0x3e>
    30c8:	add.w	r5, r4, r0, lsl #2
    30cc:	movs	r2, #1
    30ce:	str.w	sl, [r5, #136]	; 0x88
    30d2:	ldr.w	r1, [r4, #392]	; 0x188
    30d6:	lsls	r2, r0
    30d8:	orrs	r1, r2
    30da:	cmp	r6, #2
    30dc:	str.w	r1, [r4, #392]	; 0x188
    30e0:	str.w	r9, [r5, #264]	; 0x108
    30e4:	beq.n	3124 <__register_exitproc+0x7c>
    30e6:	adds	r0, #2
    30e8:	str	r3, [r4, #4]
    30ea:	str.w	r8, [r4, r0, lsl #2]
    30ee:	movs	r0, #0
    30f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30f4:	ldr	r3, [pc, #80]	; (3148 <__register_exitproc+0xa0>)
    30f6:	cbz	r3, 313a <__register_exitproc+0x92>
    30f8:	mov.w	r0, #400	; 0x190
    30fc:	bl	2a60 <malloc>
    3100:	mov	r4, r0
    3102:	cbz	r0, 313a <__register_exitproc+0x92>
    3104:	ldr.w	r3, [r5, #328]	; 0x148
    3108:	movs	r7, #0
    310a:	stmia.w	r0, {r3, r7}
    310e:	str.w	r4, [r5, #328]	; 0x148
    3112:	mov	r0, r7
    3114:	movs	r3, #1
    3116:	str.w	r7, [r4, #392]	; 0x188
    311a:	str.w	r7, [r4, #396]	; 0x18c
    311e:	cmp	r6, #0
    3120:	beq.n	30e6 <__register_exitproc+0x3e>
    3122:	b.n	30c8 <__register_exitproc+0x20>
    3124:	ldr.w	r1, [r4, #396]	; 0x18c
    3128:	orrs	r2, r1
    312a:	str.w	r2, [r4, #396]	; 0x18c
    312e:	b.n	30e6 <__register_exitproc+0x3e>
    3130:	add.w	r4, r5, #332	; 0x14c
    3134:	str.w	r4, [r5, #328]	; 0x148
    3138:	b.n	30be <__register_exitproc+0x16>
    313a:	mov.w	r0, #4294967295
    313e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3142:	nop
    3144:	.word	0x20000568
    3148:	.word	0x00002a61

0000314c <_malloc_trim_r>:
    314c:	push	{r3, r4, r5, r6, r7, lr}
    314e:	ldr	r7, [pc, #140]	; (31dc <_malloc_trim_r+0x90>)
    3150:	mov	r4, r1
    3152:	mov	r6, r0
    3154:	bl	307c <__malloc_lock>
    3158:	ldr	r3, [r7, #8]
    315a:	ldr	r5, [r3, #4]
    315c:	bic.w	r5, r5, #3
    3160:	subs	r1, r5, r4
    3162:	addw	r1, r1, #4079	; 0xfef
    3166:	bic.w	r1, r1, #4080	; 0xff0
    316a:	bic.w	r1, r1, #15
    316e:	sub.w	r4, r1, #4096	; 0x1000
    3172:	cmp.w	r4, #4096	; 0x1000
    3176:	blt.n	3188 <_malloc_trim_r+0x3c>
    3178:	movs	r1, #0
    317a:	mov	r0, r6
    317c:	bl	3084 <_sbrk_r>
    3180:	ldr	r3, [r7, #8]
    3182:	add	r3, r5
    3184:	cmp	r0, r3
    3186:	beq.n	3192 <_malloc_trim_r+0x46>
    3188:	mov	r0, r6
    318a:	bl	3080 <__malloc_unlock>
    318e:	movs	r0, #0
    3190:	pop	{r3, r4, r5, r6, r7, pc}
    3192:	negs	r1, r4
    3194:	mov	r0, r6
    3196:	bl	3084 <_sbrk_r>
    319a:	adds	r0, #1
    319c:	beq.n	31ba <_malloc_trim_r+0x6e>
    319e:	ldr	r3, [pc, #64]	; (31e0 <_malloc_trim_r+0x94>)
    31a0:	ldr	r2, [r7, #8]
    31a2:	ldr	r1, [r3, #0]
    31a4:	subs	r5, r5, r4
    31a6:	orr.w	r5, r5, #1
    31aa:	mov	r0, r6
    31ac:	subs	r1, r1, r4
    31ae:	str	r5, [r2, #4]
    31b0:	str	r1, [r3, #0]
    31b2:	bl	3080 <__malloc_unlock>
    31b6:	movs	r0, #1
    31b8:	pop	{r3, r4, r5, r6, r7, pc}
    31ba:	movs	r1, #0
    31bc:	mov	r0, r6
    31be:	bl	3084 <_sbrk_r>
    31c2:	ldr	r2, [r7, #8]
    31c4:	subs	r3, r0, r2
    31c6:	cmp	r3, #15
    31c8:	ble.n	3188 <_malloc_trim_r+0x3c>
    31ca:	ldr	r4, [pc, #24]	; (31e4 <_malloc_trim_r+0x98>)
    31cc:	ldr	r1, [pc, #16]	; (31e0 <_malloc_trim_r+0x94>)
    31ce:	ldr	r4, [r4, #0]
    31d0:	orr.w	r3, r3, #1
    31d4:	subs	r0, r0, r4
    31d6:	str	r3, [r2, #4]
    31d8:	str	r0, [r1, #0]
    31da:	b.n	3188 <_malloc_trim_r+0x3c>
    31dc:	.word	0x20000a3c
    31e0:	.word	0x20001398
    31e4:	.word	0x20000e48

000031e8 <_free_r>:
    31e8:	cmp	r1, #0
    31ea:	beq.n	3278 <_free_r+0x90>
    31ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31f0:	mov	r5, r1
    31f2:	mov	r8, r0
    31f4:	bl	307c <__malloc_lock>
    31f8:	ldr.w	r7, [r5, #-4]
    31fc:	ldr	r1, [pc, #424]	; (33a8 <_free_r+0x1c0>)
    31fe:	bic.w	r3, r7, #1
    3202:	sub.w	r4, r5, #8
    3206:	adds	r2, r4, r3
    3208:	ldr	r6, [r1, #8]
    320a:	ldr	r0, [r2, #4]
    320c:	cmp	r2, r6
    320e:	bic.w	r0, r0, #3
    3212:	beq.n	32da <_free_r+0xf2>
    3214:	lsls	r6, r7, #31
    3216:	str	r0, [r2, #4]
    3218:	bmi.n	3232 <_free_r+0x4a>
    321a:	ldr.w	r7, [r5, #-8]
    321e:	subs	r4, r4, r7
    3220:	add.w	lr, r1, #8
    3224:	ldr	r5, [r4, #8]
    3226:	cmp	r5, lr
    3228:	add	r3, r7
    322a:	beq.n	330c <_free_r+0x124>
    322c:	ldr	r7, [r4, #12]
    322e:	str	r7, [r5, #12]
    3230:	str	r5, [r7, #8]
    3232:	adds	r5, r2, r0
    3234:	ldr	r5, [r5, #4]
    3236:	lsls	r5, r5, #31
    3238:	bpl.n	32c0 <_free_r+0xd8>
    323a:	orr.w	r2, r3, #1
    323e:	str	r2, [r4, #4]
    3240:	str	r3, [r4, r3]
    3242:	cmp.w	r3, #512	; 0x200
    3246:	bcs.n	327a <_free_r+0x92>
    3248:	lsrs	r3, r3, #3
    324a:	adds	r2, r3, #1
    324c:	ldr	r5, [r1, #4]
    324e:	ldr.w	r7, [r1, r2, lsl #3]
    3252:	str	r7, [r4, #8]
    3254:	movs	r0, #1
    3256:	asrs	r3, r3, #2
    3258:	lsl.w	r3, r0, r3
    325c:	add.w	r0, r1, r2, lsl #3
    3260:	orrs	r5, r3
    3262:	subs	r0, #8
    3264:	str	r0, [r4, #12]
    3266:	str	r5, [r1, #4]
    3268:	str.w	r4, [r1, r2, lsl #3]
    326c:	str	r4, [r7, #12]
    326e:	mov	r0, r8
    3270:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3274:	b.w	3080 <__malloc_unlock>
    3278:	bx	lr
    327a:	lsrs	r2, r3, #9
    327c:	cmp	r2, #4
    327e:	bhi.n	3328 <_free_r+0x140>
    3280:	lsrs	r2, r3, #6
    3282:	add.w	r7, r2, #57	; 0x39
    3286:	lsls	r7, r7, #1
    3288:	add.w	r5, r2, #56	; 0x38
    328c:	add.w	r0, r1, r7, lsl #2
    3290:	ldr.w	r2, [r1, r7, lsl #2]
    3294:	ldr	r1, [pc, #272]	; (33a8 <_free_r+0x1c0>)
    3296:	subs	r0, #8
    3298:	cmp	r0, r2
    329a:	beq.n	3338 <_free_r+0x150>
    329c:	ldr	r1, [r2, #4]
    329e:	bic.w	r1, r1, #3
    32a2:	cmp	r3, r1
    32a4:	bcs.n	32ac <_free_r+0xc4>
    32a6:	ldr	r2, [r2, #8]
    32a8:	cmp	r0, r2
    32aa:	bne.n	329c <_free_r+0xb4>
    32ac:	ldr	r0, [r2, #12]
    32ae:	str	r0, [r4, #12]
    32b0:	str	r2, [r4, #8]
    32b2:	str	r4, [r0, #8]
    32b4:	str	r4, [r2, #12]
    32b6:	mov	r0, r8
    32b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    32bc:	b.w	3080 <__malloc_unlock>
    32c0:	ldr	r5, [r2, #8]
    32c2:	ldr	r7, [pc, #232]	; (33ac <_free_r+0x1c4>)
    32c4:	cmp	r5, r7
    32c6:	add	r3, r0
    32c8:	beq.n	334a <_free_r+0x162>
    32ca:	ldr	r0, [r2, #12]
    32cc:	str	r0, [r5, #12]
    32ce:	orr.w	r2, r3, #1
    32d2:	str	r5, [r0, #8]
    32d4:	str	r2, [r4, #4]
    32d6:	str	r3, [r4, r3]
    32d8:	b.n	3242 <_free_r+0x5a>
    32da:	lsls	r7, r7, #31
    32dc:	add	r3, r0
    32de:	bmi.n	32f0 <_free_r+0x108>
    32e0:	ldr.w	r2, [r5, #-8]
    32e4:	subs	r4, r4, r2
    32e6:	add	r3, r2
    32e8:	ldr	r0, [r4, #8]
    32ea:	ldr	r2, [r4, #12]
    32ec:	str	r2, [r0, #12]
    32ee:	str	r0, [r2, #8]
    32f0:	ldr	r2, [pc, #188]	; (33b0 <_free_r+0x1c8>)
    32f2:	ldr	r2, [r2, #0]
    32f4:	orr.w	r0, r3, #1
    32f8:	cmp	r3, r2
    32fa:	str	r0, [r4, #4]
    32fc:	str	r4, [r1, #8]
    32fe:	bcc.n	326e <_free_r+0x86>
    3300:	ldr	r3, [pc, #176]	; (33b4 <_free_r+0x1cc>)
    3302:	mov	r0, r8
    3304:	ldr	r1, [r3, #0]
    3306:	bl	314c <_malloc_trim_r>
    330a:	b.n	326e <_free_r+0x86>
    330c:	adds	r1, r2, r0
    330e:	ldr	r1, [r1, #4]
    3310:	lsls	r1, r1, #31
    3312:	bmi.n	339e <_free_r+0x1b6>
    3314:	ldr	r1, [r2, #8]
    3316:	ldr	r2, [r2, #12]
    3318:	str	r2, [r1, #12]
    331a:	add	r3, r0
    331c:	orr.w	r0, r3, #1
    3320:	str	r1, [r2, #8]
    3322:	str	r0, [r4, #4]
    3324:	str	r3, [r4, r3]
    3326:	b.n	326e <_free_r+0x86>
    3328:	cmp	r2, #20
    332a:	bhi.n	335c <_free_r+0x174>
    332c:	add.w	r7, r2, #92	; 0x5c
    3330:	lsls	r7, r7, #1
    3332:	add.w	r5, r2, #91	; 0x5b
    3336:	b.n	328c <_free_r+0xa4>
    3338:	asrs	r2, r5, #2
    333a:	ldr	r3, [r1, #4]
    333c:	movs	r5, #1
    333e:	lsl.w	r2, r5, r2
    3342:	orrs	r3, r2
    3344:	str	r3, [r1, #4]
    3346:	mov	r2, r0
    3348:	b.n	32ae <_free_r+0xc6>
    334a:	orr.w	r2, r3, #1
    334e:	str	r4, [r1, #20]
    3350:	str	r4, [r1, #16]
    3352:	str	r5, [r4, #12]
    3354:	str	r5, [r4, #8]
    3356:	str	r2, [r4, #4]
    3358:	str	r3, [r4, r3]
    335a:	b.n	326e <_free_r+0x86>
    335c:	cmp	r2, #84	; 0x54
    335e:	bhi.n	336e <_free_r+0x186>
    3360:	lsrs	r2, r3, #12
    3362:	add.w	r7, r2, #111	; 0x6f
    3366:	lsls	r7, r7, #1
    3368:	add.w	r5, r2, #110	; 0x6e
    336c:	b.n	328c <_free_r+0xa4>
    336e:	cmp.w	r2, #340	; 0x154
    3372:	bhi.n	3382 <_free_r+0x19a>
    3374:	lsrs	r2, r3, #15
    3376:	add.w	r7, r2, #120	; 0x78
    337a:	lsls	r7, r7, #1
    337c:	add.w	r5, r2, #119	; 0x77
    3380:	b.n	328c <_free_r+0xa4>
    3382:	movw	r0, #1364	; 0x554
    3386:	cmp	r2, r0
    3388:	bhi.n	3398 <_free_r+0x1b0>
    338a:	lsrs	r2, r3, #18
    338c:	add.w	r7, r2, #125	; 0x7d
    3390:	lsls	r7, r7, #1
    3392:	add.w	r5, r2, #124	; 0x7c
    3396:	b.n	328c <_free_r+0xa4>
    3398:	movs	r7, #254	; 0xfe
    339a:	movs	r5, #126	; 0x7e
    339c:	b.n	328c <_free_r+0xa4>
    339e:	orr.w	r2, r3, #1
    33a2:	str	r2, [r4, #4]
    33a4:	str	r3, [r4, r3]
    33a6:	b.n	326e <_free_r+0x86>
    33a8:	.word	0x20000a3c
    33ac:	.word	0x20000a44
    33b0:	.word	0x20000e44
    33b4:	.word	0x20001394

000033b8 <___init_veneer>:
    33b8:	ldr.w	pc, [pc]	; 33bc <___init_veneer+0x4>
    33bc:	.word	0x60001aa9

Disassembly of section .fini:

000033c0 <_fini>:
    33c0:	push	{r3, r4, r5, r6, r7, lr}
    33c2:	nop
