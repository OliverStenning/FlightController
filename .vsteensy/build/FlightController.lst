
.vsteensy/build/FlightController.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	................
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`H.......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #476]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #476]	; (60001218 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #476]	; (6000121c <ResetHandler+0x1e8>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #476]	; (60001220 <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #472]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	ldr	r1, [pc, #472]	; (60001228 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	ldr	r3, [pc, #464]	; (6000122c <ResetHandler+0x1f8>)
6000105c:	cmp	r2, r3
6000105e:	bcs.n	6000107a <ResetHandler+0x46>
60001060:	mvns	r4, r2
60001062:	mov	r0, r1
60001064:	add	r3, r4
60001066:	bic.w	r3, r3, #3
6000106a:	adds	r3, #4
6000106c:	add	r3, r1
		*dest++ = *src++;
6000106e:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	cmp	r0, r3
		*dest++ = *src++;
60001074:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	ldr	r2, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107c:	ldr	r1, [pc, #436]	; (60001234 <ResetHandler+0x200>)
6000107e:	cmp	r2, r1
60001080:	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	ldr	r3, [pc, #436]	; (60001238 <ResetHandler+0x204>)
60001084:	cmp	r2, r3
60001086:	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	mvns	r4, r2
6000108a:	mov	r0, r1
6000108c:	add	r3, r4
6000108e:	bic.w	r3, r3, #3
60001092:	adds	r3, #4
60001094:	add	r3, r1
		*dest++ = *src++;
60001096:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	cmp	r0, r3
		*dest++ = *src++;
6000109c:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	ldr	r2, [pc, #408]	; (6000123c <ResetHandler+0x208>)
600010a4:	ldr	r3, [pc, #408]	; (60001240 <ResetHandler+0x20c>)
600010a6:	cmp	r2, r3
600010a8:	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	mvns	r0, r2
600010ac:	mov	r1, r2
		*dest++ = 0;
600010ae:	movs	r4, #0
600010b0:	add	r3, r0
600010b2:	bic.w	r3, r3, #3
600010b6:	adds	r3, #4
600010b8:	add	r3, r2
600010ba:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	cmp	r3, r1
600010c0:	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	ldr	r2, [pc, #384]	; (60001244 <ResetHandler+0x210>)
600010c4:	mov.w	r1, #15728640	; 0xf00000
600010c8:	ldr	r3, [pc, #380]	; (60001248 <ResetHandler+0x214>)
600010ca:	str	r1, [r2, #0]
600010cc:	add.w	r1, r3, #704	; 0x2c0
600010d0:	ldr	r2, [pc, #376]	; (6000124c <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	str.w	r2, [r3, #4]!
600010d6:	cmp	r1, r3
600010d8:	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	ldr	r3, [pc, #372]	; (60001250 <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	movs	r1, #128	; 0x80
600010de:	ldr	r2, [pc, #372]	; (60001254 <ResetHandler+0x220>)
600010e0:	strb.w	r1, [r3], #1
600010e4:	cmp	r3, r2
600010e6:	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	ldr	r4, [pc, #364]	; (60001258 <ResetHandler+0x224>)
600010ea:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	ldr	r6, [pc, #364]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	ldr.w	sl, [pc, #420]	; 6000129c <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	ldr.w	r9, [pc, #420]	; 600012a0 <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	ldr.w	r8, [pc, #420]	; 600012a4 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	ldr	r3, [pc, #348]	; (60001260 <ResetHandler+0x22c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	ldr	r1, [pc, #268]	; (60001214 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	ldr	r3, [r6, #28]
6000111c:	bic.w	r3, r3, #127	; 0x7f
60001120:	orr.w	r3, r3, #64	; 0x40
60001124:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	ldr	r3, [r6, #36]	; 0x24
60001128:	bic.w	r3, r3, #127	; 0x7f
6000112c:	orr.w	r3, r3, #64	; 0x40
60001130:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	bl	60001394 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	ldr	r2, [pc, #292]	; (60001264 <ResetHandler+0x230>)
60001140:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	ldr	r3, [pc, #292]	; (60001268 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	ldr	r1, [pc, #292]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r1, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	ldr	r0, [pc, #284]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	ldr	r2, [pc, #280]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	ldr	r0, [pc, #276]	; (60001280 <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	ldr	r1, [pc, #272]	; (60001284 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	orr.w	r3, r3, #1
60001176:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	ldr	r3, [r0, #0]
6000117a:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	bl	60001808 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	ldr	r0, [pc, #256]	; (60001288 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	bl	60001ba0 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	nop
60001198:	nop
6000119a:	nop
6000119c:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	ldr	r2, [pc, #232]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	ldr	r3, [pc, #232]	; (60001290 <ResetHandler+0x25c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	ldr	r2, [r3, #56]	; 0x38
600011be:	lsls	r2, r2, #31
600011c0:	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	ldr	r1, [pc, #204]	; (60001294 <ResetHandler+0x260>)
600011c8:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	ldr	r2, [r3, #56]	; 0x38
600011ce:	orr.w	r2, r2, #1
600011d2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	ldr	r2, [pc, #184]	; (60001290 <ResetHandler+0x25c>)
600011d6:	ldr	r4, [pc, #192]	; (60001298 <ResetHandler+0x264>)
600011d8:	ldr	r3, [r2, #8]
600011da:	orr.w	r3, r3, #65537	; 0x10001
600011de:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011e0:	bl	6000148c <configure_external_ram>
#endif
	startup_early_hook();
600011e4:	bl	60001bd8 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e8:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011ea:	cmp	r3, #19
600011ec:	bls.n	600011e8 <ResetHandler+0x1b4>
	usb_init();
600011ee:	bl	600012a8 <usb_init>
	analog_init();
600011f2:	bl	60001988 <analog_init>
	pwm_init();
600011f6:	bl	60001ba8 <__pwm_init_veneer>
	tempmon_init();
600011fa:	bl	6000186c <tempmon_init>

	startup_late_hook();
600011fe:	bl	60001bb0 <__startup_late_hook_veneer>
60001202:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001204:	cmp.w	r3, #300	; 0x12c
60001208:	bcc.n	60001202 <ResetHandler+0x1ce>
	//printf("before C++ constructors\n");
	__libc_init_array();
6000120a:	bl	60001bb8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120e:	bl	60001bd0 <__main_veneer>
60001212:	b.n	60001212 <ResetHandler+0x1de>
60001214:	.word	0x400ac000
60001218:	.word	0xaaaaaaaf
6000121c:	.word	0x00200007
60001220:	.word	0x20070000
60001224:	.word	0x00000000
60001228:	.word	0x60001c00
6000122c:	.word	0x00009528
60001230:	.word	0x20000000
60001234:	.word	0x6000b12c
60001238:	.word	0x20001520
6000123c:	.word	0x20001520
60001240:	.word	0x20003700
60001244:	.word	0xe000ed88
60001248:	.word	0x200033fc
6000124c:	.word	0x000039f9
60001250:	.word	0xe000e400
60001254:	.word	0xe000e4a0
60001258:	.word	0x400d8000
6000125c:	.word	0x400fc000
60001260:	.word	0xe000ed08
60001264:	.word	0xe000e014
60001268:	.word	0xe000e018
6000126c:	.word	0x000043f9
60001270:	.word	0xe000edfc
60001274:	.word	0x20200000
60001278:	.word	0x000043fd
6000127c:	.word	0xe0001000
60001280:	.word	0xe0001004
60001284:	.word	0x20001adc
60001288:	.word	0x23c34600
6000128c:	.word	0x40084000
60001290:	.word	0x400d4000
60001294:	.word	0x56c00000
60001298:	.word	0x20001ae4
6000129c:	.word	0x20003400
600012a0:	.word	0x2018101b
600012a4:	.word	0x13110d0c

600012a8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a8:	ldr	r3, [pc, #192]	; (6000136c <usb_init+0xc4>)
600012aa:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600012ae:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012b0:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012b4:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012b8:	bl	60001bc0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012bc:	ldr	r1, [pc, #176]	; (60001370 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012be:	ldr	r0, [pc, #180]	; (60001374 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c0:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c4:	ldr	r4, [pc, #176]	; (60001378 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012c6:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012ca:	ldr	r3, [pc, #176]	; (6000137c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012cc:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012d0:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012d4:	ldr	r2, [r4, #0]
600012d6:	ands	r3, r2
600012d8:	cbnz	r3, 600012e2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012da:	ldr.w	r3, [r0, #424]	; 0x1a8
600012de:	lsls	r2, r3, #30
600012e0:	beq.n	60001318 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012e2:	ldr	r3, [pc, #144]	; (60001374 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012e4:	mov.w	r1, #2147483648	; 0x80000000
600012e8:	ldr	r2, [pc, #140]	; (60001378 <usb_init+0xd0>)
600012ea:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ec:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012ee:	ldr.w	r1, [r3, #320]	; 0x140
600012f2:	orr.w	r1, r1, #2
600012f6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012fa:	ldr.w	r3, [r2, #320]	; 0x140
600012fe:	lsls	r3, r3, #30
60001300:	bmi.n	600012fa <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001302:	mov.w	r0, #131072	; 0x20000
60001306:	ldr	r1, [pc, #120]	; (60001380 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001308:	ldr	r3, [pc, #108]	; (60001378 <usb_init+0xd0>)
6000130a:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000130e:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001310:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001312:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001314:	bl	60001bc8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001318:	ldr	r5, [pc, #104]	; (60001384 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131a:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000131c:	ldr	r3, [pc, #88]	; (60001378 <usb_init+0xd0>)
6000131e:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001322:	ldr	r4, [pc, #80]	; (60001374 <usb_init+0xcc>)
60001324:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001326:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001328:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000132a:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000132c:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000132e:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001332:	mov.w	r2, #640	; 0x280
60001336:	bl	60001b98 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133a:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000133e:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001342:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001346:	ldr	r2, [pc, #64]	; (60001388 <usb_init+0xe0>)
60001348:	ldr	r1, [pc, #64]	; (6000138c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000134a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000134c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000134e:	str.w	r5, [r4, #344]	; 0x158
60001352:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001356:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000135a:	ldr	r2, [pc, #52]	; (60001390 <usb_init+0xe8>)
6000135c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001360:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001362:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001364:	str.w	r3, [r4, #320]	; 0x140
60001368:	pop	{r4, r5, r6, pc}
6000136a:	nop
6000136c:	.word	0x400d8000
60001370:	.word	0x400fc000
60001374:	.word	0x402e0000
60001378:	.word	0x400d9000
6000137c:	.word	0x001e1c00
60001380:	.word	0xe000e28c
60001384:	.word	0x20003000
60001388:	.word	0x20003400
6000138c:	.word	0x0000311d
60001390:	.word	0xe000e10c

60001394 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001394:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001396:	ldr	r2, [pc, #160]	; (60001438 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001398:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000139a:	ldr	r3, [pc, #160]	; (6000143c <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000139c:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013a0:	ldr	r4, [pc, #156]	; (60001440 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013a2:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013a4:	ldr.w	lr, [pc, #216]	; 60001480 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013a8:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600013aa:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600013ac:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600013ae:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013b2:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013b6:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013b8:	ldr.w	lr, [pc, #200]	; 60001484 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013bc:	ldr	r7, [pc, #132]	; (60001444 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013be:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013c2:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013c4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013c6:	ldr	r6, [pc, #128]	; (60001448 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013c8:	ldr	r7, [pc, #128]	; (6000144c <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013ca:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013cc:	ldr	r1, [pc, #128]	; (60001450 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013ce:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013d0:	ldr	r6, [pc, #128]	; (60001454 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013d2:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013d6:	ldr	r7, [pc, #128]	; (60001458 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013d8:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013da:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013dc:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013e0:	ldr	r6, [pc, #120]	; (6000145c <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013e2:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013e4:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013e6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013e8:	ldr.w	lr, [pc, #156]	; 60001488 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013ec:	ldr	r6, [pc, #112]	; (60001460 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ee:	ldr	r1, [pc, #116]	; (60001464 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013f0:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013f4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013f6:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013f8:	ldr	r7, [pc, #108]	; (60001468 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013fa:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013fc:	ldr	r6, [pc, #108]	; (6000146c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fe:	ldr	r1, [pc, #112]	; (60001470 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001400:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001402:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001404:	ldr	r7, [pc, #108]	; (60001474 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001406:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001408:	ldr	r6, [pc, #108]	; (60001478 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000140a:	ldr	r1, [pc, #112]	; (6000147c <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000140c:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000140e:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001410:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001412:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001414:	dsb	sy
	asm("isb");
60001418:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000141c:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001420:	dsb	sy
	asm("isb");
60001424:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001428:	ldr.w	r3, [r2, #-136]
6000142c:	orr.w	r3, r3, #196608	; 0x30000
60001430:	str.w	r3, [r2, #-136]
60001434:	pop	{r4, r5, r6, r7, pc}
60001436:	nop
60001438:	.word	0xe000ed9c
6000143c:	.word	0xe000eda0
60001440:	.word	0xe000ed94
60001444:	.word	0x00100009
60001448:	.word	0x00200013
6000144c:	.word	0x07020021
60001450:	.word	0x20003700
60001454:	.word	0x20000014
60001458:	.word	0x13080025
6000145c:	.word	0x10000009
60001460:	.word	0x40000017
60001464:	.word	0x13100033
60001468:	.word	0x60000018
6000146c:	.word	0x070b002f
60001470:	.word	0x70000019
60001474:	.word	0x170b0037
60001478:	.word	0x7000001a
6000147c:	.word	0x130b002f
60001480:	.word	0x1000003f
60001484:	.word	0x03080025
60001488:	.word	0x20200016

6000148c <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
6000148c:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000148e:	ldr	r3, [pc, #736]	; (60001770 <configure_external_ram+0x2e4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001490:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001492:	ldr	r6, [pc, #736]	; (60001774 <configure_external_ram+0x2e8>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001494:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001496:	ldr	r1, [pc, #736]	; (60001778 <configure_external_ram+0x2ec>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001498:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000149c:	ldr	r5, [pc, #732]	; (6000177c <configure_external_ram+0x2f0>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000149e:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600014a2:	ldr	r4, [pc, #732]	; (60001780 <configure_external_ram+0x2f4>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600014a4:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600014a8:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600014ac:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600014ae:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600014b2:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014b6:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014ba:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600014be:	ldr	r1, [pc, #708]	; (60001784 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014c0:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014c4:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600014c8:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600014cc:	ldr	r6, [pc, #696]	; (60001788 <configure_external_ram+0x2fc>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600014ce:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600014d0:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600014d2:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600014d4:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600014d6:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600014d8:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600014dc:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600014e0:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014e4:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600014e8:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600014ec:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600014f0:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600014f4:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600014f8:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600014fc:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001500:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001502:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001504:	ldr	r0, [pc, #644]	; (6000178c <configure_external_ram+0x300>)
60001506:	ands	r0, r3
60001508:	ldr	r3, [pc, #644]	; (60001790 <configure_external_ram+0x304>)
6000150a:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000150c:	ldr	r0, [pc, #644]	; (60001794 <configure_external_ram+0x308>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000150e:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001510:	ldr.w	r3, [r6, #132]	; 0x84
60001514:	orr.w	r3, r3, #12
60001518:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000151c:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000151e:	ldr	r3, [r0, #0]
60001520:	orrs	r3, r6
60001522:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001524:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001526:	and.w	lr, r3, lr
6000152a:	ldr	r3, [pc, #620]	; (60001798 <configure_external_ram+0x30c>)
6000152c:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001530:	ldr.w	lr, [pc, #668]	; 600017d0 <configure_external_ram+0x344>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001534:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001536:	ldr	r3, [pc, #612]	; (6000179c <configure_external_ram+0x310>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001538:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000153a:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000153e:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001540:	ldr	r7, [pc, #604]	; (600017a0 <configure_external_ram+0x314>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001542:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001546:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001548:	ldr	r3, [r0, #12]
6000154a:	bic.w	r3, r3, #120	; 0x78
6000154e:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001550:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001552:	ands	r7, r3
60001554:	ldr	r3, [pc, #588]	; (600017a4 <configure_external_ram+0x318>)
60001556:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001558:	ldr	r7, [pc, #580]	; (600017a0 <configure_external_ram+0x314>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000155a:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000155c:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000155e:	ands	r7, r3
60001560:	ldr	r3, [pc, #576]	; (600017a4 <configure_external_ram+0x318>)
60001562:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001564:	ldr	r7, [pc, #576]	; (600017a8 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001566:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001568:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000156a:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000156c:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001570:	ldr	r7, [pc, #568]	; (600017ac <configure_external_ram+0x320>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001572:	bic.w	r3, r3, #63	; 0x3f
60001576:	orr.w	r3, r3, #1
6000157a:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000157e:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001582:	ldr.w	lr, [pc, #564]	; 600017b8 <configure_external_ram+0x32c>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001586:	bic.w	r3, r3, #63	; 0x3f
6000158a:	orr.w	r3, r3, #1
6000158e:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
60001592:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001594:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001596:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001598:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
6000159c:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000159e:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600015a0:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600015a4:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015a6:	ldr	r3, [pc, #520]	; (600017b0 <configure_external_ram+0x324>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600015a8:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600015ac:	ldr	r2, [pc, #516]	; (600017b4 <configure_external_ram+0x328>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600015ae:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015b0:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015b4:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600015b6:	str.w	r1, [r3], #4
600015ba:	cmp	r3, r2
600015bc:	bne.n	600015b6 <configure_external_ram+0x12a>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600015be:	ldr	r3, [pc, #468]	; (60001794 <configure_external_ram+0x308>)
600015c0:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600015c2:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600015c4:	orr.w	r2, r2, #1
600015c8:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600015ca:	ldr	r3, [r1, #0]
600015cc:	ldr	r2, [pc, #452]	; (60001794 <configure_external_ram+0x308>)
600015ce:	ands.w	r3, r3, #1
600015d2:	bne.n	600015ca <configure_external_ram+0x13e>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015d4:	ldr	r6, [pc, #480]	; (600017b8 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015d6:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600015d8:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600015dc:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600015e0:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600015e4:	ldr	r7, [pc, #468]	; (600017bc <configure_external_ram+0x330>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600015e6:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600015e8:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600015ec:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600015ee:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600015f2:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600015f6:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600015fa:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015fe:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001600:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001604:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001606:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000160a:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
6000160e:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001612:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001616:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000161a:	ldr	r6, [pc, #420]	; (600017c0 <configure_external_ram+0x334>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000161c:	ldr	r5, [pc, #420]	; (600017c4 <configure_external_ram+0x338>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000161e:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001622:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001626:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000162a:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000162e:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001632:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001636:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000163a:	ldr	r3, [r1, #20]
6000163c:	ldr	r2, [pc, #340]	; (60001794 <configure_external_ram+0x308>)
6000163e:	lsls	r5, r3, #31
60001640:	bpl.n	6000163a <configure_external_ram+0x1ae>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001642:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001644:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001646:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000164a:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000164c:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000164e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001652:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001656:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000165a:	ldr	r3, [r1, #20]
6000165c:	ldr	r2, [pc, #308]	; (60001794 <configure_external_ram+0x308>)
6000165e:	lsls	r4, r3, #31
60001660:	bpl.n	6000165a <configure_external_ram+0x1ce>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001662:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001664:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001666:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000166a:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000166c:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000166e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001672:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001676:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000167a:	ldr	r3, [r1, #20]
6000167c:	ldr	r2, [pc, #276]	; (60001794 <configure_external_ram+0x308>)
6000167e:	lsls	r0, r3, #31
60001680:	bpl.n	6000167a <configure_external_ram+0x1ee>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001682:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001684:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001686:	ldr	r0, [pc, #320]	; (600017c8 <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001688:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000168a:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000168c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001690:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001694:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001698:	ldr	r3, [r1, #20]
6000169a:	ldr	r2, [pc, #248]	; (60001794 <configure_external_ram+0x308>)
6000169c:	lsls	r3, r3, #31
6000169e:	bpl.n	60001698 <configure_external_ram+0x20c>
	uint32_t id = FLEXSPI2_RFDR0;
600016a0:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016a4:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600016a8:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016aa:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600016ac:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600016ae:	cmp	r3, r1
600016b0:	beq.n	600016b4 <configure_external_ram+0x228>
600016b2:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016b4:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016b6:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016ba:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016bc:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016be:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016c2:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016c6:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016ca:	ldr	r3, [r1, #20]
600016cc:	ldr	r2, [pc, #196]	; (60001794 <configure_external_ram+0x308>)
600016ce:	lsls	r7, r3, #31
600016d0:	bpl.n	600016ca <configure_external_ram+0x23e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600016d2:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016d4:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016d8:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016da:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600016dc:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016de:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016e2:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016e6:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016ea:	ldr	r3, [r1, #20]
600016ec:	ldr	r2, [pc, #164]	; (60001794 <configure_external_ram+0x308>)
600016ee:	lsls	r6, r3, #31
600016f0:	bpl.n	600016ea <configure_external_ram+0x25e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600016f2:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016f4:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016f8:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016fc:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600016fe:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001700:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001704:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001708:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000170c:	ldr	r3, [r1, #20]
6000170e:	ldr	r2, [pc, #132]	; (60001794 <configure_external_ram+0x308>)
60001710:	lsls	r5, r3, #31
60001712:	bpl.n	6000170c <configure_external_ram+0x280>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001714:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001716:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000171a:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000171e:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001720:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001722:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001726:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000172a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000172e:	ldr	r3, [r1, #20]
60001730:	ldr	r2, [pc, #96]	; (60001794 <configure_external_ram+0x308>)
60001732:	lsls	r4, r3, #31
60001734:	bpl.n	6000172e <configure_external_ram+0x2a2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001736:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001738:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000173c:	ldr	r0, [pc, #136]	; (600017c8 <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000173e:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001740:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001742:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001746:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000174a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000174e:	ldr	r3, [r1, #20]
60001750:	ldr	r2, [pc, #64]	; (60001794 <configure_external_ram+0x308>)
60001752:	lsls	r0, r3, #31
60001754:	bpl.n	6000174e <configure_external_ram+0x2c2>
	uint32_t id = FLEXSPI2_RFDR0;
60001756:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000175a:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000175e:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001760:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001762:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001764:	cmp	r3, r1
60001766:	beq.n	600017d4 <configure_external_ram+0x348>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001768:	ldr	r3, [pc, #96]	; (600017cc <configure_external_ram+0x340>)
6000176a:	movs	r2, #8
6000176c:	strb	r2, [r3, #0]
6000176e:	pop	{r4, r5, r6, r7, pc}
60001770:	.word	0x401f8000
60001774:	.word	0x000170f9
60001778:	.word	0x0001b0f9
6000177c:	.word	0x000110f9
60001780:	.word	0x000100f9
60001784:	.word	0x401f8400
60001788:	.word	0x400fc000
6000178c:	.word	0x1ffffcff
60001790:	.word	0xa0000300
60001794:	.word	0x402a4000
60001798:	.word	0xffff0012
6000179c:	.word	0x00f737ff
600017a0:	.word	0x7cf0ff00
600017a4:	.word	0x80000040
600017a8:	.word	0x830f00ff
600017ac:	.word	0x00020063
600017b0:	.word	0x402a4200
600017b4:	.word	0x402a4300
600017b8:	.word	0x5af05af0
600017bc:	.word	0x3018049f
600017c0:	.word	0x26013206
600017c4:	.word	0x0a180638
600017c8:	.word	0x00030004
600017cc:	.word	0x20001ae8
600017d0:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017d4:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600017d8:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017dc:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017de:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600017e0:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600017e4:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017e8:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017ec:	ldr	r3, [r1, #20]
600017ee:	ldr	r2, [pc, #16]	; (60001800 <configure_external_ram+0x374>)
600017f0:	lsls	r3, r3, #31
600017f2:	bpl.n	600017ec <configure_external_ram+0x360>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600017f4:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
600017f6:	ldr	r3, [pc, #12]	; (60001804 <configure_external_ram+0x378>)
600017f8:	movs	r1, #16
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600017fa:	str	r0, [r2, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
600017fc:	strb	r1, [r3, #0]
600017fe:	pop	{r4, r5, r6, r7, pc}
60001800:	.word	0x402a4000
60001804:	.word	0x20001ae8

60001808 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001808:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000180a:	ldr	r2, [pc, #92]	; (60001868 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000180c:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000180e:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001812:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001816:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000181a:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000181e:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001822:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001824:	tst.w	r3, #2
60001828:	beq.n	60001838 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000182a:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
6000182c:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000182e:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001830:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001832:	tst.w	r3, #2
60001836:	bne.n	6000182a <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001838:	tst.w	r3, #8192	; 0x2000
6000183c:	bne.n	60001842 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000183e:	str	r5, [r2, #20]
			continue;
60001840:	b.n	60001822 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001842:	tst.w	r3, #4096	; 0x1000
60001846:	bne.n	6000184c <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001848:	str	r6, [r2, #20]
			continue;
6000184a:	b.n	60001822 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000184c:	cmp	r3, #0
6000184e:	bge.n	60001822 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001850:	tst.w	r3, #65536	; 0x10000
60001854:	beq.n	6000185a <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001856:	str	r1, [r2, #24]
			continue;
60001858:	b.n	60001822 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000185a:	lsls	r3, r3, #25
6000185c:	bmi.n	60001862 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000185e:	str	r7, [r2, #20]
			continue;
60001860:	b.n	60001822 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001862:	pop	{r4, r5, r6, r7}
60001864:	bx	lr
60001866:	nop
60001868:	.word	0x400d8000

6000186c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000186c:	ldr	r2, [pc, #236]	; (6000195c <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000186e:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001872:	ldr	r1, [pc, #236]	; (60001960 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001874:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001876:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001878:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000187a:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000187e:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001880:	ldr.w	lr, [pc, #256]	; 60001984 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001884:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001886:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000188a:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000188e:	ldr	r7, [pc, #212]	; (60001964 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001890:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001892:	ubfx	r4, r3, #8, #12
60001896:	ldr	r6, [pc, #208]	; (60001968 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001898:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000189c:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a0:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018a4:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018a8:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ac:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018b0:	vmov	s15, r4
600018b4:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018b8:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018ba:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018be:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018c2:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018c6:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018c8:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018cc:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018d0:	ldr	r5, [pc, #152]	; (6000196c <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018d2:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018d6:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018d8:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018dc:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600018e0:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018e2:	vdiv.f32	s11, s14, s13
600018e6:	ldr	r6, [pc, #136]	; (60001970 <tempmon_init+0x104>)
600018e8:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018ea:	ldr	r1, [pc, #136]	; (60001974 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018ec:	ldr	r4, [pc, #136]	; (60001978 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018ee:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018f2:	vmov	s15, r3
600018f6:	ldr	r3, [pc, #132]	; (6000197c <tempmon_init+0x110>)
600018f8:	str.w	r3, [r6, #320]	; 0x140
600018fc:	vcvt.f32.u32	s15, s15
60001900:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001904:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001908:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000190c:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001910:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001914:	vmov	r3, s11
60001918:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000191c:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001920:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001924:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001926:	and.w	r1, r1, r5, lsl #16
6000192a:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000192e:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001932:	orrs	r3, r1
60001934:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001938:	vmov	r3, s15
6000193c:	ldr.w	r1, [r2, #272]	; 0x110
60001940:	ubfx	r3, r3, #0, #12
60001944:	orrs	r3, r1
60001946:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000194a:	ldr	r3, [r2, #0]
6000194c:	orr.w	r3, r3, #2
60001950:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001952:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001954:	ldr	r3, [pc, #40]	; (60001980 <tempmon_init+0x114>)
60001956:	movs	r2, #1
60001958:	str	r2, [r3, #0]
6000195a:	pop	{r4, r5, r6, r7, pc}
6000195c:	.word	0x400d8180
60001960:	.word	0x401f4400
60001964:	.word	0x20001af4
60001968:	.word	0x20001af8
6000196c:	.word	0x20001af0
60001970:	.word	0x20003400
60001974:	.word	0x0fff0000
60001978:	.word	0xe000e440
6000197c:	.word	0x00003b25
60001980:	.word	0xe000e108
60001984:	.word	0x20001aec

60001988 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001988:	ldr	r3, [pc, #68]	; (600019d0 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000198a:	ldr	r1, [pc, #72]	; (600019d4 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000198c:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000198e:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001990:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001994:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001996:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001998:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000199c:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000199e:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600019a0:	orr.w	r0, r0, #768	; 0x300
600019a4:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600019a6:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600019a8:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600019aa:	ldr	r3, [r2, #72]	; 0x48
600019ac:	lsls	r3, r3, #24
600019ae:	bmi.n	600019aa <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019b0:	ldr	r3, [pc, #36]	; (600019d8 <analog_init+0x50>)
600019b2:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019b6:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019b8:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600019ba:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600019bc:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600019be:	ldr	r3, [r2, #72]	; 0x48
600019c0:	ands.w	r3, r3, #128	; 0x80
600019c4:	bne.n	600019be <analog_init+0x36>
	calibrating = 0;
600019c6:	ldr	r2, [pc, #20]	; (600019dc <analog_init+0x54>)
600019c8:	strb	r3, [r2, #0]
}
600019ca:	pop	{r4, r5}
600019cc:	bx	lr
600019ce:	nop
600019d0:	.word	0x400fc000
600019d4:	.word	0x400c4000
600019d8:	.word	0x400c8000
600019dc:	.word	0x20001b49

600019e0 <TwoWire::i2c4_hardware>:
600019e0:	...@............
600019f0:	...@............
	...
60001a08:	...........@....
60001a18:	................
60001a28:	....

60001a2c <TwoWire::i2c3_hardware>:
60001a2c:	p..@............
60001a3c:	...@....$.......
60001a4c:	...@............
60001a5c:	...@....%.......
60001a6c:	...@........

60001a78 <TwoWire::i2c1_hardware>:
60001a78:	p..@............
60001a88:	...@............
	...
60001aa0:	...........@....
60001ab0:	................
60001ac0:	....

60001ac4 <usb_string_product_name_default>:
60001ac4:	..U.S.B. .S.e.r.
60001ad4:	i.a.l...

60001adc <usb_string_manufacturer_name_default>:
60001adc:	..T.e.e.n.s.y.d.
60001aec:	u.i.n.o.

60001af4 <string0>:
60001af4:	....

60001af8 <usb_config_descriptor_12>:
60001af8:	..C.....2.......
60001b08:	...$....$....$..
60001b18:	.$..............
60001b28:	.........@......
60001b38:	@...

60001b3c <usb_config_descriptor_480>:
60001b3c:	..C.....2.......
60001b4c:	...$....$....$..
60001b5c:	.$..............
60001b6c:	................
60001b7c:	....

60001b80 <qualifier_descriptor>:
60001b80:	.......@..

60001b8a <_serialEvent_default>:
60001b8a:	..

60001b8c <_init>:
60001b8c:	push	{r3, r4, r5, r6, r7, lr}
60001b8e:	nop
60001b90:	pop	{r3, r4, r5, r6, r7}
60001b92:	pop	{r3}
60001b94:	mov	lr, r3
60001b96:	bx	lr

60001b98 <__memset_veneer>:
60001b98:	ldr.w	pc, [pc]	; 60001b9c <__memset_veneer+0x4>
60001b9c:	.word	0x00005d61

60001ba0 <__set_arm_clock_veneer>:
60001ba0:	ldr.w	pc, [pc]	; 60001ba4 <__set_arm_clock_veneer+0x4>
60001ba4:	.word	0x00002d11

60001ba8 <__pwm_init_veneer>:
60001ba8:	ldr.w	pc, [pc]	; 60001bac <__pwm_init_veneer+0x4>
60001bac:	.word	0x00003e09

60001bb0 <__startup_late_hook_veneer>:
60001bb0:	ldr.w	pc, [pc]	; 60001bb4 <__startup_late_hook_veneer+0x4>
60001bb4:	.word	0x00003a15

60001bb8 <____libc_init_array_veneer>:
60001bb8:	ldr.w	pc, [pc]	; 60001bbc <____libc_init_array_veneer+0x4>
60001bbc:	.word	0x0000569d

60001bc0 <__usb_init_serialnumber_veneer>:
60001bc0:	ldr.w	pc, [pc]	; 60001bc4 <__usb_init_serialnumber_veneer+0x4>
60001bc4:	.word	0x000039a1

60001bc8 <__delay_veneer>:
60001bc8:	ldr.w	pc, [pc]	; 60001bcc <__delay_veneer+0x4>
60001bcc:	.word	0x000038d5

60001bd0 <__main_veneer>:
60001bd0:	ldr.w	pc, [pc]	; 60001bd4 <__main_veneer+0x4>
60001bd4:	.word	0x00004529

60001bd8 <__startup_early_hook_veneer>:
60001bd8:	ldr.w	pc, [pc]	; 60001bdc <__startup_early_hook_veneer+0x4>
60001bdc:	.word	0x00003a11

60001be0 <__init_array_start>:
60001be0:	.word	0x00000045
60001be4:	.word	0x00000411
60001be8:	.word	0x00000d8d
60001bec:	.word	0x00001a15
60001bf0:	.word	0x00001ce1

60001bf4 <__init_array_end>:
60001bf4:	.word	0xffffffff
60001bf8:	.word	0xffffffff
60001bfc:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	nop.w
      32:	movs	r3, #1
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	asrs	r0, r4, #20
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	str	r5, [sp, #144]	; 0x90
	...

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	push	{r4, lr}
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r4, #20
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	str	r5, [sp, #144]	; 0x90
  ADC2_CFG = mode1;
      72:	movs	r0, r0
  
  if(num >= 4){
      74:	.word	0x20001520
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      78:	movs	r0, r0
	...

0000007c <setRGB(int, int, int)>:
  // 0% duty cycle when disabled
  analogWrite(buzzerPin, 0);
}

void setRGB(int r, int g, int b) {
  if (r > 0) {
      7c:	cmp	r0, #0
    // Enable LED
    digitalWrite(redPin, LOW);
  } else {
    // Disable
    digitalWrite(redPin, HIGH);
      7e:	.short	0xf04f
      80:	movs	r2, r0
void disableBuzzer() {
  // 0% duty cycle when disabled
  analogWrite(buzzerPin, 0);
}

void setRGB(int r, int g, int b) {
      82:	.short	0xb538
      84:	mov	r5, r1
  if (r > 0) {
    // Enable LED
    digitalWrite(redPin, LOW);
      86:	.short	0xbfcc
      88:	movgt	r1, #0
  } else {
    // Disable
    digitalWrite(redPin, HIGH);
      8a:	.short	0x2101
void disableBuzzer() {
  // 0% duty cycle when disabled
  analogWrite(buzzerPin, 0);
}

void setRGB(int r, int g, int b) {
      8c:	mov	r4, r2
  if (r > 0) {
    // Enable LED
    digitalWrite(redPin, LOW);
  } else {
    // Disable
    digitalWrite(redPin, HIGH);
      8e:	.short	0xf003
      90:	stc2	13, cr2, [r1]
  if (g > 0) {
    // Enable
    digitalWrite(greenPin, LOW);
  } else {
    // Disable
    digitalWrite(greenPin, HIGH);
      94:	.word	0x0003f04f
    digitalWrite(redPin, HIGH);
  }

  if (g > 0) {
    // Enable
    digitalWrite(greenPin, LOW);
      98:	ite	gt
      9a:	.short	0x2100
  } else {
    // Disable
    digitalWrite(greenPin, HIGH);
      9c:	movle	r1, #1
      9e:	bl	3b94 <digitalWrite>
  }
  
  if (b > 0) {
      a2:	.short	0x2c00
      a4:	ble.n	b2 <setRGB(int, int, int)+0x36>
    // Enable
    digitalWrite(bluePin, LOW);
      a6:	.short	0x2100
      a8:	movs	r0, #4
  } else {
    // Disable
    digitalWrite(bluePin, HIGH);
  }
}
      aa:	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(greenPin, HIGH);
  }
  
  if (b > 0) {
    // Enable
    digitalWrite(bluePin, LOW);
      ae:	.short	0xf003
      b0:	pop	{r0, r4, r5, r6, pc}
  } else {
    // Disable
    digitalWrite(bluePin, HIGH);
      b2:	movs	r1, #1
      b4:	movs	r0, #4
  }
}
      b6:	ldmia.w	sp!, {r3, r4, r5, lr}
  if (b > 0) {
    // Enable
    digitalWrite(bluePin, LOW);
  } else {
    // Disable
    digitalWrite(bluePin, HIGH);
      ba:	b.w	3b94 <digitalWrite>
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
      be:	nop

000000c0 <setServoAngle(int, float)>:
  }
}

void setServoAngle(int servo, float angle) {
  angle = angle * (180 / PI);
      c0:	.word	0x7b1ded9f
      c4:	vcvt.f64.f32	d0, s0
    // Disable
    digitalWrite(bluePin, HIGH);
  }
}

void setServoAngle(int servo, float angle) {
      c8:	.word	0xee20b538
  angle = angle * (180 / PI);
      cc:	lsrs	r7, r0, #12
      ce:	.short	0xf06f
      d0:	lsls	r3, r2, #16
    // Disable
    digitalWrite(bluePin, HIGH);
  }
}

void setServoAngle(int servo, float angle) {
      d2:	.short	0x4605
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
      d4:	ldr	r0, [pc, #104]	; (140 <setServoAngle(int, float)+0x80>)
  angle = angle * (180 / PI);
  int command = (int) round(angle);
      d6:	.short	0xeeb6
      d8:	ldrb	r0, [r0, #12]
    digitalWrite(bluePin, HIGH);
  }
}

void setServoAngle(int servo, float angle) {
  angle = angle * (180 / PI);
      da:	vcvt.f32.f64	s0, d0
  int command = (int) round(angle);
      de:	vcmpe.f32	s0, #0.0
      e2:	vcvt.f64.f32	d0, s0
      e6:	.short	0xeef1
      e8:			; <UNDEFINED> instruction: 0xfa10bfac
      ec:	.word	0x0b07ee30
      f0:	vsub.f64	d0, d0, d7
      f4:	vcvt.s32.f64	s0, d0
      f8:	.word	0x3a10ee10
      fc:	cmp	r3, r4
      fe:	.short	0xbfb8
     100:	movlt	r3, r4
     102:	.short	0x2b14
     104:	mov	r4, r3
     106:	.short	0xbfa8
     108:	movge	r4, #20
    command = MAX_GIMBAL;
  } else if (command < -MAX_GIMBAL) {
    command = -MAX_GIMBAL;
  }

  command += 90;
     10a:	.short	0x345a
     10c:	mov	r1, r4
     10e:	.short	0xf004
     110:	ldr??.w	r4, [pc, #2059]	; 91f <IMU::updateGyro()+0x14f>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     114:	.word	0xf9acf004

  Serial.println(command);

  switch (servo)
     118:	cbz	r5, 12c <setServoAngle(int, float)+0x6c>
     11a:	.short	0x2d01
     11c:	bne.n	12a <setServoAngle(int, float)+0x6a>
  case 0:
    servoX.write(command);
    break;
  
  case 1:
    servoY.write(command);
     11e:	.short	0x4621
     120:	ldr	r0, [pc, #32]	; (144 <setServoAngle(int, float)+0x84>)

  default:
    break;
  }

}
     122:	.short	0xe8bd
     124:	ands	r0, r7
  case 0:
    servoX.write(command);
    break;
  
  case 1:
    servoY.write(command);
     126:	.short	0xf001
     128:	pop	{r0, r3, r4, r7, pc}
     12a:	pop	{r3, r4, r5, pc}
  Serial.println(command);

  switch (servo)
  {
  case 0:
    servoX.write(command);
     12c:	mov	r1, r4
     12e:	ldr	r0, [pc, #24]	; (148 <setServoAngle(int, float)+0x88>)

  default:
    break;
  }

}
     130:	ldmia.w	sp!, {r3, r4, r5, lr}
  Serial.println(command);

  switch (servo)
  {
  case 0:
    servoX.write(command);
     134:	.word	0xbd92f001
     138:	stmia	r1!, {r3, r4, r5, r6, r7}
     13a:	subs	r3, r4, r1
     13c:	add	r5, pc, #880	; (adr r5, 4b0 <IMU::enableLPF(float, float)+0x18>)
     13e:	eors	r4, r1
     140:	lsrs	r4, r3, #13
     142:	movs	r0, #0
     144:	asrs	r0, r1, #24
     146:	movs	r0, #0
     148:	asrs	r0, r0, #24
     14a:	movs	r0, #0
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     14c:	.word	0x00000000

00000150 <switchRocket() [clone .part.2]>:
     150:	ldr	r2, [pc, #364]	; (2c0 <switchRocket() [clone .part.2]+0x170>)

  case FLIGHT:
    
    previousTime = currentTime;
    currentTime = millis();
    elapsedTime = (currentTime - previousTime) / 1000; // Convert to seconds
     152:	vldr	s13, [pc, #368]	; 2c4 <switchRocket() [clone .part.2]+0x174>
     156:	.short	0xedd2
     158:	ldrb	r0, [r0, #8]
    /* code */
    break;

  case FLIGHT:
    
    previousTime = currentTime;
     15a:	.short	0x4a5b
    currentTime = millis();
     15c:	vcvt.f32.u32	s15, s15
    break;
  }

}

void switchRocket() {
     160:	.word	0x4b5ab538
    previousTime = currentTime;
    currentTime = millis();
    elapsedTime = (currentTime - previousTime) / 1000; // Convert to seconds

    // Get data from IMU
    imu.update();
     164:	ldr	r4, [pc, #360]	; (2d0 <switchRocket() [clone .part.2]+0x180>)
    /* code */
    break;

  case FLIGHT:
    
    previousTime = currentTime;
     166:	.short	0xed93
     168:	ldrb	r0, [r0, #8]
    currentTime = millis();
    elapsedTime = (currentTime - previousTime) / 1000; // Convert to seconds
     16a:	.short	0x4d5a

    // Get data from IMU
    imu.update();
     16c:	mov	r0, r4

  case FLIGHT:
    
    previousTime = currentTime;
    currentTime = millis();
    elapsedTime = (currentTime - previousTime) / 1000; // Convert to seconds
     16e:	.short	0xee37
     170:	ldr	r7, [r0, #44]	; 0x2c
    break;
  }

}

void switchRocket() {
     172:	.short	0xed2d
     174:	ldrh	r4, [r0, #24]
    break;

  case FLIGHT:
    
    previousTime = currentTime;
    currentTime = millis();
     176:	.short	0xedc3
     178:	ldrb	r0, [r0, #8]
    elapsedTime = (currentTime - previousTime) / 1000; // Convert to seconds
     17a:	.short	0xeec6
     17c:	ldrb	r6, [r4, #8]
    /* code */
    break;

  case FLIGHT:
    
    previousTime = currentTime;
     17e:	.short	0xed82
     180:	ldrb	r0, [r0, #8]
    currentTime = millis();
    elapsedTime = (currentTime - previousTime) / 1000; // Convert to seconds
     182:	.short	0xedc5
     184:	ldrb	r0, [r0, #8]

    // Get data from IMU
    imu.update();
     186:	bl	d6c <IMU::update()>

    // Third euler angle is roll of rocket
    float roll = imu.euler[2];

    // Calculate error signal
    float error = TARGET_PITCH - imu.euler[1];
     18a:	.short	0xed94
     18c:	ldrb	r2, [r4, #8]

    // Derivative term
    differentiator = (error - previousError) / elapsedTime;

    // Calculate output
    float output = (Kp * error) + (Ki * integrator) + (Kd * differentiator);
     18e:	.short	0xeeb6
     190:	ldr	r0, [r0, #48]	; 0x30

    // Third euler angle is roll of rocket
    float roll = imu.euler[2];

    // Calculate error signal
    float error = TARGET_PITCH - imu.euler[1];
     192:	vldr	s15, [pc, #324]	; 2d8 <switchRocket() [clone .part.2]+0x188>

    // Calculate output
    float output = (Kp * error) + (Ki * integrator) + (Kd * differentiator);

    // Restrict to max gimbal angle
    if (output > MAX_GIMBAL) {
     196:	.short	0xeef3
     198:	ldr	r2, [pc, #16]	; (1ac <switchRocket() [clone .part.2]+0x5c>)

    // Calculate error signal
    float error = TARGET_PITCH - imu.euler[1];

    // Integral term
    integrator = integrator + (elapsedTime * error);
     19a:	.short	0x4a50

    // Third euler angle is roll of rocket
    float roll = imu.euler[2];

    // Calculate error signal
    float error = TARGET_PITCH - imu.euler[1];
     19c:	vsub.f32	s15, s15, s14

    // Integral term
    integrator = integrator + (elapsedTime * error);
     1a0:	vldr	s10, [r5]
     1a4:	vldr	s14, [r2]

    // Derivative term
    differentiator = (error - previousError) / elapsedTime;
     1a8:	ldr	r3, [pc, #308]	; (2e0 <switchRocket() [clone .part.2]+0x190>)

    // Calculate error signal
    float error = TARGET_PITCH - imu.euler[1];

    // Integral term
    integrator = integrator + (elapsedTime * error);
     1aa:	.short	0xeea7
     1ac:	ldrb	r5, [r0, #10]

    // Derivative term
    differentiator = (error - previousError) / elapsedTime;
     1ae:	.short	0x494d
     1b0:	vldr	s11, [r3]

    // Calculate output
    float output = (Kp * error) + (Ki * integrator) + (Kd * differentiator);
     1b4:	vcvt.f64.f32	d3, s15

    // Get data from IMU
    imu.update();

    // Third euler angle is roll of rocket
    float roll = imu.euler[2];
     1b8:	.word	0x9a23ed94

    // Integral term
    integrator = integrator + (elapsedTime * error);

    // Derivative term
    differentiator = (error - previousError) / elapsedTime;
     1bc:	vsub.f32	s11, s15, s11

    // Calculate output
    float output = (Kp * error) + (Ki * integrator) + (Kd * differentiator);
     1c0:	.word	0x8ac7eeb7

    // Calculate error signal
    float error = TARGET_PITCH - imu.euler[1];

    // Integral term
    integrator = integrator + (elapsedTime * error);
     1c4:	vstr	s14, [r2]

    // Derivative term
    differentiator = (error - previousError) / elapsedTime;
     1c8:	vdiv.f32	s14, s11, s10

    // Calculate output
    float output = (Kp * error) + (Ki * integrator) + (Kd * differentiator);
     1cc:	.word	0x8b06ee28
     1d0:	vfma.f64	d8, d3, d6
     1d4:	.word	0x5ac7eeb7

    // Integral term
    integrator = integrator + (elapsedTime * error);

    // Derivative term
    differentiator = (error - previousError) / elapsedTime;
     1d8:	vstr	s14, [r1]

    // Calculate output
    float output = (Kp * error) + (Ki * integrator) + (Kd * differentiator);
     1dc:	.word	0x8b06eea5
     1e0:	vcvt.f32.f64	s16, d8

    // Restrict to max gimbal angle
    if (output > MAX_GIMBAL) {
     1e4:	.word	0x8ae4eeb4
     1e8:	vmrs	APSR_nzcv, fpscr
     1ec:	.word	0xeebbdc14
      output = MAX_GIMBAL;
    } else if (output < -MAX_GIMBAL) {
     1f0:	ldrb	r4, [r0, #8]
     1f2:	.short	0xeeb4
     1f4:	ldrh	r7, [r0, #22]
     1f6:	vmrs	APSR_nzcv, fpscr
     1fa:	.short	0xd552
    previousError = error;

    // Split output angle into XY angles based on roll angle
    // Move roll into range 0 to Pi/2 for trig
    int quadrant = 1;
    if (roll < 0) {
     1fc:	vcmpe.f32	s18, #0.0
    } else if (output < -MAX_GIMBAL) {
      output = -MAX_GIMBAL;
    }

    // Update previous error for next iteration
    previousError = error;
     200:	.word	0x7a00edc3
    float output = (Kp * error) + (Ki * integrator) + (Kd * differentiator);

    // Restrict to max gimbal angle
    if (output > MAX_GIMBAL) {
      output = MAX_GIMBAL;
    } else if (output < -MAX_GIMBAL) {
     204:	vmov.f64	d8, #180	; 0xc1a00000 -20.0
    previousError = error;

    // Split output angle into XY angles based on roll angle
    // Move roll into range 0 to Pi/2 for trig
    int quadrant = 1;
    if (roll < 0) {
     208:	.word	0xfa10eef1
     20c:	bpl.n	22a <switchRocket() [clone .part.2]+0xda>
      roll = roll * -1;
     20e:	.short	0xeeb1
     210:	ldr	r2, [sp, #292]	; 0x124
      quadrant = quadrant * -1;
     212:	.short	0xf04f
     214:	adds	r4, #255	; 0xff
     216:	.short	0xe009

    // Calculate output
    float output = (Kp * error) + (Ki * integrator) + (Kd * differentiator);

    // Restrict to max gimbal angle
    if (output > MAX_GIMBAL) {
     218:	vmov.f64	d8, #52	; 0x41a00000  20.0
    previousError = error;

    // Split output angle into XY angles based on roll angle
    // Move roll into range 0 to Pi/2 for trig
    int quadrant = 1;
    if (roll < 0) {
     21c:	vcmpe.f32	s18, #0.0
    } else if (output < -MAX_GIMBAL) {
      output = -MAX_GIMBAL;
    }

    // Update previous error for next iteration
    previousError = error;
     220:	.word	0x7a00edc3

    // Split output angle into XY angles based on roll angle
    // Move roll into range 0 to Pi/2 for trig
    int quadrant = 1;
    if (roll < 0) {
     224:	vmrs	APSR_nzcv, fpscr
     228:	.word	0x2401d4f1
      roll = roll * -1;
      quadrant = quadrant * -1;
    }

    if (roll > (PI/2)) {
     22c:	vcvt.f64.f32	d9, s18
     230:	.word	0x7b1fed9f
     234:	vcmpe.f64	d9, d7
     238:	.word	0xfa10eef1
     23c:	ble.n	250 <switchRocket() [clone .part.2]+0x100>
      roll = PI - roll;
      quadrant = quadrant * 2;
     23e:	.short	0x0064
     240:	vldr	d7, [pc, #116]	; 2b8 <switchRocket() [clone .part.2]+0x168>
     244:	vsub.f64	d9, d7, d9
     248:	.word	0x9bc9eeb7
     24c:	vcvt.f64.f32	d9, s18
    }
    
    float xAngle = output * sin(roll);
     250:	.word	0x0b49eeb0
     254:	bl	45e0 <sin>
     258:	.word	0x7b08ee20
    float yAngle = output * cos(roll);
     25c:	vmov.f64	d0, d9
    if (roll > (PI/2)) {
      roll = PI - roll;
      quadrant = quadrant * 2;
    }
    
    float xAngle = output * sin(roll);
     260:	.word	0x9bc7eeb7
    float yAngle = output * cos(roll);
     264:	bl	4540 <cos>
     268:	vmul.f64	d0, d0, d8

    // Adjust magnitude of angle depending on quadrant
    switch (quadrant) {
     26c:	.word	0xeeb72c01
      roll = PI - roll;
      quadrant = quadrant * 2;
    }
    
    float xAngle = output * sin(roll);
    float yAngle = output * cos(roll);
     270:	ldrh	r0, [r0, #30]

    // Adjust magnitude of angle depending on quadrant
    switch (quadrant) {
     272:	.short	0xd013
     274:	cmp	r4, #2
     276:	.short	0xd017
     278:	adds	r4, #1
     27a:	.short	0xd00d
    default:
      break;
    }

    // Update servo positions
    setServoAngle(0, xAngle);
     27c:	vmov.f32	s0, s18
     280:	.word	0xf7ff2000
     284:	vacge.f<illegal width 64>	d14, d29, d16
    setServoAngle(1, yAngle);
     288:	.word	0x20010a48
    break;

  default:
    break;
  }
}
     28c:	vpop	{d8-d9}
     290:	.word	0x4038e8bd
      break;
    }

    // Update servo positions
    setServoAngle(0, xAngle);
    setServoAngle(1, yAngle);
     294:	b.w	c0 <setServoAngle(int, float)>
    case 2:
      xAngle = xAngle * -1;
      break;
    
    case -1:
      xAngle = xAngle * -1;
     298:	.word	0x9a49eeb1
      yAngle = yAngle * -1; 
     29c:	vneg.f32	s16, s16
     2a0:	b.n	27c <switchRocket() [clone .part.2]+0x12c>
     2a2:	vcvt.f64.f32	d8, s16
     2a6:	b.n	21c <switchRocket() [clone .part.2]+0xcc>
    case 1:
      yAngle = yAngle * -1;
      break;

    case 2:
      xAngle = xAngle * -1;
     2a8:	vneg.f32	s18, s18
     2ac:	b.n	27c <switchRocket() [clone .part.2]+0x12c>
     2ae:	nop
     2b0:	cmp	r5, #24
     2b2:	.short	0x5444
     2b4:	movs	r1, #251	; 0xfb
     2b6:	subs	r7, #249	; 0xf9
     2b8:	cmp	r5, #24
     2ba:	.short	0x5444
     2bc:	movs	r1, #251	; 0xfb
     2be:	.short	0x4009
     2c0:	subs	r4, r4, r3
     2c2:	movs	r0, #0
     2c4:	.word	0x447a0000
     2c8:	asrs	r4, r0, #21
     2ca:	.short	0x2000
     2cc:	asrs	r4, r7, #20
     2ce:	.short	0x2000
     2d0:	asrs	r4, r2, #21
     2d2:	movs	r0, #0
     2d4:	.word	0x200015fc
     2d8:	movs	r0, r0
     2da:	.short	0x0000
     2dc:	asrs	r0, r0, #21
     2de:	.short	0x2000
     2e0:	asrs	r0, r2, #21
     2e2:	.short	0x2000
     2e4:	asrs	r0, r1, #21
     2e6:	.short	0x2000

000002e8 <setup>:
  }
}



void setup() {
     2e8:	push	{r4, lr}

  // Setup serial for USB monitoring
  Serial.begin(115200);

  // Enable IMU by changing registers
  imu.enable();
     2ea:	.short	0x4c21
  }
}



void setup() {
     2ec:	vpush	{d8}

  // Setup serial for USB monitoring
  Serial.begin(115200);

  // Enable IMU by changing registers
  imu.enable();
     2f0:	.word	0xed9f4620

  // Attach gimbal servos to correct pins
  
  servoX.attach(servo1Pin);
  servoY.attach(servo2Pin);
  setServoAngle(0, 0);
     2f4:	ldrh	r0, [r4, #16]

  // Setup serial for USB monitoring
  Serial.begin(115200);

  // Enable IMU by changing registers
  imu.enable();
     2f6:	.short	0xf000
     2f8:			; <UNDEFINED> instruction: 0xf903eddf
  imu.enableLPF(20.0, 0.01);
     2fc:	lsrs	r7, r3, #8
     2fe:	.short	0xeeb3
     300:	lsrs	r4, r0, #8
     302:	mov	r0, r4
     304:	bl	498 <IMU::enableLPF(float, float)>

  // Attach gimbal servos to correct pins
  
  servoX.attach(servo1Pin);
     308:	.word	0x481c2114
     30c:	bl	1c50 <Servo::attach(int)>
  servoY.attach(servo2Pin);
     310:	.word	0x481b2115
     314:	bl	1c50 <Servo::attach(int)>
  setServoAngle(0, 0);
     318:	.word	0x0a48eeb0
     31c:	movs	r0, #0
     31e:	.short	0xf7ff
     320:	mcr2	14, 6, lr, cr15, cr0, {5}
  setServoAngle(1, 0);
     324:	.word	0x20010a48
     328:	bl	c0 <setServoAngle(int, float)>
  

  // Set RGB LED pins as outputs
  pinMode(redPin, OUTPUT);
     32c:	movs	r1, #1
     32e:	.short	0x2002
     330:	bl	3ba0 <pinMode>
  pinMode(greenPin, OUTPUT);
     334:	.word	0x20032101
     338:	bl	3ba0 <pinMode>
  pinMode(bluePin, OUTPUT);
     33c:	.word	0x20042101
     340:	bl	3ba0 <pinMode>
  setRGB(0, 0, 0);
     344:	.word	0x46112200
     348:	mov	r0, r2
     34a:	.short	0xf7ff
     34c:	cdp2	1, 9, cr2, cr7, cr1, {0}

  // Set Teensy LED pin as output
  pinMode(LED_BUILTIN,OUTPUT);
     350:	movs	r0, #13
     352:	bl	3ba0 <pinMode>

  // Set buzzer pin as output
  pinMode(buzzerPin, OUTPUT);
     356:	movs	r0, #33	; 0x21
     358:	.word	0xf0032101
     35c:	stc2	13, cr14, [r1], #-636	; 0xfffffd84
  // Set PWM frequency for piezo buzzer according to datasheet
  analogWriteFrequency(buzzerPin, 4000);
     360:	.word	0x20210a09
}
     364:	vpop	{d8}
     368:	.word	0x4010e8bd
  pinMode(LED_BUILTIN,OUTPUT);

  // Set buzzer pin as output
  pinMode(buzzerPin, OUTPUT);
  // Set PWM frequency for piezo buzzer according to datasheet
  analogWriteFrequency(buzzerPin, 4000);
     36c:	b.w	3da0 <analogWriteFrequency>
     370:	.word	0x20001554
     374:	movs	r0, r0
     376:	.short	0x0000
     378:	bvc.n	390 <loop+0x8>
     37a:	.short	0x3c23
     37c:	asrs	r0, r0, #24
     37e:	.short	0x2000
     380:	asrs	r0, r1, #24
     382:	movs	r0, #0
     384:	movs	r0, r0
     386:	.short	0x457a

00000388 <loop>:
}

void loop() {
     388:	push	{r4, r5, lr}

  rocketState = FLIGHT;
     38a:	.short	0x4b1d
     38c:	movs	r5, #2
  //sprintf(outputBuf, "% 6.4f,% 6.4f,% 6.4f", imu.gyroError[0], imu.gyroError[1], imu.gyroError[2]);
  //sprintf(outputBuf, "% 6.4f,% 6.4f,% 6.4f", imu.accError[0], imu.accError[1], imu.accError[2]);
  //sprintf(outputBuf, "% 4.4f,% 4.4f,% 4.4f", imu.euler[0], imu.euler[1], imu.euler[2]);
  //sprintf(outputBuf, "% 4.4f,% 4.4f,% 4.4f", imu.getAngle(0), imu.getAngle(1), imu.getAngle(2));

  sprintf(outputBuf, "A1: % 4.2f A2: % 4.2f A3: % 4.2f", imu.getEuler(0), imu.getEuler(1), imu.getEuler(2));
     38e:	ldr	r4, [pc, #116]	; (404 <loop+0x7c>)
  pinMode(buzzerPin, OUTPUT);
  // Set PWM frequency for piezo buzzer according to datasheet
  analogWriteFrequency(buzzerPin, 4000);
}

void loop() {
     390:	vpush	{d8}
     394:	sub	sp, #124	; 0x7c

  rocketState = FLIGHT;
     396:	strb	r5, [r3, #0]
     398:	bl	150 <switchRocket() [clone .part.2]>
  //sprintf(outputBuf, "% 6.4f,% 6.4f,% 6.4f", imu.gyroError[0], imu.gyroError[1], imu.gyroError[2]);
  //sprintf(outputBuf, "% 6.4f,% 6.4f,% 6.4f", imu.accError[0], imu.accError[1], imu.accError[2]);
  //sprintf(outputBuf, "% 4.4f,% 4.4f,% 4.4f", imu.euler[0], imu.euler[1], imu.euler[2]);
  //sprintf(outputBuf, "% 4.4f,% 4.4f,% 4.4f", imu.getAngle(0), imu.getAngle(1), imu.getAngle(2));

  sprintf(outputBuf, "A1: % 4.2f A2: % 4.2f A3: % 4.2f", imu.getEuler(0), imu.getEuler(1), imu.getEuler(2));
     39c:	mov	r0, r4
     39e:	movs	r1, #0
     3a0:	bl	4d8 <IMU::getEuler(int)>
     3a4:	mov	r0, r4
     3a6:	movs	r1, #1
     3a8:	vmov.f32	s17, s0
     3ac:	bl	4d8 <IMU::getEuler(int)>
     3b0:	vmov.f32	s16, s0
     3b4:	mov	r1, r5
     3b6:	mov	r0, r4
     3b8:	bl	4d8 <IMU::getEuler(int)>
     3bc:	vcvt.f64.f32	d6, s17
     3c0:	vcvt.f64.f32	d7, s16
     3c4:	ldr	r1, [pc, #64]	; (408 <loop+0x80>)
     3c6:	vcvt.f64.f32	d0, s0
     3ca:	add	r0, sp, #20
     3cc:	vmov	r2, r3, d6
     3d0:	vstr	d0, [sp, #8]
     3d4:	vstr	d7, [sp]
     3d8:	bl	6208 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     3dc:	add	r0, sp, #20
     3de:	bl	6280 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     3e2:	mov	r1, r0
     3e4:	add	r0, sp, #20
     3e6:	bl	2c0c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     3ea:	ldr	r0, [pc, #32]	; (40c <loop+0x84>)
     3ec:	bl	4470 <Print::println()>

 //setServoAngle(0, imu.getAngle(0));
 //setServoAngle(1, -imu.getAngle(1));


  delay(10);
     3f0:	movs	r0, #10
     3f2:	bl	38d4 <delay>

}
     3f6:	add	sp, #124	; 0x7c
     3f8:	vpop	{d8}
     3fc:	pop	{r4, r5, pc}
     3fe:	nop
     400:	.word	0x2000154c
     404:	.word	0x20001554
     408:	.word	0x20000000
     40c:	.word	0x20000b5c

00000410 <_GLOBAL__sub_I_rocketState>:
     410:	push	{r4, lr}
#define TARGET_PITCH 0

enum RocketStates {CALIBRATION, STANDBY, FLIGHT, APOGEE, RECOVERY, LOGGING};
RocketStates rocketState = CALIBRATION;

Servo servoX;
     412:	ldr	r0, [pc, #32]	; (434 <_GLOBAL__sub_I_rocketState+0x24>)
Servo servoY;

IMU imu;
     414:	ldr	r4, [pc, #32]	; (438 <_GLOBAL__sub_I_rocketState+0x28>)
#define TARGET_PITCH 0

enum RocketStates {CALIBRATION, STANDBY, FLIGHT, APOGEE, RECOVERY, LOGGING};
RocketStates rocketState = CALIBRATION;

Servo servoX;
     416:	bl	1b90 <Servo::Servo()>
Servo servoY;
     41a:	ldr	r0, [pc, #32]	; (43c <_GLOBAL__sub_I_rocketState+0x2c>)
     41c:	bl	1b90 <Servo::Servo()>

IMU imu;
     420:	mov	r0, r4
     422:	bl	448 <IMU::IMU()>
     426:	mov	r0, r4
     428:	ldr	r2, [pc, #20]	; (440 <_GLOBAL__sub_I_rocketState+0x30>)
     42a:	ldr	r1, [pc, #24]	; (444 <_GLOBAL__sub_I_rocketState+0x34>)
 //setServoAngle(1, -imu.getAngle(1));


  delay(10);

}
     42c:	ldmia.w	sp!, {r4, lr}
RocketStates rocketState = CALIBRATION;

Servo servoX;
Servo servoY;

IMU imu;
     430:	b.w	5678 <__aeabi_atexit>
     434:	.word	0x20001600
     438:	.word	0x20001554
     43c:	.word	0x20001608
     440:	.word	0x20000a44
     444:	.word	0x00000495

00000448 <IMU::IMU()>:
#define ACC_ERROR_Z -0.004
#define GYRO_ERROR_X -0.0026
#define GYRO_ERROR_Y 0.0027
#define GYRO_ERROR_Z -0.0056

IMU::IMU() {
     448:	push	{r4, r5, r6}

    LPFEnabled = false;

    // Clear accelerometer buffer
    for (size_t i = 0; i < 3; i++) {
        acc[i] = 0.0;
     44a:	movs	r4, #0
#define GYRO_ERROR_Y 0.0027
#define GYRO_ERROR_Z -0.0056

IMU::IMU() {

    LPFEnabled = false;
     44c:	movs	r6, #0
#define ACC_ERROR_Z -0.004
#define GYRO_ERROR_X -0.0026
#define GYRO_ERROR_Y 0.0027
#define GYRO_ERROR_Z -0.0056

IMU::IMU() {
     44e:	mov	r3, r0
     450:	add.w	r1, r0, #36	; 0x24
     454:	add.w	r5, r0, #48	; 0x30
        filtAcc[i][1] = 0.0;
    }

    // Clear gyroscope buffer
    for (size_t i = 0; i < 3; i++) {
        gyro[i] = 0.0;
     458:	mov	r2, r4
#define GYRO_ERROR_Y 0.0027
#define GYRO_ERROR_Z -0.0056

IMU::IMU() {

    LPFEnabled = false;
     45a:	strb	r6, [r0, #0]

    // Clear accelerometer buffer
    for (size_t i = 0; i < 3; i++) {
        acc[i] = 0.0;
     45c:	str	r4, [r0, #24]
        filtAcc[i][0] = 0.0;
     45e:	str	r4, [r0, #52]	; 0x34
        filtAcc[i][1] = 0.0;
     460:	str	r4, [r0, #56]	; 0x38

    LPFEnabled = false;

    // Clear accelerometer buffer
    for (size_t i = 0; i < 3; i++) {
        acc[i] = 0.0;
     462:	str	r4, [r0, #28]
        filtAcc[i][0] = 0.0;
     464:	str	r4, [r0, #60]	; 0x3c
        filtAcc[i][1] = 0.0;
     466:	str	r4, [r0, #64]	; 0x40

    LPFEnabled = false;

    // Clear accelerometer buffer
    for (size_t i = 0; i < 3; i++) {
        acc[i] = 0.0;
     468:	str	r4, [r0, #32]
        filtAcc[i][0] = 0.0;
     46a:	str	r4, [r0, #68]	; 0x44
        filtAcc[i][1] = 0.0;
     46c:	str	r4, [r0, #72]	; 0x48
    }

    // Clear gyroscope buffer
    for (size_t i = 0; i < 3; i++) {
        gyro[i] = 0.0;
     46e:	str.w	r2, [r1], #4
        filtAcc[i][0] = 0.0;
        filtAcc[i][1] = 0.0;
    }

    // Clear gyroscope buffer
    for (size_t i = 0; i < 3; i++) {
     472:	cmp	r1, r5
        gyro[i] = 0.0;
        filtGyro[i][0] = 0.0;
     474:	str	r2, [r0, #76]	; 0x4c
        filtAcc[i][1] = 0.0;
    }

    // Clear gyroscope buffer
    for (size_t i = 0; i < 3; i++) {
        gyro[i] = 0.0;
     476:	mov.w	r4, #0
        filtGyro[i][0] = 0.0;
        filtGyro[i][1] = 0.0;
     47a:	str	r2, [r0, #80]	; 0x50
     47c:	add.w	r0, r0, #8

        angle[i] = 0.0;
     480:	str	r2, [r1, #80]	; 0x50
        euler[i] = 0.0;
     482:	str	r2, [r1, #92]	; 0x5c
        filtAcc[i][0] = 0.0;
        filtAcc[i][1] = 0.0;
    }

    // Clear gyroscope buffer
    for (size_t i = 0; i < 3; i++) {
     484:	bne.n	46e <IMU::IMU()+0x26>
        angle[i] = 0.0;
        euler[i] = 0.0;
    }
    
    // Clear temperature buffer
    temp = 0.0;
     486:	str	r4, [r3, #48]	; 0x30
    filtTemp[0] = 0.0;
    filtTemp[1] = 0.0;

}
     488:	mov	r0, r3
        euler[i] = 0.0;
    }
    
    // Clear temperature buffer
    temp = 0.0;
    filtTemp[0] = 0.0;
     48a:	str	r4, [r3, #100]	; 0x64
    filtTemp[1] = 0.0;
     48c:	str	r4, [r3, #104]	; 0x68

}
     48e:	pop	{r4, r5, r6}
     490:	bx	lr
     492:	nop

00000494 <IMU::~IMU()>:

IMU::~IMU() {}
     494:	bx	lr
     496:	nop

00000498 <IMU::enableLPF(float, float)>:
void IMU::enableLPF(float cutoffFreqHz, float sampleTimeS) {
    
    LPFEnabled = true;

    // Compute equivalent 'RC' constant from cutoff frequency
    float RC = 1.0 / (6.28318530718 * cutoffFreqHz);
     498:	vcvt.f64.f32	d7, s0

}

void IMU::enableLPF(float cutoffFreqHz, float sampleTimeS) {
    
    LPFEnabled = true;
     49c:	movs	r3, #1

    // Compute equivalent 'RC' constant from cutoff frequency
    float RC = 1.0 / (6.28318530718 * cutoffFreqHz);
     49e:	vmov.f64	d5, #112	; 0x3f800000  1.0

}

void IMU::enableLPF(float cutoffFreqHz, float sampleTimeS) {
    
    LPFEnabled = true;
     4a2:	strb	r3, [r0, #0]

    // Compute equivalent 'RC' constant from cutoff frequency
    float RC = 1.0 / (6.28318530718 * cutoffFreqHz);
     4a4:	vldr	d6, [pc, #40]	; 4d0 <IMU::enableLPF(float, float)+0x38>
     4a8:	vmul.f64	d6, d7, d6
     4ac:	vdiv.f64	d7, d5, d6
     4b0:	vcvt.f32.f64	s14, d7

    // Compute filter coefficients
    LPFCoeff[0] = sampleTimeS / (sampleTimeS + RC);
     4b4:	vadd.f32	s15, s14, s1
     4b8:	vdiv.f32	s12, s1, s15
    LPFCoeff[1] = RC / (sampleTimeS + RC);
     4bc:	vdiv.f32	s13, s14, s15

    // Compute equivalent 'RC' constant from cutoff frequency
    float RC = 1.0 / (6.28318530718 * cutoffFreqHz);

    // Compute filter coefficients
    LPFCoeff[0] = sampleTimeS / (sampleTimeS + RC);
     4c0:	vstr	s12, [r0, #4]
    LPFCoeff[1] = RC / (sampleTimeS + RC);
     4c4:	vstr	s13, [r0, #8]
     4c8:	bx	lr
     4ca:	nop
     4cc:	nop.w
     4d0:	.word	0x54442eea
     4d4:	.word	0x401921fb

000004d8 <IMU::getEuler(int)>:
float IMU::getAngle(int axis) {
    return angle[axis];
}

float IMU::getEuler(int axis) {
    return euler[axis] * (180 / PI);
     4d8:	add.w	r1, r0, r1, lsl #2
     4dc:	vldr	s0, [r1, #132]	; 0x84
     4e0:	vldr	d7, [pc, #20]	; 4f8 <IMU::getEuler(int)+0x20>
     4e4:	vcvt.f64.f32	d0, s0
     4e8:	vmul.f64	d0, d0, d7
}
     4ec:	vcvt.f32.f64	s0, d0
     4f0:	bx	lr
     4f2:	nop
     4f4:	nop.w
     4f8:	.word	0x1a63c1f8
     4fc:	.word	0x404ca5dc

00000500 <IMU::enable()>:

}

IMU::~IMU() {}

void IMU::enable() {
     500:	push	{r4, r5, r6, lr}

    // Setup I2C
    Wire1.setSCL(SCL_PIN);
     502:	ldr	r4, [pc, #112]	; (574 <IMU::enable()+0x74>)
     504:	movs	r1, #16
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
     506:	movs	r5, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     508:	movs	r6, #210	; 0xd2
     50a:	mov	r0, r4
     50c:	bl	204c <TwoWire::setSCL(unsigned char)>
    Wire1.setSDA(SDA_PIN);
     510:	mov	r0, r4
     512:	movs	r1, #17
     514:	bl	1fd0 <TwoWire::setSDA(unsigned char)>
    Wire1.begin();
     518:	mov	r0, r4
     51a:	bl	1efc <TwoWire::begin()>
    Wire1.setClock(I2C_CLK);
     51e:	mov	r0, r4
     520:	ldr	r1, [pc, #84]	; (578 <IMU::enable()+0x78>)
     522:	bl	2424 <TwoWire::setClock(unsigned long)>
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     526:	mov	r0, r4
     528:	movs	r1, #107	; 0x6b
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     52a:	strb.w	r6, [r4, #61]	; 0x3d
		transmitting = 1;
     52e:	strb.w	r5, [r4, #96]	; 0x60
		txBufferLength = 1;
     532:	strb.w	r5, [r4, #95]	; 0x5f
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     536:	bl	1e90 <TwoWire::write(unsigned char)>
     53a:	mov	r0, r4
     53c:	movs	r1, #0
     53e:	bl	1e90 <TwoWire::write(unsigned char)>

    // Update PWR_MGMT_1 register to disable sleep mode
    Wire1.beginTransmission(IMU_ADDR);
    Wire1.write(0x6B);
    Wire1.write(0);
    Wire1.endTransmission(true);
     542:	mov	r1, r5
     544:	mov	r0, r4
     546:	bl	2224 <TwoWire::endTransmission(unsigned char)>
     54a:	mov	r0, r4
     54c:	movs	r1, #26
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     54e:	strb.w	r6, [r4, #61]	; 0x3d
		transmitting = 1;
     552:	strb.w	r5, [r4, #96]	; 0x60
		txBufferLength = 1;
     556:	strb.w	r5, [r4, #95]	; 0x5f
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     55a:	bl	1e90 <TwoWire::write(unsigned char)>
     55e:	mov	r0, r4
     560:	movs	r1, #0
     562:	bl	1e90 <TwoWire::write(unsigned char)>

    // Update CONFIG register to enable device
    Wire1.beginTransmission(IMU_ADDR);
    Wire1.write(0x1A);
    Wire1.write(0);
    Wire1.endTransmission(true);
     566:	mov	r1, r5
     568:	mov	r0, r4

}
     56a:	ldmia.w	sp!, {r4, r5, r6, lr}

    // Update CONFIG register to enable device
    Wire1.beginTransmission(IMU_ADDR);
    Wire1.write(0x1A);
    Wire1.write(0);
    Wire1.endTransmission(true);
     56e:	b.w	2224 <TwoWire::endTransmission(unsigned char)>
     572:	nop
     574:	.word	0x20000aac
     578:	.word	0x00061a80
     57c:	.word	0x00000000

00000580 <IMU::updateAcc()>:
    updateAcc();
    updateGyro();
    updateTemp();
}

void IMU::updateAcc() {
     580:	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     582:	ldr	r4, [pc, #388]	; (708 <IMU::updateAcc()+0x188>)
     584:	movs	r3, #210	; 0xd2
		transmitting = 1;
     586:	movs	r6, #1
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     588:	movs	r1, #59	; 0x3b
     58a:	mov	r5, r0
     58c:	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     58e:	strb.w	r3, [r4, #61]	; 0x3d
		transmitting = 1;
     592:	strb.w	r6, [r4, #96]	; 0x60
		txBufferLength = 1;
     596:	strb.w	r6, [r4, #95]	; 0x5f
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     59a:	bl	1e90 <TwoWire::write(unsigned char)>

    Wire1.beginTransmission(IMU_ADDR);
    Wire1.write(0x3B); // First register of 6 accelerometer registers
    Wire1.endTransmission(false);
     59e:	movs	r1, #0
     5a0:	mov	r0, r4
     5a2:	bl	2224 <TwoWire::endTransmission(unsigned char)>
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
	}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
     5a6:	movs	r2, #6
     5a8:	mov	r3, r6
     5aa:	mov	r0, r4
     5ac:	movs	r1, #105	; 0x69
     5ae:	bl	2304 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     5b2:	ldrb.w	r2, [r4, #58]	; 0x3a
     5b6:	ldrb.w	r0, [r4, #59]	; 0x3b
     5ba:	cmp	r2, r0
     5bc:	bcs.n	6b6 <IMU::updateAcc()+0x136>
		return rxBuffer[rxBufferIndex++];
     5be:	adds	r3, r2, r6
     5c0:	adds	r1, r4, r2
     5c2:	uxtb	r3, r3
    Wire1.requestFrom(IMU_ADDR, 6, true);

    int16_t x = ((int16_t) Wire1.read() << 8 | Wire1.read());
     5c4:	ldrsb.w	r6, [r1, #26]
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     5c8:	cmp	r0, r3
		return rxBuffer[rxBufferIndex++];
     5ca:	strb.w	r3, [r4, #58]	; 0x3a
     5ce:	mov.w	r7, r6, lsl #8
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     5d2:	bls.n	6c4 <IMU::updateAcc()+0x144>
		return rxBuffer[rxBufferIndex++];
     5d4:	add	r3, r4
     5d6:	adds	r1, r2, #2
     5d8:	ldrb	r6, [r3, #26]
     5da:	uxtb	r3, r1
     5dc:	orrs	r6, r7
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     5de:	cmp	r3, r0
		return rxBuffer[rxBufferIndex++];
     5e0:	strb.w	r3, [r4, #58]	; 0x3a
     5e4:	vmov	s15, r6
     5e8:	vldr	d4, [pc, #252]	; 6e8 <IMU::updateAcc()+0x168>
     5ec:	vcvt.f64.s32	d6, s15
     5f0:	vldr	d7, [pc, #252]	; 6f0 <IMU::updateAcc()+0x170>
     5f4:	vfms.f64	d7, d6, d4
     5f8:	vcvt.f32.f64	s11, d7
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     5fc:	bcs.n	6d8 <IMU::updateAcc()+0x158>
		return rxBuffer[rxBufferIndex++];
     5fe:	adds	r1, r4, r3
     600:	adds	r3, r2, #3
     602:	uxtb	r3, r3
    int16_t y = ((int16_t) Wire1.read() << 8 | Wire1.read());
     604:	ldrsb.w	r6, [r1, #26]
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     608:	cmp	r3, r0
     60a:	mov.w	r6, r6, lsl #8
		return rxBuffer[rxBufferIndex++];
     60e:	strb.w	r3, [r4, #58]	; 0x3a
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     612:	bcs.n	6d8 <IMU::updateAcc()+0x158>
		return rxBuffer[rxBufferIndex++];
     614:	add	r3, r4
     616:	adds	r1, r2, #4
     618:	ldrb	r3, [r3, #26]
     61a:	uxtb	r1, r1
     61c:	orrs	r3, r6
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     61e:	cmp	r1, r0
		return rxBuffer[rxBufferIndex++];
     620:	strb.w	r1, [r4, #58]	; 0x3a
     624:	vmov	s15, r3
     628:	vcvt.f64.s32	d6, s15
     62c:	vldr	d7, [pc, #200]	; 6f8 <IMU::updateAcc()+0x178>
     630:	vfms.f64	d7, d6, d4
     634:	vcvt.f32.f64	s14, d7
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     638:	bcs.n	6d2 <IMU::updateAcc()+0x152>
		return rxBuffer[rxBufferIndex++];
     63a:	adds	r3, r2, #5
     63c:	add	r1, r4
     63e:	uxtb	r3, r3
     640:	ldrb	r2, [r1, #26]
     642:	strb.w	r3, [r4, #58]	; 0x3a
    int16_t z = ((int16_t) Wire1.read() << 8 | Wire1.read());
     646:	lsls	r2, r2, #8
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     648:	cmp	r0, r3
     64a:	sxth	r2, r2
     64c:	bls.n	6d2 <IMU::updateAcc()+0x152>
		return rxBuffer[rxBufferIndex++];
     64e:	adds	r1, r4, r3
     650:	adds	r3, #1
     652:	ldrb	r1, [r1, #26]
     654:	strb.w	r3, [r4, #58]	; 0x3a
     658:	orrs	r2, r1
     65a:	vmov	s15, r2
     65e:	vldr	d3, [pc, #136]	; 6e8 <IMU::updateAcc()+0x168>
     662:	vcvt.f64.s32	d4, s15
     666:	vldr	d6, [pc, #152]	; 700 <IMU::updateAcc()+0x180>
     66a:	vfms.f64	d6, d4, d3
     66e:	vcvt.f32.f64	s12, d6
    // Convert from IMU axis to rocket axis
    acc[0] = -1 * (((float) y) / ACC_SCALE) - ACC_ERROR_X;
    acc[1] = -1 * (((float) z) / ACC_SCALE) - ACC_ERROR_Y;
    acc[2] = -1 * (((float) x) / ACC_SCALE) - ACC_ERROR_Z;

    if (LPFEnabled) {
     672:	ldrb	r3, [r5, #0]
    int16_t x = ((int16_t) Wire1.read() << 8 | Wire1.read());
    int16_t y = ((int16_t) Wire1.read() << 8 | Wire1.read());
    int16_t z = ((int16_t) Wire1.read() << 8 | Wire1.read());

    // Convert from IMU axis to rocket axis
    acc[0] = -1 * (((float) y) / ACC_SCALE) - ACC_ERROR_X;
     674:	vstr	s14, [r5, #24]
    acc[1] = -1 * (((float) z) / ACC_SCALE) - ACC_ERROR_Y;
     678:	vstr	s12, [r5, #28]
    acc[2] = -1 * (((float) x) / ACC_SCALE) - ACC_ERROR_Z;
     67c:	vstr	s11, [r5, #32]

    if (LPFEnabled) {
     680:	cbz	r3, 6b4 <IMU::updateAcc()+0x134>
     682:	mov	r3, r5
     684:	vldr	s11, [r5, #4]
     688:	vldr	s12, [r5, #8]
     68c:	add.w	r2, r5, #28
     690:	add.w	r1, r5, #24
        for (size_t i = 0; i < 3; i++) {
            // Shift output values
            filtAcc[i][1] = filtAcc[i][0];
     694:	vldr	s13, [r3, #52]	; 0x34
     698:	adds	r3, #8
            // Compute new output value
            filtAcc[i][0] = LPFCoeff[0] * acc[i] + LPFCoeff[1] * filtAcc[i][1];
     69a:	vmul.f32	s15, s13, s12
    acc[2] = -1 * (((float) x) / ACC_SCALE) - ACC_ERROR_Z;

    if (LPFEnabled) {
        for (size_t i = 0; i < 3; i++) {
            // Shift output values
            filtAcc[i][1] = filtAcc[i][0];
     69e:	vstr	s13, [r3, #48]	; 0x30
            // Compute new output value
            filtAcc[i][0] = LPFCoeff[0] * acc[i] + LPFCoeff[1] * filtAcc[i][1];
     6a2:	vfma.f32	s15, s11, s14
     6a6:	vstr	s15, [r3, #44]	; 0x2c
    acc[0] = -1 * (((float) y) / ACC_SCALE) - ACC_ERROR_X;
    acc[1] = -1 * (((float) z) / ACC_SCALE) - ACC_ERROR_Y;
    acc[2] = -1 * (((float) x) / ACC_SCALE) - ACC_ERROR_Z;

    if (LPFEnabled) {
        for (size_t i = 0; i < 3; i++) {
     6aa:	cmp	r1, r3
     6ac:	beq.n	6b4 <IMU::updateAcc()+0x134>
     6ae:	vldmia	r2!, {s14}
     6b2:	b.n	694 <IMU::updateAcc()+0x114>
     6b4:	pop	{r3, r4, r5, r6, r7, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     6b6:	vldr	s11, [pc, #84]	; 70c <IMU::updateAcc()+0x18c>
     6ba:	vldr	s14, [pc, #84]	; 710 <IMU::updateAcc()+0x190>
     6be:	vldr	s12, [pc, #84]	; 714 <IMU::updateAcc()+0x194>
     6c2:	b.n	672 <IMU::updateAcc()+0xf2>
     6c4:	vldr	s11, [pc, #68]	; 70c <IMU::updateAcc()+0x18c>
     6c8:	mov.w	r2, #4294967295
     6cc:	vldr	s14, [pc, #64]	; 710 <IMU::updateAcc()+0x190>
     6d0:	b.n	646 <IMU::updateAcc()+0xc6>
     6d2:	vldr	s12, [pc, #64]	; 714 <IMU::updateAcc()+0x194>
     6d6:	b.n	672 <IMU::updateAcc()+0xf2>
     6d8:	vldr	s14, [pc, #52]	; 710 <IMU::updateAcc()+0x190>
     6dc:	vldr	s12, [pc, #52]	; 714 <IMU::updateAcc()+0x194>
     6e0:	b.n	672 <IMU::updateAcc()+0xf2>
     6e2:	nop
     6e4:	nop.w
     6e8:	.word	0x00000000
     6ec:	.word	0x3f100000
     6f0:	.word	0xd2f1a9fc
     6f4:	.word	0x3f70624d
     6f8:	.word	0xbc6a7efa
     6fc:	.word	0xbf789374
     700:	.word	0x9999999a
     704:	.word	0x3fa99999
     708:	.word	0x20000aac
     70c:	.word	0x3b85126f
     710:	.word	0xbbc29ba6
     714:	.word	0x3d4d0ccd

00000718 <IMU::updateTemp()>:
    }
    

}

void IMU::updateTemp() {
     718:	push	{r4, r5, r6, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     71a:	ldr	r4, [pc, #172]	; (7c8 <IMU::updateTemp()+0xb0>)
     71c:	movs	r3, #210	; 0xd2
		transmitting = 1;
     71e:	movs	r6, #1
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     720:	movs	r1, #65	; 0x41
     722:	mov	r5, r0
     724:	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     726:	strb.w	r3, [r4, #61]	; 0x3d
		transmitting = 1;
     72a:	strb.w	r6, [r4, #96]	; 0x60
		txBufferLength = 1;
     72e:	strb.w	r6, [r4, #95]	; 0x5f
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     732:	bl	1e90 <TwoWire::write(unsigned char)>

    Wire1.beginTransmission(IMU_ADDR);
    Wire1.write(0x41); // First register of 2 temperature registers
    Wire1.endTransmission(false);
     736:	movs	r1, #0
     738:	mov	r0, r4
     73a:	bl	2224 <TwoWire::endTransmission(unsigned char)>
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
	}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
     73e:	movs	r2, #2
     740:	movs	r1, #105	; 0x69
     742:	mov	r3, r6
     744:	mov	r0, r4
     746:	bl	2304 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     74a:	ldrb.w	r2, [r4, #58]	; 0x3a
     74e:	ldrb.w	r1, [r4, #59]	; 0x3b
     752:	cmp	r2, r1
     754:	bcs.n	7ba <IMU::updateTemp()+0xa2>
		return rxBuffer[rxBufferIndex++];
     756:	adds	r3, r2, r6
     758:	adds	r0, r4, r2
     75a:	uxtb	r3, r3
    Wire1.requestFrom(IMU_ADDR, 2, true);

    int16_t t = ((int16_t) Wire1.read() << 8 | Wire1.read());
     75c:	ldrsb.w	r0, [r0, #26]
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     760:	cmp	r1, r3
		return rxBuffer[rxBufferIndex++];
     762:	strb.w	r3, [r4, #58]	; 0x3a
     766:	mov.w	r0, r0, lsl #8
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     76a:	bls.n	7ba <IMU::updateTemp()+0xa2>
		return rxBuffer[rxBufferIndex++];
     76c:	add	r3, r4
     76e:	vmov.f64	d5, #57	; 0x41c80000  25.0
     772:	adds	r2, #2
     774:	ldrb	r3, [r3, #26]
     776:	strb.w	r2, [r4, #58]	; 0x3a
     77a:	orrs	r3, r0
     77c:	vmov	s15, r3
     780:	vldr	d4, [pc, #60]	; 7c0 <IMU::updateTemp()+0xa8>
     784:	vcvt.f64.s32	d6, s15
     788:	vdiv.f64	d7, d6, d4
     78c:	vadd.f64	d7, d7, d5
     790:	vcvt.f32.f64	s14, d7

    temp = (((float) t) / TEMP_SCALE) + TEMP_OFFSET;

    if (LPFEnabled) {
     794:	ldrb	r3, [r5, #0]
    Wire1.endTransmission(false);
    Wire1.requestFrom(IMU_ADDR, 2, true);

    int16_t t = ((int16_t) Wire1.read() << 8 | Wire1.read());

    temp = (((float) t) / TEMP_SCALE) + TEMP_OFFSET;
     796:	vstr	s14, [r5, #48]	; 0x30

    if (LPFEnabled) {
     79a:	cbz	r3, 7b8 <IMU::updateTemp()+0xa0>

        // Shift output values
        filtTemp[1] = filtTemp[0];
     79c:	vldr	s13, [r5, #100]	; 0x64
        // Compute new output value
        filtTemp[0] = LPFCoeff[0] * temp + LPFCoeff[1] * filtTemp[1];
     7a0:	vldr	s15, [r5, #8]
     7a4:	vldr	s12, [r5, #4]
     7a8:	vmul.f32	s15, s13, s15
    temp = (((float) t) / TEMP_SCALE) + TEMP_OFFSET;

    if (LPFEnabled) {

        // Shift output values
        filtTemp[1] = filtTemp[0];
     7ac:	vstr	s13, [r5, #104]	; 0x68
        // Compute new output value
        filtTemp[0] = LPFCoeff[0] * temp + LPFCoeff[1] * filtTemp[1];
     7b0:	vfma.f32	s15, s12, s14
     7b4:	vstr	s15, [r5, #100]	; 0x64
     7b8:	pop	{r4, r5, r6, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     7ba:	vldr	s14, [pc, #16]	; 7cc <IMU::updateTemp()+0xb4>
     7be:	b.n	794 <IMU::updateTemp()+0x7c>
     7c0:	.word	0xcccccccd
     7c4:	.word	0x40746ccc
     7c8:	.word	0x20000aac
     7cc:	.word	0x41c7f9bc

000007d0 <IMU::updateGyro()>:
     7d0:	ldr	r2, [pc, #940]	; (b80 <IMU::updateGyro()+0x3b0>)
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     7d2:	movs	r3, #210	; 0xd2
}

void IMU::updateGyro() {

    // Get time for calculating orientation
    previousTime = currentTime;
     7d4:	vldr	s15, [r0, #16]
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     7d8:	movs	r1, #67	; 0x43
     7da:	vldr	s14, [r2]
    currentTime = millis();
    elapsedTime = (currentTime - previousTime) / 1000; // Convert to seconds
     7de:	vldr	s13, [pc, #932]	; b84 <IMU::updateGyro()+0x3b4>

void IMU::updateGyro() {

    // Get time for calculating orientation
    previousTime = currentTime;
    currentTime = millis();
     7e2:	vcvt.f32.u32	s14, s14
        }
    }

}

void IMU::updateGyro() {
     7e6:	push	{r4, r5, r6, r7, lr}
     7e8:	vpush	{d8-d15}

    // Get time for calculating orientation
    previousTime = currentTime;
     7ec:	vstr	s15, [r0, #12]
    currentTime = millis();
    elapsedTime = (currentTime - previousTime) / 1000; // Convert to seconds
     7f0:	vsub.f32	s15, s14, s15
        }
    }

}

void IMU::updateGyro() {
     7f4:	mov	r4, r0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     7f6:	ldr	r5, [pc, #912]	; (b88 <IMU::updateGyro()+0x3b8>)
		transmitting = 1;
     7f8:	movs	r6, #1
     7fa:	sub	sp, #20

    // Get time for calculating orientation
    previousTime = currentTime;
    currentTime = millis();
     7fc:	vstr	s14, [r4, #16]
    elapsedTime = (currentTime - previousTime) / 1000; // Convert to seconds
     800:	vdiv.f32	s14, s15, s13
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     804:	mov	r0, r5
     806:	vstr	s14, [r4, #20]
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
     80a:	strb.w	r3, [r5, #61]	; 0x3d
		transmitting = 1;
     80e:	strb.w	r6, [r5, #96]	; 0x60
		txBufferLength = 1;
     812:	strb.w	r6, [r5, #95]	; 0x5f
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
     816:	bl	1e90 <TwoWire::write(unsigned char)>

    Wire1.beginTransmission(IMU_ADDR);
    Wire1.write(0x43); // First register of 6 gyroscope registers
    Wire1.endTransmission(false);
     81a:	movs	r1, #0
     81c:	mov	r0, r5
     81e:	bl	2224 <TwoWire::endTransmission(unsigned char)>
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
	}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
     822:	movs	r2, #6
     824:	mov	r3, r6
     826:	mov	r0, r5
     828:	movs	r1, #105	; 0x69
     82a:	bl	2304 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     82e:	ldrb.w	r2, [r5, #58]	; 0x3a
     832:	ldrb.w	r0, [r5, #59]	; 0x3b
     836:	cmp	r2, r0
     838:	bcs.w	cb0 <IMU::updateGyro()+0x4e0>
		return rxBuffer[rxBufferIndex++];
     83c:	adds	r3, r2, r6
     83e:	adds	r1, r5, r2
     840:	uxtb	r3, r3
    Wire1.requestFrom(IMU_ADDR, 6, true);

    int16_t x = ((int16_t) Wire1.read() << 8 | Wire1.read());
     842:	ldrsb.w	r6, [r1, #26]
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     846:	cmp	r0, r3
		return rxBuffer[rxBufferIndex++];
     848:	strb.w	r3, [r5, #58]	; 0x3a
     84c:	mov.w	r7, r6, lsl #8
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     850:	bls.w	d2a <IMU::updateGyro()+0x55a>
		return rxBuffer[rxBufferIndex++];
     854:	add	r3, r5
     856:	adds	r1, r2, #2
     858:	ldrb	r6, [r3, #26]
     85a:	uxtb	r3, r1
     85c:	orrs	r6, r7
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     85e:	cmp	r3, r0
		return rxBuffer[rxBufferIndex++];
     860:	strb.w	r3, [r5, #58]	; 0x3a
     864:	vmov	s15, r6
     868:	vldr	d4, [pc, #716]	; b38 <IMU::updateGyro()+0x368>
     86c:	vcvt.f64.s32	d7, s15
     870:	vldr	d6, [pc, #716]	; b40 <IMU::updateGyro()+0x370>
     874:	vdiv.f64	d14, d7, d4
     878:	vsub.f64	d14, d6, d14
     87c:	vcvt.f32.f64	s11, d14
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     880:	bcs.w	d20 <IMU::updateGyro()+0x550>
		return rxBuffer[rxBufferIndex++];
     884:	adds	r1, r5, r3
     886:	adds	r3, r2, #3
     888:	uxtb	r3, r3
    int16_t y = ((int16_t) Wire1.read() << 8 | Wire1.read());
     88a:	ldrsb.w	r6, [r1, #26]
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     88e:	cmp	r3, r0
     890:	mov.w	r6, r6, lsl #8
		return rxBuffer[rxBufferIndex++];
     894:	strb.w	r3, [r5, #58]	; 0x3a
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     898:	bcs.w	d20 <IMU::updateGyro()+0x550>
		return rxBuffer[rxBufferIndex++];
     89c:	add	r3, r5
     89e:	adds	r1, r2, #4
     8a0:	ldrb	r3, [r3, #26]
     8a2:	uxtb	r1, r1
     8a4:	orrs	r3, r6
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     8a6:	cmp	r1, r0
		return rxBuffer[rxBufferIndex++];
     8a8:	strb.w	r1, [r5, #58]	; 0x3a
     8ac:	vmov	s15, r3
     8b0:	vcvt.f64.s32	d6, s15
     8b4:	vldr	d7, [pc, #656]	; b48 <IMU::updateGyro()+0x378>
     8b8:	vdiv.f64	d3, d6, d4
     8bc:	vsub.f64	d7, d7, d3
     8c0:	vcvt.f32.f64	s14, d7
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     8c4:	bcs.w	d1a <IMU::updateGyro()+0x54a>
		return rxBuffer[rxBufferIndex++];
     8c8:	adds	r3, r2, #5
     8ca:	add	r1, r5
     8cc:	uxtb	r3, r3
     8ce:	ldrb	r2, [r1, #26]
     8d0:	strb.w	r3, [r5, #58]	; 0x3a
    int16_t z = ((int16_t) Wire1.read() << 8 | Wire1.read());
     8d4:	lsls	r2, r2, #8
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     8d6:	cmp	r0, r3
     8d8:	sxth	r2, r2
     8da:	bls.w	d1a <IMU::updateGyro()+0x54a>
		return rxBuffer[rxBufferIndex++];
     8de:	adds	r1, r5, r3
     8e0:	adds	r3, #1
     8e2:	ldrb	r1, [r1, #26]
     8e4:	strb.w	r3, [r5, #58]	; 0x3a
     8e8:	orrs	r2, r1
     8ea:	vmov	s15, r2
     8ee:	vldr	d3, [pc, #584]	; b38 <IMU::updateGyro()+0x368>
     8f2:	vcvt.f64.s32	d6, s15
     8f6:	vldr	d4, [pc, #600]	; b50 <IMU::updateGyro()+0x380>
     8fa:	vdiv.f64	d9, d6, d3
     8fe:	vsub.f64	d9, d4, d9
     902:	vcvt.f32.f64	s18, d9
    // Convert from IMU axis to rocket axis
    gyro[0] = -1 * (((float) y) / GYRO_SCALE) - GYRO_ERROR_X;
    gyro[1] = -1 * (((float) z) / GYRO_SCALE) - GYRO_ERROR_Y;
    gyro[2] = -1 * (((float) x) / GYRO_SCALE) - GYRO_ERROR_Z;

    if (LPFEnabled) {
     906:	ldrb	r1, [r4, #0]
    int16_t x = ((int16_t) Wire1.read() << 8 | Wire1.read());
    int16_t y = ((int16_t) Wire1.read() << 8 | Wire1.read());
    int16_t z = ((int16_t) Wire1.read() << 8 | Wire1.read());

    // Convert from IMU axis to rocket axis
    gyro[0] = -1 * (((float) y) / GYRO_SCALE) - GYRO_ERROR_X;
     908:	vstr	s14, [r4, #36]	; 0x24
    gyro[1] = -1 * (((float) z) / GYRO_SCALE) - GYRO_ERROR_Y;
     90c:	vstr	s18, [r4, #40]	; 0x28
    gyro[2] = -1 * (((float) x) / GYRO_SCALE) - GYRO_ERROR_Z;
     910:	vstr	s11, [r4, #44]	; 0x2c

    if (LPFEnabled) {
     914:	cbz	r1, 94c <IMU::updateGyro()+0x17c>
     916:	vmov.f32	s12, s14
     91a:	vldr	s9, [r4, #4]
     91e:	mov	r3, r4
     920:	vldr	s10, [r4, #8]
     924:	add.w	r2, r4, #40	; 0x28
     928:	add.w	r0, r4, #24
        for (size_t i = 0; i < 3; i++) {
            // Shift output values
            filtGyro[i][1] = filtGyro[i][0];
     92c:	vldr	s13, [r3, #76]	; 0x4c
     930:	adds	r3, #8
            // Compute new output value
            filtGyro[i][0] = LPFCoeff[0] * gyro[i] + LPFCoeff[1] * filtGyro[i][1];
     932:	vmul.f32	s15, s13, s10
    gyro[2] = -1 * (((float) x) / GYRO_SCALE) - GYRO_ERROR_Z;

    if (LPFEnabled) {
        for (size_t i = 0; i < 3; i++) {
            // Shift output values
            filtGyro[i][1] = filtGyro[i][0];
     936:	vstr	s13, [r3, #72]	; 0x48
            // Compute new output value
            filtGyro[i][0] = LPFCoeff[0] * gyro[i] + LPFCoeff[1] * filtGyro[i][1];
     93a:	vfma.f32	s15, s12, s9
     93e:	vstr	s15, [r3, #68]	; 0x44
    gyro[0] = -1 * (((float) y) / GYRO_SCALE) - GYRO_ERROR_X;
    gyro[1] = -1 * (((float) z) / GYRO_SCALE) - GYRO_ERROR_Y;
    gyro[2] = -1 * (((float) x) / GYRO_SCALE) - GYRO_ERROR_Z;

    if (LPFEnabled) {
        for (size_t i = 0; i < 3; i++) {
     942:	cmp	r0, r3
     944:	beq.n	94c <IMU::updateGyro()+0x17c>
     946:	vldmia	r2!, {s12}
     94a:	b.n	92c <IMU::updateGyro()+0x15c>

float IMU::getGyro(int axis) {
    if (LPFEnabled) {
        return ((filtGyro[axis][0] * PI) / 180);
    } else {
        return ((gyro[axis] * PI) / 180);
     94c:	vldr	d2, [pc, #520]	; b58 <IMU::updateGyro()+0x388>
     950:	vldr	d3, [pc, #524]	; b60 <IMU::updateGyro()+0x390>
     954:	vldr	s20, [r4, #20]
     958:	add.w	r3, r4, #120	; 0x78
     95c:	mov	r2, r4
     95e:	add.w	r0, r4, #132	; 0x84
        }
    }

    for (size_t i = 0; i < 3; i++) {
        angle[i] = angle[i] + (getGyro(i) * elapsedTime);
        if (angle[i] > 180) {
     962:	vldr	s10, [pc, #552]	; b8c <IMU::updateGyro()+0x3bc>
            angle[i] = angle[i] - 360;
        } else if (angle[i] < -180) {
     966:	vldr	s2, [pc, #552]	; b90 <IMU::updateGyro()+0x3c0>
            angle[i] = angle[i] + 360;
     96a:	vldr	s3, [pc, #552]	; b94 <IMU::updateGyro()+0x3c4>
            filtGyro[i][0] = LPFCoeff[0] * gyro[i] + LPFCoeff[1] * filtGyro[i][1];
        }
    }

    for (size_t i = 0; i < 3; i++) {
        angle[i] = angle[i] + (getGyro(i) * elapsedTime);
     96e:	vldmia	r3!, {s15}
        return acc[axis];
    }
}

float IMU::getGyro(int axis) {
    if (LPFEnabled) {
     972:	cmp	r1, #0
     974:	beq.w	bac <IMU::updateGyro()+0x3dc>
        return ((filtGyro[axis][0] * PI) / 180);
     978:	vldr	s8, [r2, #76]	; 0x4c
     97c:	vcvt.f64.f32	d4, s8
     980:	vmul.f64	d4, d4, d2
     984:	vdiv.f64	d6, d4, d3
     988:	vcvt.f32.f64	s12, d6
            filtGyro[i][0] = LPFCoeff[0] * gyro[i] + LPFCoeff[1] * filtGyro[i][1];
        }
    }

    for (size_t i = 0; i < 3; i++) {
        angle[i] = angle[i] + (getGyro(i) * elapsedTime);
     98c:	vfma.f32	s15, s20, s12
        if (angle[i] > 180) {
     990:	vcmpe.f32	s15, s10
     994:	vmrs	APSR_nzcv, fpscr
     998:	ble.w	b98 <IMU::updateGyro()+0x3c8>
            angle[i] = angle[i] - 360;
     99c:	vsub.f32	s15, s15, s3
     9a0:	vstr	s15, [r3, #-4]
            // Compute new output value
            filtGyro[i][0] = LPFCoeff[0] * gyro[i] + LPFCoeff[1] * filtGyro[i][1];
        }
    }

    for (size_t i = 0; i < 3; i++) {
     9a4:	cmp	r0, r3
     9a6:	add.w	r2, r2, #8
     9aa:	bne.n	96e <IMU::updateGyro()+0x19e>
        } else if (angle[i] < -180) {
            angle[i] = angle[i] + 360;
        }
    }
    
    euler[0] = euler[0]
     9ac:	vldr	s16, [r4, #132]	; 0x84
        return acc[axis];
    }
}

float IMU::getGyro(int axis) {
    if (LPFEnabled) {
     9b0:	cmp	r1, #0
     9b2:	beq.w	bc2 <IMU::updateGyro()+0x3f2>
        }
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
     9b6:	vldr	s14, [r4, #76]	; 0x4c
     9ba:	vcvt.f64.f32	d8, s16
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     9be:	vcvt.f64.f32	d10, s20
        }
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
     9c2:	vcvt.f64.f32	d7, s14
     9c6:	vmov.f64	d0, d8
     9ca:	vldr	d13, [pc, #396]	; b58 <IMU::updateGyro()+0x388>
     9ce:	vldr	d12, [pc, #400]	; b60 <IMU::updateGyro()+0x390>
     9d2:	vmul.f64	d7, d7, d13
     9d6:	vdiv.f64	d11, d7, d12
     9da:	bl	45e0 <sin>
     9de:	vldr	s28, [r4, #136]	; 0x88
     9e2:	vcvt.f64.f32	d14, s28
     9e6:	vmov.f64	d15, d0
     9ea:	vmov.f64	d0, d14
     9ee:	bl	4680 <tan>
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     9f2:	vldr	s14, [r4, #84]	; 0x54
     9f6:	vcvt.f64.f32	d7, s14
        }
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
     9fa:	vstr	d0, [sp]
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     9fe:	vmul.f64	d7, d7, d13
     a02:	vmov.f64	d0, d8
     a06:	vdiv.f64	d9, d7, d12
     a0a:	bl	4540 <cos>
     a0e:	vldr	s14, [r4, #92]	; 0x5c
     a12:	vcvt.f64.f32	d7, s14
     a16:	vldr	d6, [sp]
     a1a:	vmul.f64	d7, d7, d13
        }
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
     a1e:	vcvt.f32.f64	s22, d11
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     a22:	vdiv.f64	d5, d7, d12
        }
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
     a26:	vcvt.f64.f32	d11, s22
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     a2a:	vmul.f64	d15, d11, d15
     a2e:	vcvt.f32.f64	s18, d9
     a32:	vcvt.f64.f32	d9, s18
     a36:	vmul.f64	d0, d9, d0
     a3a:	vcvt.f32.f64	s14, d5
     a3e:	vcvt.f64.f32	d7, s14
     a42:	vfma.f64	d7, d15, d6
     a46:	vfma.f64	d7, d0, d6
     a4a:	vmov.f64	d0, d8
     a4e:	vfma.f64	d0, d7, d10
     a52:	vcvt.f32.f64	s0, d0

    euler[1] = euler[1]
    + (((getGyro(0) * cos(euler[0]))
     a56:	vcvt.f64.f32	d13, s0
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     a5a:	vstr	s0, [r4, #132]	; 0x84

    euler[1] = euler[1]
    + (((getGyro(0) * cos(euler[0]))
     a5e:	vmov.f64	d0, d13
     a62:	bl	4540 <cos>
     a66:	vmov.f64	d8, d0
    - (getGyro(1) * sin(euler[0]))) * elapsedTime);
     a6a:	vmov.f64	d0, d13
     a6e:	bl	45e0 <sin>
     a72:	vnmul.f64	d7, d0, d9

    euler[2] = euler[2]
    + ((((getGyro(0) * sin(euler[0])) / (cos(euler[1])))
     a76:	vldr	s24, [r4, #140]	; 0x8c
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);

    euler[1] = euler[1]
    + (((getGyro(0) * cos(euler[0]))
    - (getGyro(1) * sin(euler[0]))) * elapsedTime);
     a7a:	vmov.f64	d15, d0

    euler[2] = euler[2]
    + ((((getGyro(0) * sin(euler[0])) / (cos(euler[1])))
     a7e:	vcvt.f64.f32	d12, s24
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);

    euler[1] = euler[1]
    + (((getGyro(0) * cos(euler[0]))
    - (getGyro(1) * sin(euler[0]))) * elapsedTime);
     a82:	vfma.f64	d7, d11, d8

    euler[2] = euler[2]
    + ((((getGyro(0) * sin(euler[0])) / (cos(euler[1])))
     a86:	vmul.f64	d11, d11, d15
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);

    euler[1] = euler[1]
    + (((getGyro(0) * cos(euler[0]))
    - (getGyro(1) * sin(euler[0]))) * elapsedTime);
     a8a:	vfma.f64	d14, d10, d7
     a8e:	vcvt.f32.f64	s15, d14

    euler[2] = euler[2]
    + ((((getGyro(0) * sin(euler[0])) / (cos(euler[1])))
     a92:	vcvt.f64.f32	d14, s15
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);

    euler[1] = euler[1]
    + (((getGyro(0) * cos(euler[0]))
    - (getGyro(1) * sin(euler[0]))) * elapsedTime);
     a96:	vstr	s15, [r4, #136]	; 0x88

    euler[2] = euler[2]
    + ((((getGyro(0) * sin(euler[0])) / (cos(euler[1])))
     a9a:	vmov.f64	d0, d14
     a9e:	bl	4540 <cos>
     aa2:	vdiv.f64	d5, d11, d0
    + ((getGyro(1) * cos(euler[0])) / (cos(euler[1])))) * elapsedTime);
     aa6:	vmul.f64	d9, d9, d8

    // Keep in range of -Pi to Pi
    if (euler[0] > PI) {
     aaa:	vldr	d6, [pc, #172]	; b58 <IMU::updateGyro()+0x388>
    + (((getGyro(0) * cos(euler[0]))
    - (getGyro(1) * sin(euler[0]))) * elapsedTime);

    euler[2] = euler[2]
    + ((((getGyro(0) * sin(euler[0])) / (cos(euler[1])))
    + ((getGyro(1) * cos(euler[0])) / (cos(euler[1])))) * elapsedTime);
     aae:	vdiv.f64	d7, d9, d0

    // Keep in range of -Pi to Pi
    if (euler[0] > PI) {
     ab2:	vcmpe.f64	d13, d6
     ab6:	vmrs	APSR_nzcv, fpscr
    + (((getGyro(0) * cos(euler[0]))
    - (getGyro(1) * sin(euler[0]))) * elapsedTime);

    euler[2] = euler[2]
    + ((((getGyro(0) * sin(euler[0])) / (cos(euler[1])))
    + ((getGyro(1) * cos(euler[0])) / (cos(euler[1])))) * elapsedTime);
     aba:	vadd.f64	d7, d7, d5
     abe:	vfma.f64	d12, d7, d10
     ac2:	vcvt.f32.f64	s24, d12
     ac6:	vstr	s24, [r4, #140]	; 0x8c

    // Keep in range of -Pi to Pi
    if (euler[0] > PI) {
     aca:	ble.w	ce0 <IMU::updateGyro()+0x510>
        euler[0] = euler[0] - (2 * PI);
     ace:	vldr	d7, [pc, #152]	; b68 <IMU::updateGyro()+0x398>
     ad2:	vsub.f64	d13, d13, d7
     ad6:	vcvt.f32.f64	s26, d13
     ada:	vstr	s26, [r4, #132]	; 0x84
    } else if (euler[0] < -PI) {
        euler[0] = euler[0] + (2 * PI);
    }

    // Keep in range of -PI/2 to Pi/2
    if (euler[1] > (PI/2)) {
     ade:	vldr	d7, [pc, #144]	; b70 <IMU::updateGyro()+0x3a0>
     ae2:	vcmpe.f64	d14, d7
     ae6:	vmrs	APSR_nzcv, fpscr
     aea:	ble.w	cbe <IMU::updateGyro()+0x4ee>
        euler[1] = euler[1] - PI;
     aee:	vldr	d7, [pc, #104]	; b58 <IMU::updateGyro()+0x388>
     af2:	vsub.f64	d14, d14, d7
     af6:	vcvt.f32.f64	s28, d14
     afa:	vstr	s28, [r4, #136]	; 0x88
    } else if (euler[1] < (-PI/2)) {
        euler[1] = euler[1] + PI;
    }
    
    
    if (euler[2] > PI) {
     afe:	vcvt.f64.f32	d7, s24
     b02:	vldr	d6, [pc, #84]	; b58 <IMU::updateGyro()+0x388>
     b06:	vcmpe.f64	d7, d6
     b0a:	vmrs	APSR_nzcv, fpscr
     b0e:	bgt.w	d02 <IMU::updateGyro()+0x532>
        euler[2] = euler[2] - (2 * PI);
    } else if (euler[2] < -PI) {
     b12:	vldr	d6, [pc, #100]	; b78 <IMU::updateGyro()+0x3a8>
     b16:	vcmpe.f64	d7, d6
     b1a:	vmrs	APSR_nzcv, fpscr
     b1e:	bpl.n	b30 <IMU::updateGyro()+0x360>
        euler[2] = euler[2] + (2 * PI);
     b20:	vldr	d6, [pc, #68]	; b68 <IMU::updateGyro()+0x398>
     b24:	vadd.f64	d7, d7, d6
     b28:	vcvt.f32.f64	s14, d7
     b2c:	vstr	s14, [r4, #140]	; 0x8c
    }
    

}
     b30:	add	sp, #20
     b32:	vpop	{d8-d15}
     b36:	pop	{r4, r5, r6, r7, pc}
     b38:	.word	0x00000000
     b3c:	.word	0x40606000
     b40:	.word	0x8db8bac7
     b44:	.word	0x3f76f006
     b48:	.word	0x5f06f694
     b4c:	.word	0x3f654c98
     b50:	.word	0x765fd8ae
     b54:	.word	0xbf661e4f
     b58:	.word	0x54442d18
     b5c:	.word	0x400921fb
     b60:	.word	0x00000000
     b64:	.word	0x40668000
     b68:	.word	0x54442d18
     b6c:	.word	0x401921fb
     b70:	.word	0x54442d18
     b74:	.word	0x3ff921fb
     b78:	.word	0x54442d18
     b7c:	.word	0xc00921fb
     b80:	.word	0x20001ae4
     b84:	.word	0x447a0000
     b88:	.word	0x20000aac
     b8c:	.word	0x43340000
     b90:	.word	0xc3340000
     b94:	.word	0x43b40000

    for (size_t i = 0; i < 3; i++) {
        angle[i] = angle[i] + (getGyro(i) * elapsedTime);
        if (angle[i] > 180) {
            angle[i] = angle[i] - 360;
        } else if (angle[i] < -180) {
     b98:	vcmpe.f32	s15, s2
     b9c:	vmrs	APSR_nzcv, fpscr
            angle[i] = angle[i] + 360;
     ba0:	it	mi
     ba2:	vaddmi.f32	s15, s15, s3
     ba6:	vstr	s15, [r3, #-4]
     baa:	b.n	9a4 <IMU::updateGyro()+0x1d4>

float IMU::getGyro(int axis) {
    if (LPFEnabled) {
        return ((filtGyro[axis][0] * PI) / 180);
    } else {
        return ((gyro[axis] * PI) / 180);
     bac:	vldr	s8, [r3, #-88]	; 0xffffffa8
     bb0:	vcvt.f64.f32	d4, s8
     bb4:	vmul.f64	d4, d4, d2
     bb8:	vdiv.f64	d6, d4, d3
     bbc:	vcvt.f32.f64	s12, d6
     bc0:	b.n	98c <IMU::updateGyro()+0x1bc>
        }
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
     bc2:	vldr	d14, [pc, #372]	; d38 <IMU::updateGyro()+0x568>
     bc6:	vcvt.f64.f32	d7, s14
     bca:	vstr	s11, [sp, #12]
     bce:	vcvt.f64.f32	d8, s16
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     bd2:	vcvt.f64.f32	d10, s20
        }
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
     bd6:	vmul.f64	d7, d7, d14
     bda:	vmov.f64	d0, d8
     bde:	vldr	d13, [pc, #352]	; d40 <IMU::updateGyro()+0x570>
     be2:	vdiv.f64	d11, d7, d13
     be6:	bl	45e0 <sin>
     bea:	vldr	s30, [r4, #136]	; 0x88
     bee:	vcvt.f64.f32	d15, s30
     bf2:	vmov.f64	d12, d0
     bf6:	vmov.f64	d0, d15
     bfa:	bl	4680 <tan>
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     bfe:	vcvt.f64.f32	d7, s18
        }
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
     c02:	vstr	d0, [sp]
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     c06:	vmul.f64	d7, d7, d14
     c0a:	vmov.f64	d0, d8
     c0e:	vdiv.f64	d9, d7, d13
     c12:	bl	4540 <cos>
     c16:	vldr	s11, [sp, #12]
     c1a:	vcvt.f64.f32	d7, s11
     c1e:	vldr	d6, [sp]
     c22:	vmul.f64	d14, d7, d14
     c26:	vdiv.f64	d7, d14, d13
        }
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
     c2a:	vcvt.f32.f64	s22, d11
     c2e:	vcvt.f64.f32	d11, s22
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     c32:	vmul.f64	d12, d12, d11
     c36:	vcvt.f32.f64	s18, d9
     c3a:	vcvt.f64.f32	d9, s18
     c3e:	vmul.f64	d0, d0, d9
     c42:	vcvt.f32.f64	s14, d7
     c46:	vcvt.f64.f32	d7, s14
     c4a:	vfma.f64	d7, d12, d6
     c4e:	vfma.f64	d7, d6, d0
     c52:	vfma.f64	d8, d7, d10
     c56:	vcvt.f32.f64	s16, d8

    euler[1] = euler[1]
    + (((getGyro(0) * cos(euler[0]))
     c5a:	vcvt.f64.f32	d13, s16
    }
    
    euler[0] = euler[0]
    + ((getGyro(2) 
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);
     c5e:	vstr	s16, [r4, #132]	; 0x84

    euler[1] = euler[1]
    + (((getGyro(0) * cos(euler[0]))
     c62:	vmov.f64	d0, d13
     c66:	bl	4540 <cos>
     c6a:	vmov.f64	d8, d0
    - (getGyro(1) * sin(euler[0]))) * elapsedTime);
     c6e:	vmov.f64	d0, d13
     c72:	bl	45e0 <sin>
     c76:	vnmul.f64	d7, d0, d9

    euler[2] = euler[2]
    + ((((getGyro(0) * sin(euler[0])) / (cos(euler[1])))
     c7a:	vldr	s24, [r4, #140]	; 0x8c
     c7e:	vcvt.f64.f32	d12, s24
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);

    euler[1] = euler[1]
    + (((getGyro(0) * cos(euler[0]))
    - (getGyro(1) * sin(euler[0]))) * elapsedTime);
     c82:	vstr	d0, [sp]
     c86:	vfma.f64	d7, d11, d8
     c8a:	vfma.f64	d15, d10, d7
     c8e:	vcvt.f32.f64	s30, d15

    euler[2] = euler[2]
    + ((((getGyro(0) * sin(euler[0])) / (cos(euler[1])))
     c92:	vcvt.f64.f32	d14, s30
    + (getGyro(0) * sin(euler[0]) * tan(euler[1]))
    + (getGyro(1) * cos(euler[0]) * tan(euler[1]))) * elapsedTime);

    euler[1] = euler[1]
    + (((getGyro(0) * cos(euler[0]))
    - (getGyro(1) * sin(euler[0]))) * elapsedTime);
     c96:	vstr	s30, [r4, #136]	; 0x88

    euler[2] = euler[2]
    + ((((getGyro(0) * sin(euler[0])) / (cos(euler[1])))
     c9a:	vmov.f64	d0, d14
     c9e:	bl	4540 <cos>
     ca2:	vldr	d6, [sp]
     ca6:	vmul.f64	d11, d11, d6
     caa:	vdiv.f64	d5, d11, d0
     cae:	b.n	aa6 <IMU::updateGyro()+0x2d6>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     cb0:	vldr	s11, [pc, #172]	; d60 <IMU::updateGyro()+0x590>
     cb4:	vldr	s14, [pc, #172]	; d64 <IMU::updateGyro()+0x594>
     cb8:	vldr	s18, [pc, #172]	; d68 <IMU::updateGyro()+0x598>
     cbc:	b.n	906 <IMU::updateGyro()+0x136>
    }

    // Keep in range of -PI/2 to Pi/2
    if (euler[1] > (PI/2)) {
        euler[1] = euler[1] - PI;
    } else if (euler[1] < (-PI/2)) {
     cbe:	vldr	d7, [pc, #136]	; d48 <IMU::updateGyro()+0x578>
     cc2:	vcmpe.f64	d14, d7
     cc6:	vmrs	APSR_nzcv, fpscr
     cca:	bpl.w	afe <IMU::updateGyro()+0x32e>
        euler[1] = euler[1] + PI;
     cce:	vldr	d7, [pc, #104]	; d38 <IMU::updateGyro()+0x568>
     cd2:	vadd.f64	d14, d14, d7
     cd6:	vcvt.f32.f64	s28, d14
     cda:	vstr	s28, [r4, #136]	; 0x88
     cde:	b.n	afe <IMU::updateGyro()+0x32e>
    + ((getGyro(1) * cos(euler[0])) / (cos(euler[1])))) * elapsedTime);

    // Keep in range of -Pi to Pi
    if (euler[0] > PI) {
        euler[0] = euler[0] - (2 * PI);
    } else if (euler[0] < -PI) {
     ce0:	vldr	d7, [pc, #108]	; d50 <IMU::updateGyro()+0x580>
     ce4:	vcmpe.f64	d13, d7
     ce8:	vmrs	APSR_nzcv, fpscr
     cec:	bpl.w	ade <IMU::updateGyro()+0x30e>
        euler[0] = euler[0] + (2 * PI);
     cf0:	vldr	d7, [pc, #100]	; d58 <IMU::updateGyro()+0x588>
     cf4:	vadd.f64	d13, d13, d7
     cf8:	vcvt.f32.f64	s26, d13
     cfc:	vstr	s26, [r4, #132]	; 0x84
     d00:	b.n	ade <IMU::updateGyro()+0x30e>
        euler[1] = euler[1] + PI;
    }
    
    
    if (euler[2] > PI) {
        euler[2] = euler[2] - (2 * PI);
     d02:	vldr	d6, [pc, #84]	; d58 <IMU::updateGyro()+0x588>
     d06:	vsub.f64	d7, d7, d6
     d0a:	vcvt.f32.f64	s14, d7
     d0e:	vstr	s14, [r4, #140]	; 0x8c
    } else if (euler[2] < -PI) {
        euler[2] = euler[2] + (2 * PI);
    }
    

}
     d12:	add	sp, #20
     d14:	vpop	{d8-d15}
     d18:	pop	{r4, r5, r6, r7, pc}
     d1a:	vldr	s18, [pc, #76]	; d68 <IMU::updateGyro()+0x598>
     d1e:	b.n	906 <IMU::updateGyro()+0x136>
     d20:	vldr	s14, [pc, #64]	; d64 <IMU::updateGyro()+0x594>
     d24:	vldr	s18, [pc, #64]	; d68 <IMU::updateGyro()+0x598>
     d28:	b.n	906 <IMU::updateGyro()+0x136>
     d2a:	vldr	s11, [pc, #52]	; d60 <IMU::updateGyro()+0x590>
     d2e:	mov.w	r2, #4294967295
     d32:	vldr	s14, [pc, #48]	; d64 <IMU::updateGyro()+0x594>
     d36:	b.n	8d4 <IMU::updateGyro()+0x104>
     d38:	.word	0x54442d18
     d3c:	.word	0x400921fb
     d40:	.word	0x00000000
     d44:	.word	0x40668000
     d48:	.word	0x54442d18
     d4c:	.word	0xbff921fb
     d50:	.word	0x54442d18
     d54:	.word	0xc00921fb
     d58:	.word	0x54442d18
     d5c:	.word	0x401921fb
     d60:	.word	0x3c58d1b1
     d64:	.word	0x3c27aac7
     d68:	.word	0x3ba1a9ef

00000d6c <IMU::update()>:
    Wire1.write(0);
    Wire1.endTransmission(true);

}

void IMU::update() {
     d6c:	push	{r4, lr}
     d6e:	mov	r4, r0
    updateAcc();
     d70:	bl	580 <IMU::updateAcc()>
    updateGyro();
     d74:	mov	r0, r4
     d76:	bl	7d0 <IMU::updateGyro()>
    updateTemp();
     d7a:	mov	r0, r4
}
     d7c:	ldmia.w	sp!, {r4, lr}
}

void IMU::update() {
    updateAcc();
    updateGyro();
    updateTemp();
     d80:	b.w	718 <IMU::updateTemp()>

00000d84 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     d84:	movs	r0, #0
     d86:	bx	lr

00000d88 <Print::flush()>:
	virtual void flush()				{ }
     d88:	bx	lr
     d8a:	nop

00000d8c <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : type_(0) {}
     d8c:	ldr	r3, [pc, #24]	; (da8 <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x1c>)
     d8e:	movs	r2, #0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     d90:	movs	r0, #2
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     d92:	ldr	r1, [pc, #24]	; (dac <_GLOBAL__sub_I__Z20getNextPathComponentPKcPjPc+0x20>)
     d94:	strb	r2, [r3, #2]
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     d96:	str	r0, [r3, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     d98:	str	r1, [r3, #44]	; 0x2c
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     d9a:	strb.w	r2, [r3, #36]	; 0x24
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     d9e:	strb.w	r2, [r3, #48]	; 0x30
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     da2:	strb.w	r2, [r3, #50]	; 0x32
     da6:	bx	lr
     da8:	.word	0x20001610
     dac:	.word	0x2000002c

00000db0 <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
     db0:	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
     db2:	ldr	r4, [pc, #104]	; (e1c <SdVolume::cacheFlush()+0x6c>)
     db4:	ldrb	r3, [r4, #0]
     db6:	cbnz	r3, dbc <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
     db8:	movs	r0, #1
}
     dba:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
     dbc:	ldr	r5, [pc, #96]	; (e20 <SdVolume::cacheFlush()+0x70>)
     dbe:	ldr	r3, [pc, #100]	; (e24 <SdVolume::cacheFlush()+0x74>)
     dc0:	ldr	r0, [r5, #0]
     dc2:	ldr	r1, [r3, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
     dc4:	ldrb	r3, [r0, #0]
     dc6:	cmp	r3, #254	; 0xfe
     dc8:	beq.n	dfa <SdVolume::cacheFlush()+0x4a>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
     dca:	ldr	r2, [pc, #92]	; (e28 <SdVolume::cacheFlush()+0x78>)
     dcc:	bl	197c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
     dd0:	cbz	r0, df6 <SdVolume::cacheFlush()+0x46>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
     dd2:	ldr	r6, [pc, #88]	; (e2c <SdVolume::cacheFlush()+0x7c>)
     dd4:	ldr	r1, [r6, #0]
     dd6:	cbnz	r1, de0 <SdVolume::cacheFlush()+0x30>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
     dd8:	movs	r3, #0
  }
  return true;
     dda:	movs	r0, #1
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
     ddc:	strb	r3, [r4, #0]
     dde:	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
     de0:	ldr	r0, [r5, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
     de2:	ldrb	r3, [r0, #0]
     de4:	cmp	r3, #254	; 0xfe
     de6:	beq.n	e08 <SdVolume::cacheFlush()+0x58>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
     de8:	ldr	r2, [pc, #60]	; (e28 <SdVolume::cacheFlush()+0x78>)
     dea:	bl	197c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
     dee:	cbz	r0, df6 <SdVolume::cacheFlush()+0x46>
        return false;
      }
      cacheMirrorBlock_ = 0;
     df0:	movs	r3, #0
     df2:	str	r3, [r6, #0]
     df4:	b.n	dd8 <SdVolume::cacheFlush()+0x28>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
     df6:	movs	r0, #0
     df8:	pop	{r4, r5, r6, pc}
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
     dfa:	ldr	r0, [pc, #44]	; (e28 <SdVolume::cacheFlush()+0x78>)
     dfc:	bl	1240 <SDHC_CardWriteBlock(void const*, unsigned long)>
     e00:	clz	r0, r0
     e04:	lsrs	r0, r0, #5
     e06:	b.n	dd0 <SdVolume::cacheFlush()+0x20>
     e08:	ldr	r0, [pc, #28]	; (e28 <SdVolume::cacheFlush()+0x78>)
     e0a:	bl	1240 <SDHC_CardWriteBlock(void const*, unsigned long)>
     e0e:	clz	r0, r0
     e12:	lsrs	r0, r0, #5
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
     e14:	cmp	r0, #0
     e16:	bne.n	df0 <SdVolume::cacheFlush()+0x40>
     e18:	b.n	df6 <SdVolume::cacheFlush()+0x46>
     e1a:	nop
     e1c:	.word	0x2000186c
     e20:	.word	0x20001668
     e24:	.word	0x20000a48
     e28:	.word	0x2000166c
     e2c:	.word	0x20001664

00000e30 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
     e30:	push	{r4, r5, r6, lr}
  if (cacheBlockNumber_ != blockNumber) {
     e32:	ldr	r5, [pc, #72]	; (e7c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x4c>)
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
     e34:	mov	r6, r1
  if (cacheBlockNumber_ != blockNumber) {
     e36:	ldr	r3, [r5, #0]
     e38:	cmp	r3, r0
     e3a:	beq.n	e60 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x30>
     e3c:	mov	r4, r0
    if (!cacheFlush()) return false;
     e3e:	bl	db0 <SdVolume::cacheFlush()>
     e42:	cbnz	r0, e48 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x18>
     e44:	movs	r0, #0
     e46:	pop	{r4, r5, r6, pc}
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
     e48:	ldr	r3, [pc, #52]	; (e80 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x50>)
     e4a:	ldr	r0, [r3, #0]
  /* return the type of SD card detected during init() */
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
     e4c:	ldrb	r3, [r0, #0]
     e4e:	cmp	r3, #254	; 0xfe
     e50:	beq.n	e6c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3c>
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
    }
    #endif
    return SD_readBlock(block, dst);
     e52:	ldr	r2, [pc, #48]	; (e84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
     e54:	mov	r1, r4
     e56:	bl	188c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>
     e5a:	cmp	r0, #0
     e5c:	beq.n	e44 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
     e5e:	str	r4, [r5, #0]
  }
  cacheDirty_ |= action;
     e60:	ldr	r3, [pc, #36]	; (e88 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x58>)
  return true;
     e62:	movs	r0, #1
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
     e64:	ldrb	r1, [r3, #0]
     e66:	orrs	r1, r6
     e68:	strb	r1, [r3, #0]
  return true;
}
     e6a:	pop	{r4, r5, r6, pc}
  uint8_t type(void) const {return type_;}
  /** Returns the current value, true or false, for partial block read. */
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardReadBlock(dst, block) == 0) ? true : false;
     e6c:	mov	r1, r4
     e6e:	ldr	r0, [pc, #20]	; (e84 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x54>)
     e70:	bl	1148 <SDHC_CardReadBlock(void*, unsigned long)>
     e74:	clz	r0, r0
     e78:	lsrs	r0, r0, #5
     e7a:	b.n	e5a <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
     e7c:	.word	0x20000a48
     e80:	.word	0x20001668
     e84:	.word	0x2000166c
     e88:	.word	0x2000186c

00000e8c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
     e8c:	push	{r3, r4, r5, r6, r7, lr}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     e8e:	ldrb.w	r3, [r0, #32]
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
     e92:	mov	r5, r0
     e94:	mov	r6, r1
     e96:	mov	r7, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     e98:	cmp	r3, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
     e9a:	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
     e9c:	ldr	r3, [pc, #96]	; (f00 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x74>)
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     e9e:	beq.n	ed0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x44>
     ea0:	add.w	r4, r4, r1, lsr #7

  if (lba != cacheBlockNumber_) {
     ea4:	ldr	r3, [r3, #0]
     ea6:	cmp	r4, r3
     ea8:	bne.n	eda <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4e>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
     eaa:	and.w	r1, r6, #127	; 0x7f
     eae:	ldr	r2, [pc, #84]	; (f04 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
     eb0:	str.w	r7, [r2, r1, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
     eb4:	ldr	r1, [pc, #80]	; (f08 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x7c>)
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
     eb6:	ldrb	r0, [r5, #24]
     eb8:	ldrb	r2, [r1, #0]
     eba:	cmp	r0, #1
     ebc:	orr.w	r2, r2, #1
     ec0:	strb	r2, [r1, #0]
     ec2:	bls.n	ef8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6c>
     ec4:	ldr	r1, [r5, #8]
  return true;
     ec6:	movs	r0, #1
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
     ec8:	ldr	r2, [pc, #64]	; (f0c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x80>)
     eca:	add	r3, r1
     ecc:	str	r3, [r2, #0]
     ece:	pop	{r3, r4, r5, r6, r7, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     ed0:	add.w	r4, r4, r1, lsr #8

  if (lba != cacheBlockNumber_) {
     ed4:	ldr	r3, [r3, #0]
     ed6:	cmp	r4, r3
     ed8:	beq.n	eec <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
     eda:	movs	r1, #0
     edc:	mov	r0, r4
     ede:	bl	e30 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
     ee2:	cbz	r0, efa <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
  }
  // store entry
  if (fatType_ == 16) {
     ee4:	ldrb.w	r3, [r5, #32]
     ee8:	cmp	r3, #16
     eea:	bne.n	efc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x70>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
     eec:	uxtb	r1, r6
     eee:	ldr	r2, [pc, #20]	; (f04 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x78>)
     ef0:	mov	r3, r4
     ef2:	strh.w	r7, [r2, r1, lsl #1]
     ef6:	b.n	eb4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x28>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
     ef8:	movs	r0, #1
}
     efa:	pop	{r3, r4, r5, r6, r7, pc}

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
     efc:	mov	r3, r4
     efe:	b.n	eaa <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x1e>
     f00:	.word	0x20000a48
     f04:	.word	0x2000166c
     f08:	.word	0x2000186c
     f0c:	.word	0x20001664

00000f10 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
     f10:	ldr	r3, [r0, #12]
     f12:	adds	r3, #1
     f14:	cmp	r3, r1
     f16:	bcc.n	f4a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3a>
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
     f18:	push	{r4, r5, r6, lr}
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     f1a:	ldrb.w	r3, [r0, #32]
     f1e:	mov	r4, r0
     f20:	mov	r6, r2
     f22:	mov	r5, r1
     f24:	cmp	r3, #16
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
     f26:	ldr	r0, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
     f28:	ldr	r3, [pc, #80]	; (f7c <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     f2a:	beq.n	f4e <SdVolume::fatGet(unsigned long, unsigned long*) const+0x3e>
     f2c:	add.w	r0, r0, r1, lsr #7
  if (lba != cacheBlockNumber_) {
     f30:	ldr	r3, [r3, #0]
     f32:	cmp	r0, r3
     f34:	bne.n	f58 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x48>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
     f36:	and.w	r1, r5, #127	; 0x7f
     f3a:	ldr	r3, [pc, #68]	; (f80 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
     f3c:	movs	r0, #1
     f3e:	ldr.w	r3, [r3, r1, lsl #2]
     f42:	bic.w	r3, r3, #4026531840	; 0xf0000000
     f46:	str	r3, [r6, #0]
  }
  return true;
}
     f48:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
     f4a:	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
     f4c:	bx	lr
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     f4e:	add.w	r0, r0, r1, lsr #8
  if (lba != cacheBlockNumber_) {
     f52:	ldr	r3, [r3, #0]
     f54:	cmp	r0, r3
     f56:	beq.n	f68 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x58>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
     f58:	movs	r1, #0
     f5a:	bl	e30 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
     f5e:	cbz	r0, f76 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x66>
  }
  if (fatType_ == 16) {
     f60:	ldrb.w	r3, [r4, #32]
     f64:	cmp	r3, #16
     f66:	bne.n	f36 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x26>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
     f68:	uxtb	r1, r5
     f6a:	ldr	r3, [pc, #20]	; (f80 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x70>)
     f6c:	movs	r0, #1
     f6e:	ldrh.w	r3, [r3, r1, lsl #1]
     f72:	str	r3, [r6, #0]
     f74:	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
     f76:	movs	r0, #0
     f78:	pop	{r4, r5, r6, pc}
     f7a:	nop
     f7c:	.word	0x20000a48
     f80:	.word	0x2000166c

00000f84 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
     f84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
     f88:	ldr	r7, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
     f8a:	sub	sp, #12

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
     f8c:	cbz	r7, fe8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
     f8e:	adds	r7, #1

    // don't save new start location
    setStart = false;
     f90:	mov.w	sl, #0
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
     f94:	ldr	r3, [r0, #12]
     f96:	add.w	r8, r3, #1

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
     f9a:	cbz	r3, fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
     f9c:	mov	fp, r1
     f9e:	mov	r6, r0
     fa0:	mov	r9, r2
     fa2:	mov	r4, r7
     fa4:	movs	r5, #0
     fa6:	b.n	fb4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
     fa8:	mov	r4, r3
     faa:	mov	r7, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
     fac:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
     fae:	ldr	r3, [r6, #12]
     fb0:	cmp	r3, r5
     fb2:	bls.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
     fb4:	cmp	r8, r4
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
     fb6:	add	r2, sp, #4
     fb8:	mov	r0, r6
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
     fba:	bcs.n	fc0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x3c>
      bgnCluster = endCluster = 2;
     fbc:	movs	r4, #2
     fbe:	mov	r7, r4
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
     fc0:	mov	r1, r4
     fc2:	bl	f10 <SdVolume::fatGet(unsigned long, unsigned long*) const>
     fc6:	adds	r3, r4, #1
     fc8:	cbz	r0, fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

    if (f != 0) {
     fca:	ldr	r2, [sp, #4]
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
     fcc:	subs	r1, r3, r7
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
     fce:	cmp	r2, #0
     fd0:	bne.n	fa8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
     fd2:	cmp	fp, r1
     fd4:	beq.n	ff8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x74>
     fd6:	mov	r4, r3

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
     fd8:	adds	r5, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
     fda:	ldr	r3, [r6, #12]
     fdc:	cmp	r3, r5
     fde:	bhi.n	fb4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x30>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
     fe0:	movs	r0, #0

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
     fe2:	add	sp, #12
     fe4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
     fe8:	sub.w	sl, r1, #1

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
     fec:	ldr	r7, [r0, #0]

    // save next search start if one cluster
    setStart = 1 == count;
     fee:	clz	sl, sl
     ff2:	mov.w	sl, sl, lsr #5
     ff6:	b.n	f94 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x10>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
     ff8:	cmp	r4, #1
     ffa:	bls.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
     ffc:	ldr	r3, [r6, #12]
     ffe:	adds	r3, #1
    1000:	cmp	r4, r3
    1002:	bhi.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    1004:	mvn.w	r2, #4026531840	; 0xf0000000
    1008:	mov	r1, r4
    100a:	mov	r0, r6
    100c:	bl	e8c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    1010:	cmp	r0, #0
    1012:	beq.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // link clusters
  while (endCluster > bgnCluster) {
    1014:	cmp	r7, r4
    1016:	bcs.n	1042 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1018:	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    101a:	cmp	r4, #1
    101c:	bls.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    101e:	ldr	r3, [r6, #12]
    1020:	adds	r3, #1
    1022:	cmp	r4, r3
    1024:	bhi.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    1026:	adds	r2, r4, #1
    1028:	mov	r1, r4
    102a:	mov	r0, r6
    102c:	bl	e8c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1030:	cmp	r0, #0
    1032:	beq.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    1034:	cmp	r7, r4
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1036:	add.w	r4, r4, #4294967295
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    103a:	beq.n	1042 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xbe>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    103c:	cmp	r4, #1
    103e:	bne.n	101e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x9a>
    1040:	b.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    1042:	ldr.w	r1, [r9]
    1046:	cbz	r1, 1060 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xdc>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    1048:	cmp	r1, #1
    104a:	bls.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    104c:	ldr	r3, [r6, #12]
    104e:	adds	r3, #1
    1050:	cmp	r1, r3
    1052:	bhi.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
    1054:	mov	r2, r7
    1056:	mov	r0, r6
    1058:	bl	e8c <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    105c:	cmp	r0, #0
    105e:	beq.n	fe0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5c>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    1060:	str.w	r7, [r9]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    1064:	cmp.w	sl, #0
    1068:	beq.n	1072 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xee>
    106a:	adds	r7, #1

  return true;
    106c:	movs	r0, #1
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    106e:	str	r7, [r6, #0]
    1070:	b.n	fe2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>

  return true;
    1072:	movs	r0, #1
    1074:	b.n	fe2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x5e>
    1076:	nop

00001078 <SDHC_CMD_Do(unsigned long)>:

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1078:	ldr	r3, [pc, #128]	; (10fc <SDHC_CMD_Do(unsigned long)+0x84>)
    107a:	ldr	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    107c:	mov	r1, r3
	return SDHC_RESULT_OK;
}

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
    107e:	push	{r4}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1080:	orr.w	r2, r2, #128	; 0x80

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    1084:	mov	r4, r3

// sends the command to SDcard
static int SDHC_CMD_Do(uint32_t xfertyp)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1086:	str	r2, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
    1088:	ldr	r2, [r1, #36]	; 0x24
    108a:	ldr	r3, [pc, #112]	; (10fc <SDHC_CMD_Do(unsigned long)+0x84>)
    108c:	lsls	r2, r2, #31
    108e:	bmi.n	1088 <SDHC_CMD_Do(unsigned long)+0x10>
    1090:	ldr	r2, [r4, #36]	; 0x24
    1092:	lsls	r2, r2, #30
    1094:	bmi.n	1088 <SDHC_CMD_Do(unsigned long)+0x10>
  SDHC_XFERTYP = xfertyp;
    1096:	str	r0, [r3, #12]

// waits for status bits sets
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    1098:	mov.w	r2, #16777216	; 0x1000000
  do
  { result = SDHC_IRQSTAT & mask;
    109c:	mov	r0, r3
    109e:	b.n	10a2 <SDHC_CMD_Do(unsigned long)+0x2a>
    timeout--;
  } while (!result && (timeout));
    10a0:	cbz	r2, 10ce <SDHC_CMD_Do(unsigned long)+0x56>
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    10a2:	ldr	r1, [r0, #48]	; 0x30
    timeout--;
    10a4:	subs	r2, #1
static uint32_t SDHC_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    10a6:	ldr	r3, [pc, #88]	; (1100 <SDHC_CMD_Do(unsigned long)+0x88>)
    10a8:	ldr	r4, [pc, #80]	; (10fc <SDHC_CMD_Do(unsigned long)+0x84>)
    10aa:	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    10ac:	cmp	r3, #0
    10ae:	beq.n	10a0 <SDHC_CMD_Do(unsigned long)+0x28>
  if (timeout) return result;
    10b0:	cbz	r2, 10ce <SDHC_CMD_Do(unsigned long)+0x56>
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) { };
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
    10b2:	cmp	r3, #1
    10b4:	bne.n	10ce <SDHC_CMD_Do(unsigned long)+0x56>
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    10b6:	ldr	r3, [r4, #48]	; 0x30
    10b8:	tst.w	r3, #128	; 0x80
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    10bc:	ldr	r3, [r4, #48]	; 0x30
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
    10be:	beq.n	10e0 <SDHC_CMD_Do(unsigned long)+0x68>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    10c0:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NOT_READY;
    10c4:	movs	r0, #3
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
      return SDHC_RESULT_ERROR;
  }
  /* Check card removal */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    10c6:	str	r3, [r4, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    10c8:	ldr.w	r4, [sp], #4
    10cc:	bx	lr

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    10ce:	ldr	r2, [pc, #44]	; (10fc <SDHC_CMD_Do(unsigned long)+0x84>)
      return SDHC_RESULT_ERROR;
    10d0:	movs	r0, #1

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (SDHC_WaitStatus(mask) != SDHC_IRQSTAT_CC) {
      //SDHC_IRQSTAT |= mask;
      SDHC_IRQSTAT |= (mask | SDHC_IRQSTAT_CTOE);
    10d2:	ldr	r3, [pc, #48]	; (1104 <SDHC_CMD_Do(unsigned long)+0x8c>)
    10d4:	ldr	r1, [r2, #48]	; 0x30
    10d6:	orrs	r3, r1
    10d8:	str	r3, [r2, #48]	; 0x30
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    10da:	ldr.w	r4, [sp], #4
    10de:	bx	lr
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    10e0:	ands.w	r0, r3, #65536	; 0x10000
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    10e4:	ldr	r3, [r4, #48]	; 0x30
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
    10e6:	beq.n	10f2 <SDHC_CMD_Do(unsigned long)+0x7a>
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    10e8:	orr.w	r3, r3, #65537	; 0x10001
      return SDHC_RESULT_NO_RESPONSE;
    10ec:	movs	r0, #5
      return SDHC_RESULT_NOT_READY;
  }

  /* Get response, if available */
  if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE) {
      SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE | SDHC_IRQSTAT_CC;
    10ee:	str	r3, [r4, #48]	; 0x30
    10f0:	b.n	10da <SDHC_CMD_Do(unsigned long)+0x62>
      return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;
    10f2:	orr.w	r3, r3, #1
    10f6:	str	r3, [r4, #48]	; 0x30
    10f8:	b.n	10da <SDHC_CMD_Do(unsigned long)+0x62>
    10fa:	nop
    10fc:	.word	0x402c0000
    1100:	.word	0x000e0001
    1104:	.word	0x000f0001

00001108 <SDHC_CMD12_StopTransferWaitForBusy()>:
  return result;
}

// sends CMD12 to stop transfer and first waits to ready SDCArd
static int SDHC_CMD12_StopTransferWaitForBusy(void)
{
    1108:	push	{r4, r5, r6, lr}
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    110a:	ldr	r5, [pc, #52]	; (1140 <SDHC_CMD12_StopTransferWaitForBusy()+0x38>)
    110c:	movs	r6, #0
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    110e:	ldr	r0, [pc, #52]	; (1144 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
{
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
    1110:	movw	r4, #999	; 0x3e7
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1114:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1116:	bl	1078 <SDHC_CMD_Do(unsigned long)>
    111a:	mov	r3, r0
    111c:	b.n	112c <SDHC_CMD12_StopTransferWaitForBusy()+0x24>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    111e:	cbnz	r3, 1134 <SDHC_CMD12_StopTransferWaitForBusy()+0x2c>
static int SDHC_CMD12_StopTransfer(void)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = 0;
    1120:	str	r6, [r5, #8]
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1122:	bl	1078 <SDHC_CMD_Do(unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1126:	subs	r4, #1

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1128:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    112a:	beq.n	1138 <SDHC_CMD12_StopTransferWaitForBusy()+0x30>
    112c:	ldr	r2, [r5, #36]	; 0x24

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    112e:	ldr	r0, [pc, #20]	; (1144 <SDHC_CMD12_StopTransferWaitForBusy()+0x3c>)
  uint32_t timeOut = 1000;
  int result;
  do {
    result = SDHC_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1130:	lsls	r2, r2, #29
    1132:	bmi.n	111e <SDHC_CMD12_StopTransferWaitForBusy()+0x16>
    1134:	mov	r0, r3
    1136:	pop	{r4, r5, r6, pc}

  SDHC_CMDARG = 0;
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) |
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY));

  result = SDHC_CMD_Do(xfertyp);
    1138:	cmp	r0, #0
    113a:	it	eq
    113c:	moveq	r0, #5

  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    113e:	pop	{r4, r5, r6, pc}
    1140:	.word	0x402c0000
    1144:	.word	0x0cdb0000

00001148 <SDHC_CardReadBlock(void*, unsigned long)>:
{
  int result;
  uint32_t* pData = (uint32_t*)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0)
    1148:	ldr	r3, [pc, #224]	; (122c <SDHC_CardReadBlock(void*, unsigned long)+0xe4>)
    114a:	ldrb	r2, [r3, #0]
    114c:	cbz	r2, 1152 <SDHC_CardReadBlock(void*, unsigned long)+0xa>
     return SDHC_RESULT_NOT_READY;
    114e:	movs	r0, #3
    1150:	bx	lr
#if 1
// read a block from disk, using polling
//   buff - pointer on buffer where read data should be stored
//   sector - index of start sector
int SDHC_CardReadBlock(void * buff, uint32_t sector)
{
    1152:	push	{r4, r5, r6, lr}
  // Check if this is ready
  if (sdCardDesc.status != 0)
     return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    1154:	ldrb	r3, [r3, #1]
    1156:	mov	r6, r0
    1158:	cbnz	r3, 115c <SDHC_CardReadBlock(void*, unsigned long)+0x14>
    sector *= 512;
    115a:	lsls	r1, r1, #9

  SDHC_IRQSTAT = 0xffff;
    115c:	ldr	r5, [pc, #208]	; (1230 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    115e:	movw	r3, #65535	; 0xffff
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    1162:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    1166:	ldr	r0, [pc, #204]	; (1234 <SDHC_CardReadBlock(void*, unsigned long)+0xec>)

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity)
    sector *= 512;

  SDHC_IRQSTAT = 0xffff;
    1168:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL;
    116a:	ldr	r3, [r5, #72]	; 0x48
    116c:	orr.w	r3, r3, #16
    1170:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD17_ReadBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    1172:	str	r1, [r5, #8]

  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    1174:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    1176:	bl	1078 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    117a:	cmp	r0, #0
    117c:	bne.n	121a <SDHC_CardReadBlock(void*, unsigned long)+0xd2>
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    117e:	mov	r4, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD17) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DTDSEL | SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { ( void)SDHC_CMDRSP0; }
    1180:	ldr	r3, [r5, #16]
    1182:	add.w	r2, r6, #64	; 0x40
    1186:	add.w	r0, r6, #576	; 0x240
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    118a:	mov	r1, r5
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
    118c:	ldr	r3, [r4, #48]	; 0x30
    118e:	ldr	r6, [pc, #160]	; (1230 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    1190:	orr.w	r5, r3, #32
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    1194:	tst.w	r3, #7340032	; 0x700000
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
    1198:	str	r5, [r4, #48]	; 0x30
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    119a:	bne.n	121c <SDHC_CardReadBlock(void*, unsigned long)+0xd4>
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
			SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) { };
    119c:	ldr	r3, [r4, #36]	; 0x24
    119e:	lsls	r5, r3, #20
    11a0:	bpl.n	119c <SDHC_CardReadBlock(void*, unsigned long)+0x54>
		*pData++ = SDHC_DATPORT;
    11a2:	ldr	r3, [r1, #32]
    11a4:	adds	r2, #64	; 0x40
    11a6:	str.w	r3, [r2, #-128]
		*pData++ = SDHC_DATPORT;
    11aa:	ldr	r3, [r1, #32]
    11ac:	str.w	r3, [r2, #-124]
		*pData++ = SDHC_DATPORT;
    11b0:	ldr	r3, [r1, #32]
    11b2:	str.w	r3, [r2, #-120]
		*pData++ = SDHC_DATPORT;
    11b6:	ldr	r3, [r1, #32]
    11b8:	str.w	r3, [r2, #-116]
		*pData++ = SDHC_DATPORT;
    11bc:	ldr	r3, [r1, #32]
    11be:	str.w	r3, [r2, #-112]
		*pData++ = SDHC_DATPORT;
    11c2:	ldr	r3, [r1, #32]
    11c4:	str.w	r3, [r2, #-108]
		*pData++ = SDHC_DATPORT;
    11c8:	ldr	r3, [r1, #32]
    11ca:	str.w	r3, [r2, #-104]
		*pData++ = SDHC_DATPORT;
    11ce:	ldr	r3, [r1, #32]
    11d0:	str.w	r3, [r2, #-100]
		*pData++ = SDHC_DATPORT;
    11d4:	ldr	r3, [r1, #32]
    11d6:	str.w	r3, [r2, #-96]
		*pData++ = SDHC_DATPORT;
    11da:	ldr	r3, [r1, #32]
    11dc:	str.w	r3, [r2, #-92]
		*pData++ = SDHC_DATPORT;
    11e0:	ldr	r3, [r1, #32]
    11e2:	str.w	r3, [r2, #-88]
		*pData++ = SDHC_DATPORT;
    11e6:	ldr	r3, [r1, #32]
    11e8:	str.w	r3, [r2, #-84]
		*pData++ = SDHC_DATPORT;
    11ec:	ldr	r3, [r1, #32]
    11ee:	str.w	r3, [r2, #-80]
		*pData++ = SDHC_DATPORT;
    11f2:	ldr	r3, [r1, #32]
    11f4:	str.w	r3, [r2, #-76]
		*pData++ = SDHC_DATPORT;
    11f8:	ldr	r3, [r1, #32]
    11fa:	str.w	r3, [r2, #-72]
		*pData++ = SDHC_DATPORT;
    11fe:	ldr	r3, [r1, #32]
    1200:	str.w	r3, [r2, #-68]
static int SDHC_ReadBlock(uint32_t* pData)
{
	uint32_t i, irqstat;
	const uint32_t i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for (i = 0; i < i_max; i++) {
    1204:	cmp	r2, r0
    1206:	bne.n	118c <SDHC_CardReadBlock(void*, unsigned long)+0x44>
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
		*pData++ = SDHC_DATPORT;
	}
	return SDHC_RESULT_OK;
    1208:	movs	r0, #0
  result = SDHC_CMD17_ReadBlock(sector);
  if(result != SDHC_RESULT_OK) return result;
  result = SDHC_ReadBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    120a:	ldr	r1, [pc, #36]	; (1230 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    120c:	ldr	r3, [r1, #48]	; 0x30
    120e:	ldr	r2, [pc, #32]	; (1230 <SDHC_CardReadBlock(void*, unsigned long)+0xe8>)
    1210:	lsls	r3, r3, #30
    1212:	bpl.n	120c <SDHC_CardReadBlock(void*, unsigned long)+0xc4>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BRR | SDHC_IRQSTAT_AC12E);
    1214:	ldr	r3, [pc, #32]	; (1238 <SDHC_CardReadBlock(void*, unsigned long)+0xf0>)
    1216:	str	r3, [r2, #48]	; 0x30

  return result;
    1218:	pop	{r4, r5, r6, pc}
}
    121a:	pop	{r4, r5, r6, pc}
	for (i = 0; i < i_max; i++) {
		irqstat = SDHC_IRQSTAT;
		SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR;
		if (irqstat & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT = irqstat | SDHC_IRQSTAT_BRR |
				SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE;
    121c:	ldr	r2, [pc, #28]	; (123c <SDHC_CardReadBlock(void*, unsigned long)+0xf4>)
    121e:	orrs	r2, r3
    1220:	str	r2, [r6, #48]	; 0x30
			SDHC_CMD12_StopTransferWaitForBusy();
    1222:	bl	1108 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    1226:	movs	r0, #1
    1228:	b.n	120a <SDHC_CardReadBlock(void*, unsigned long)+0xc2>
    122a:	nop
    122c:	.word	0x20001870
    1230:	.word	0x402c0000
    1234:	.word	0x113a0010
    1238:	.word	0x01000022
    123c:	.word	0x00700020

00001240 <SDHC_CardWriteBlock(void const*, unsigned long)>:
//
// RETURNS:     result of operation
//-----------------------------------------------------------------------------
#if 1
int SDHC_CardWriteBlock(const void * buff, uint32_t sector)
{
    1240:	push	{r3, r4, r5, r6, r7, lr}
  int result;
  const uint32_t *pData = (const uint32_t *)buff;

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    1242:	ldr	r3, [pc, #160]	; (12e4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa4>)
    1244:	ldrb	r2, [r3, #0]
    1246:	cbz	r2, 124c <SDHC_CardWriteBlock(void const*, unsigned long)+0xc>
    1248:	movs	r0, #3
  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);

  return result;
}
    124a:	pop	{r3, r4, r5, r6, r7, pc}

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    124c:	ldrb	r3, [r3, #1]
    124e:	mov	r4, r0
    1250:	cbnz	r3, 1254 <SDHC_CardWriteBlock(void const*, unsigned long)+0x14>
    sector *= 512;
    1252:	lsls	r1, r1, #9

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    1254:	ldr	r5, [pc, #144]	; (12e8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    1256:	mov.w	r2, #66048	; 0x10200

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    125a:	ldr	r0, [pc, #144]	; (12ec <SDHC_CardWriteBlock(void const*, unsigned long)+0xac>)
  // Convert LBA to uint8_t address if needed
  if(!sdCardDesc.highCapacity)
    sector *= 512;

  //SDHC_IRQSTAT = 0xffff;
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    125c:	ldr	r3, [r5, #48]	; 0x30
    125e:	str	r3, [r5, #48]	; 0x30
#if defined(__IMXRT1062__)
	SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_DTDSEL;
    1260:	ldr	r3, [r5, #72]	; 0x48
    1262:	bic.w	r3, r3, #16
    1266:	str	r3, [r5, #72]	; 0x48
static int SDHC_CMD24_WriteBlock(uint32_t sector)
{
  uint32_t xfertyp;
  int result;

  SDHC_CMDARG = sector;
    1268:	str	r1, [r5, #8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | 512;
    126a:	str	r2, [r5, #4]

  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
    126c:	bl	1078 <SDHC_CMD_Do(unsigned long)>
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    1270:	cmp	r0, #0
    1272:	bne.n	124a <SDHC_CardWriteBlock(void const*, unsigned long)+0xa>
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    1274:	mov	r2, r5
  xfertyp = (SDHC_XFERTYP_CMDINX(SDHC_CMD24) | SDHC_XFERTYP_CICEN |
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) |
             SDHC_XFERTYP_DPSEL);

  result = SDHC_CMD_Do(xfertyp);
  if (result == SDHC_RESULT_OK) { (void)SDHC_CMDRSP0; }
    1276:	ldr	r3, [r5, #16]
    1278:	add.w	r7, r4, #512	; 0x200
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
    127c:	mov	r6, r5
    127e:	ldr	r3, [r2, #48]	; 0x30
    1280:	ldr	r1, [pc, #100]	; (12e8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    1282:	lsls	r0, r3, #27
    1284:	bpl.n	127e <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    1286:	ldr	r3, [r6, #48]	; 0x30
    1288:	tst.w	r3, #7340032	; 0x700000
    128c:	bne.n	12c2 <SDHC_CardWriteBlock(void const*, unsigned long)+0x82>
    128e:	add.w	r1, r4, #64	; 0x40
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
			SDHC_DATPORT = *pData++;
    1292:	ldr.w	r3, [r4], #4
    1296:	ldr	r5, [pc, #80]	; (12e8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    1298:	cmp	r1, r4
			SDHC_DATPORT = *pData++;
    129a:	str	r3, [r2, #32]
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
			(void)SDHC_CMD12_StopTransferWaitForBusy();
			return SDHC_RESULT_ERROR;
		}
		for(j=0; j<SDHC_FIFO_BUFFER_SIZE; j++) {
    129c:	bne.n	1292 <SDHC_CardWriteBlock(void const*, unsigned long)+0x52>
			SDHC_DATPORT = *pData++;
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;
    129e:	ldr	r3, [r6, #48]	; 0x30
    12a0:	orr.w	r3, r3, #16
    12a4:	str	r3, [r6, #48]	; 0x30

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
    12a6:	ldr	r3, [r6, #48]	; 0x30
    12a8:	ands.w	r0, r3, #7340032	; 0x700000
    12ac:	bne.n	12d2 <SDHC_CardWriteBlock(void const*, unsigned long)+0x92>
static int SDHC_WriteBlock(const uint32_t* pData)
{
	uint32_t i, i_max, j;
	i_max = ((SDHC_BLOCK_SIZE) / (4 * SDHC_FIFO_BUFFER_SIZE));

	for(i = 0; i < i_max; i++) {
    12ae:	cmp	r7, r1
    12b0:	bne.n	127e <SDHC_CardWriteBlock(void const*, unsigned long)+0x3e>
  result = SDHC_CMD24_WriteBlock(sector);
  if (result != SDHC_RESULT_OK) return result;
  result = SDHC_WriteBlock(pData);

  // finish up
  while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC)) { }  // wait for transfer to complete
    12b2:	ldr	r1, [pc, #52]	; (12e8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    12b4:	ldr	r3, [r1, #48]	; 0x30
    12b6:	ldr	r2, [pc, #48]	; (12e8 <SDHC_CardWriteBlock(void const*, unsigned long)+0xa8>)
    12b8:	lsls	r3, r3, #30
    12ba:	bpl.n	12b4 <SDHC_CardWriteBlock(void const*, unsigned long)+0x74>
  SDHC_IRQSTAT = (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_BWR | SDHC_IRQSTAT_AC12E);
    12bc:	ldr	r3, [pc, #48]	; (12f0 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb0>)
    12be:	str	r3, [r2, #48]	; 0x30

  return result;
    12c0:	pop	{r3, r4, r5, r6, r7, pc}

	for(i = 0; i < i_max; i++) {
		while (!(SDHC_IRQSTAT & SDHC_IRQSTAT_BWR)) ; // wait
		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    12c2:	ldr	r2, [r1, #48]	; 0x30
    12c4:	ldr	r3, [pc, #44]	; (12f4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    12c6:	orrs	r3, r2
    12c8:	str	r3, [r1, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    12ca:	bl	1108 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    12ce:	movs	r0, #1
    12d0:	b.n	12b2 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
		}
		SDHC_IRQSTAT |= SDHC_IRQSTAT_BWR;

		if (SDHC_IRQSTAT & (SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE | SDHC_IRQSTAT_DTOE)) {
			SDHC_IRQSTAT |= SDHC_IRQSTAT_DEBE | SDHC_IRQSTAT_DCE |
				SDHC_IRQSTAT_DTOE | SDHC_IRQSTAT_BWR;
    12d2:	ldr	r2, [r5, #48]	; 0x30
    12d4:	ldr	r3, [pc, #28]	; (12f4 <SDHC_CardWriteBlock(void const*, unsigned long)+0xb4>)
    12d6:	orrs	r3, r2
    12d8:	str	r3, [r5, #48]	; 0x30
			(void)SDHC_CMD12_StopTransferWaitForBusy();
    12da:	bl	1108 <SDHC_CMD12_StopTransferWaitForBusy()>
			return SDHC_RESULT_ERROR;
    12de:	movs	r0, #1
    12e0:	b.n	12b2 <SDHC_CardWriteBlock(void const*, unsigned long)+0x72>
    12e2:	nop
    12e4:	.word	0x20001870
    12e8:	.word	0x402c0000
    12ec:	.word	0x183a0000
    12f0:	.word	0x01000012
    12f4:	.word	0x00700010

000012f8 <SdFile::sync() [clone .part.23] [clone .constprop.37]>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    12f8:	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    12fa:	ldrsb.w	r3, [r0, #5]
    12fe:	cmp	r3, #0
    1300:	blt.n	130a <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x12>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    1302:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    1306:	b.w	db0 <SdVolume::cacheFlush()>
    130a:	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    130c:	movs	r1, #1
    130e:	ldr	r0, [r0, #16]
    1310:	bl	e30 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    1314:	cbz	r0, 1358 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    1316:	ldrb	r5, [r4, #20]
    1318:	ldr	r3, [pc, #64]	; (135c <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x64>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    131a:	adds.w	r5, r3, r5, lsl #5
    131e:	beq.n	1358 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x60>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    1320:	ldrb	r3, [r4, #6]
    1322:	cmp	r3, #1
    1324:	bls.n	1352 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x5a>

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    1326:	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    1328:	ldr	r1, [pc, #52]	; (1360 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x68>)
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    132a:	lsrs	r2, r3, #16

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    132c:	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    132e:	ldr	r3, [r1, #0]
    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;
    1330:	strh	r2, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    1332:	cbz	r3, 1342 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x4a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    1334:	add.w	r1, r5, #22
    1338:	add.w	r0, r5, #24
    133c:	blx	r3
      d->lastAccessDate = d->lastWriteDate;
    133e:	ldrh	r3, [r5, #24]
    1340:	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    1342:	ldrb	r3, [r4, #5]
    1344:	and.w	r3, r3, #127	; 0x7f
    1348:	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    134a:	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    134e:	b.w	db0 <SdVolume::cacheFlush()>
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    1352:	ldr	r3, [r4, #24]
    1354:	str	r3, [r5, #28]
    1356:	b.n	1326 <SdFile::sync() [clone .part.23] [clone .constprop.37]+0x2e>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    1358:	movs	r0, #0
    135a:	pop	{r3, r4, r5, pc}
    135c:	.word	0x2000166c
    1360:	.word	0x20001880

00001364 <SdFile::addCluster()>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    1364:	push	{r4, lr}
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    1366:	add.w	r2, r0, #8
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    136a:	mov	r4, r0
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    136c:	movs	r1, #1
    136e:	ldr	r0, [r0, #32]
    1370:	bl	f84 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    1374:	cbz	r0, 138c <SdFile::addCluster()+0x28>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    1376:	ldr	r3, [r4, #28]
    1378:	cbnz	r3, 138a <SdFile::addCluster()+0x26>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    137a:	ldrb	r3, [r4, #5]
    137c:	movs	r0, #1
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    137e:	ldr	r2, [r4, #8]
    flags_ |= F_FILE_DIR_DIRTY;
    1380:	orn	r3, r3, #127	; 0x7f
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    1384:	str	r2, [r4, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    1386:	strb	r3, [r4, #5]
    1388:	pop	{r4, pc}
  }
  return true;
    138a:	movs	r0, #1
}
    138c:	pop	{r4, pc}
    138e:	nop

00001390 <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    1390:	push	{r3, r4, r5, r6, r7, lr}
    1392:	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    1394:	cbz	r3, 139c <SdFile::seekSet(unsigned long)+0xc>
    1396:	ldr	r2, [r0, #24]
    1398:	cmp	r2, r1
    139a:	bcs.n	13a0 <SdFile::seekSet(unsigned long)+0x10>
    139c:	movs	r0, #0
    139e:	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    13a0:	cmp	r3, #2
    13a2:	mov	r7, r1
    13a4:	mov	r5, r0
    13a6:	beq.n	13e2 <SdFile::seekSet(unsigned long)+0x52>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    13a8:	cbz	r7, 13e8 <SdFile::seekSet(unsigned long)+0x58>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    13aa:	ldr	r3, [r5, #32]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    13ac:	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    13ae:	ldr	r1, [r5, #12]
    13b0:	ldrb	r3, [r3, #16]
    13b2:	subs	r2, r1, #1
    13b4:	adds	r3, #9
    13b6:	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    13b8:	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    13ba:	cmp	r2, r4
    13bc:	bhi.n	13c4 <SdFile::seekSet(unsigned long)+0x34>
    13be:	cbz	r1, 13c4 <SdFile::seekSet(unsigned long)+0x34>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    13c0:	subs	r4, r4, r2
    13c2:	b.n	13c8 <SdFile::seekSet(unsigned long)+0x38>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    13c4:	ldr	r3, [r5, #28]
    13c6:	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    13c8:	add.w	r6, r5, #8
    13cc:	b.n	13dc <SdFile::seekSet(unsigned long)+0x4c>
    13ce:	ldr	r1, [r5, #8]
    13d0:	subs	r4, #1
    13d2:	ldr	r0, [r5, #32]
    13d4:	bl	f10 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    13d8:	cmp	r0, #0
    13da:	beq.n	139c <SdFile::seekSet(unsigned long)+0xc>
    13dc:	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    13de:	cmp	r4, #0
    13e0:	bne.n	13ce <SdFile::seekSet(unsigned long)+0x3e>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    13e2:	str	r7, [r5, #12]
    return true;
    13e4:	movs	r0, #1
    13e6:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    13e8:	str	r7, [r5, #8]
    curPosition_ = 0;
    return true;
    13ea:	movs	r0, #1
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    13ec:	str	r7, [r5, #12]
    return true;
    13ee:	pop	{r3, r4, r5, r6, r7, pc}

000013f0 <SdFile::write(void const*, unsigned int)>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    13f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13f4:	sub	sp, #20
    13f6:	mov	r7, r0
    13f8:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    13fa:	ldrb	r2, [r0, #6]
    13fc:	cmp	r2, #1
    13fe:	beq.n	140c <SdFile::write(void const*, unsigned int)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1400:	movs	r3, #1

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    1402:	movs	r0, #0
    1404:	strb	r3, [r7, #4]
}
    1406:	add	sp, #20
    1408:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    140c:	ldrb	r2, [r0, #5]
    140e:	lsls	r4, r2, #30
    1410:	bpl.n	1400 <SdFile::write(void const*, unsigned int)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    1412:	lsls	r3, r2, #29
    1414:	mov	fp, r1
    1416:	bpl.n	142a <SdFile::write(void const*, unsigned int)+0x3a>
    1418:	ldr	r1, [r7, #24]
    141a:	ldr	r3, [r7, #12]
    141c:	cmp	r3, r1
    141e:	beq.w	15a2 <SdFile::write(void const*, unsigned int)+0x1b2>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    1422:	bl	1390 <SdFile::seekSet(unsigned long)>
    if (!seekEnd()) goto writeErrorReturn;
    1426:	cmp	r0, #0
    1428:	beq.n	1400 <SdFile::write(void const*, unsigned int)+0x10>
  }

  while (nToWrite > 0) {
    142a:	ldr	r3, [sp, #4]
    142c:	ldr	r1, [r7, #12]
    142e:	cmp	r3, #0
    1430:	beq.w	15be <SdFile::write(void const*, unsigned int)+0x1ce>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, size_t nbyte) {
    1434:	ldr.w	r8, [sp, #4]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    1438:	ldr.w	r9, [pc, #412]	; 15d8 <SdFile::write(void const*, unsigned int)+0x1e8>
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
    143c:	ldr.w	sl, [pc, #412]	; 15dc <SdFile::write(void const*, unsigned int)+0x1ec>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    1440:	ldr	r0, [r7, #32]
    uint16_t blockOffset = curPosition_ & 0X1FF;
    1442:	ubfx	r6, r1, #0, #9
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    1446:	ldrb	r2, [r0, #4]
    1448:	subs	r2, #1
    144a:	and.w	r5, r2, r1, lsr #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    144e:	ands.w	r5, r5, #255	; 0xff
    1452:	bne.n	14fc <SdFile::write(void const*, unsigned int)+0x10c>
    1454:	cmp	r6, #0
    1456:	bne.n	14fc <SdFile::write(void const*, unsigned int)+0x10c>
      // start of new cluster
      if (curCluster_ == 0) {
    1458:	ldr	r1, [r7, #8]
    145a:	cmp	r1, #0
    145c:	bne.n	1552 <SdFile::write(void const*, unsigned int)+0x162>
        if (firstCluster_ == 0) {
    145e:	ldr	r2, [r7, #28]
    1460:	cmp	r2, #0
    1462:	beq.w	1578 <SdFile::write(void const*, unsigned int)+0x188>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    1466:	str	r2, [r7, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1468:	rsb	r4, r6, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    146c:	subs	r2, #2
    146e:	ldrb.w	lr, [r0, #16]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1472:	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1474:	ldr	r1, [r0, #20]
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    1476:	cmp	r4, r8
    1478:	bls.n	1500 <SdFile::write(void const*, unsigned int)+0x110>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    147a:	lsl.w	r2, r2, lr
    147e:	add	r5, r1
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    1480:	uxth.w	r4, r8

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1484:	add	r5, r2
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    1486:	cbnz	r6, 1490 <SdFile::write(void const*, unsigned int)+0xa0>
    1488:	ldr	r0, [r7, #12]
    148a:	ldr	r2, [r7, #24]
    148c:	cmp	r0, r2
    148e:	bcs.n	1538 <SdFile::write(void const*, unsigned int)+0x148>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    1490:	mov	r0, r5
    1492:	movs	r1, #1
    1494:	bl	e30 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    1498:	cmp	r0, #0
    149a:	beq.n	1400 <SdFile::write(void const*, unsigned int)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    149c:	add	r6, r9
      uint8_t* end = dst + n;
    149e:	add.w	lr, r6, r4
      while (dst != end) *dst++ = *src++;
    14a2:	cmp	r6, lr
    14a4:	beq.n	14c2 <SdFile::write(void const*, unsigned int)+0xd2>
    14a6:	add.w	r1, fp, #4294967295
    14aa:	subs	r2, r6, #1
    14ac:	add.w	r5, lr, #4294967295
    14b0:	ldrb.w	r0, [r1, #1]!
    14b4:	strb.w	r0, [r2, #1]!
    14b8:	cmp	r5, r2
    14ba:	bne.n	14b0 <SdFile::write(void const*, unsigned int)+0xc0>
    14bc:	rsb	r6, r6, lr
    14c0:	add	fp, r6
    }
    nToWrite -= n;
    curPosition_ += n;
    14c2:	ldr	r5, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    14c4:	subs.w	r8, r8, r4
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    14c8:	add.w	r1, r4, r5
    14cc:	str	r1, [r7, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    14ce:	bne.n	1440 <SdFile::write(void const*, unsigned int)+0x50>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    14d0:	ldr	r3, [r7, #24]
    14d2:	cmp	r1, r3
    14d4:	bls.n	15ac <SdFile::write(void const*, unsigned int)+0x1bc>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    14d6:	ldrb	r2, [r7, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    14d8:	str	r1, [r7, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    14da:	orr.w	r2, r2, #128	; 0x80
    14de:	strb	r2, [r7, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    14e0:	lsls	r2, r2, #28
    14e2:	bpl.n	14f4 <SdFile::write(void const*, unsigned int)+0x104>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    14e4:	ldrb	r3, [r7, #6]
    14e6:	cmp	r3, #0
    14e8:	beq.n	1400 <SdFile::write(void const*, unsigned int)+0x10>
    14ea:	mov	r0, r7
    14ec:	bl	12f8 <SdFile::sync() [clone .part.23] [clone .constprop.37]>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    14f0:	cmp	r0, #0
    14f2:	beq.n	1400 <SdFile::write(void const*, unsigned int)+0x10>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    14f4:	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    14f6:	add	sp, #20
    14f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14fc:	ldr	r2, [r7, #8]
    14fe:	b.n	1468 <SdFile::write(void const*, unsigned int)+0x78>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1500:	lsl.w	r2, r2, lr
    1504:	add	r5, r1
    if (n == 512) {
    1506:	cmp.w	r4, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    150a:	add	r5, r2
    if (n == 512) {
    150c:	bne.n	1486 <SdFile::write(void const*, unsigned int)+0x96>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    150e:	ldr.w	r2, [sl]
    1512:	cmp	r5, r2
    1514:	beq.n	158a <SdFile::write(void const*, unsigned int)+0x19a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    1516:	ldr	r2, [pc, #176]	; (15c8 <SdFile::write(void const*, unsigned int)+0x1d8>)
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    1518:	mov	r1, r5
    151a:	ldr	r0, [r2, #0]
    return SD_readBlock(block, dst);
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
    151c:	ldrb	r2, [r0, #0]
    151e:	cmp	r2, #254	; 0xfe
    1520:	beq.n	1594 <SdFile::write(void const*, unsigned int)+0x1a4>
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    }
    #endif
    return SD_writeBlock(block, src);
    1522:	mov	r2, fp
    1524:	bl	197c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    1528:	cmp	r0, #0
    152a:	beq.w	1400 <SdFile::write(void const*, unsigned int)+0x10>
      src += 512;
    152e:	add.w	fp, fp, #512	; 0x200
    1532:	mov.w	r4, #512	; 0x200
    1536:	b.n	14c2 <SdFile::write(void const*, unsigned int)+0xd2>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    1538:	bl	db0 <SdVolume::cacheFlush()>
    153c:	cmp	r0, #0
    153e:	beq.w	1400 <SdFile::write(void const*, unsigned int)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1542:	ldr	r1, [pc, #136]	; (15cc <SdFile::write(void const*, unsigned int)+0x1dc>)
        SdVolume::cacheBlockNumber_ = block;
    1544:	str.w	r5, [sl]
    1548:	ldrb	r2, [r1, #0]
    154a:	orr.w	r2, r2, #1
    154e:	strb	r2, [r1, #0]
    1550:	b.n	149c <SdFile::write(void const*, unsigned int)+0xac>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1552:	add	r2, sp, #12
    1554:	bl	f10 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    1558:	cmp	r0, #0
    155a:	beq.w	1406 <SdFile::write(void const*, unsigned int)+0x16>
        if (vol_->isEOC(next)) {
    155e:	ldr	r0, [r7, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1560:	movw	r1, #65528	; 0xfff8
    1564:	ldr	r3, [pc, #104]	; (15d0 <SdFile::write(void const*, unsigned int)+0x1e0>)
    1566:	ldrb.w	r4, [r0, #32]
    156a:	ldr	r2, [sp, #12]
    156c:	cmp	r4, #16
    156e:	it	ne
    1570:	movne	r1, r3
    1572:	cmp	r2, r1
    1574:	bcc.w	1466 <SdFile::write(void const*, unsigned int)+0x76>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    1578:	mov	r0, r7
    157a:	bl	1364 <SdFile::addCluster()>
    157e:	cmp	r0, #0
    1580:	beq.w	1400 <SdFile::write(void const*, unsigned int)+0x10>
    1584:	ldr	r0, [r7, #32]
    1586:	ldr	r2, [r7, #8]
    1588:	b.n	1468 <SdFile::write(void const*, unsigned int)+0x78>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    158a:	mov.w	r2, #4294967295
    158e:	str.w	r2, [sl]
    1592:	b.n	1516 <SdFile::write(void const*, unsigned int)+0x126>
  }
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t writeBlock(uint32_t block, const uint8_t* src) {
    #if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__IMXRT1052__) || defined(__IMXRT1062__)
    if (chipSelectPin_ == BUILTIN_SDCARD) {
      return (SDHC_CardWriteBlock(src, block) == 0) ? true : false;
    1594:	mov	r0, fp
    1596:	bl	1240 <SDHC_CardWriteBlock(void const*, unsigned long)>
    159a:	clz	r0, r0
    159e:	lsrs	r0, r0, #5
    15a0:	b.n	1528 <SdFile::write(void const*, unsigned int)+0x138>
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    15a2:	ldr	r3, [sp, #4]
    15a4:	cmp	r3, #0
    15a6:	bne.w	1434 <SdFile::write(void const*, unsigned int)+0x44>
    15aa:	b.n	14e0 <SdFile::write(void const*, unsigned int)+0xf0>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    15ac:	ldr	r3, [pc, #36]	; (15d4 <SdFile::write(void const*, unsigned int)+0x1e4>)
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    15ae:	ldrb	r2, [r7, #5]
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    15b0:	ldr	r3, [r3, #0]
    15b2:	cmp	r3, #0
    15b4:	beq.n	14e0 <SdFile::write(void const*, unsigned int)+0xf0>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    15b6:	orr.w	r2, r2, #128	; 0x80
    15ba:	strb	r2, [r7, #5]
    15bc:	b.n	14e0 <SdFile::write(void const*, unsigned int)+0xf0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    15be:	ldr	r3, [r7, #24]
    15c0:	cmp	r3, r1
    15c2:	bcc.n	14d6 <SdFile::write(void const*, unsigned int)+0xe6>
    15c4:	ldrb	r2, [r7, #5]
    15c6:	b.n	14e0 <SdFile::write(void const*, unsigned int)+0xf0>
    15c8:	.word	0x20001668
    15cc:	.word	0x2000186c
    15d0:	.word	0x0ffffff8
    15d4:	.word	0x20001880
    15d8:	.word	0x2000166c
    15dc:	.word	0x20000a48

000015e0 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    15e0:	push	{lr}
    15e2:	sub	sp, #12
  return write(&b, 1);
    15e4:	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    15e6:	add	r3, sp, #8
    15e8:	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    15ec:	mov	r1, r3
    15ee:	bl	13f0 <SdFile::write(void const*, unsigned int)>
}
    15f2:	add	sp, #12
    15f4:	ldr.w	pc, [sp], #4

000015f8 <Sd2Card::cardCommand(unsigned char, unsigned long)>:


//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg)
{
    15f8:	push	{r4, r5, r6, r7, lr}
    15fa:	ldr	r6, [pc, #156]	; (1698 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    15fc:	movs	r7, #255	; 0xff
    15fe:	ldr	r5, [pc, #156]	; (169c <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa4>)
    1600:	ldr.w	lr, [r6]
    1604:	ldr	r3, [r5, #0]
    1606:	str	r7, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1608:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    160a:	tst.w	r4, #2031616	; 0x1f0000
    160e:	beq.n	1608 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x10>
    1610:	ldr	r4, [r3, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    1612:	uxtb	r4, r4
    1614:	cmp	r4, #255	; 0xff
    1616:	beq.n	1624 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x2c>
    1618:	ldr	r4, [r6, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    161a:	rsb	r4, lr, r4
    161e:	cmp.w	r4, #300	; 0x12c
    1622:	bcc.n	1606 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xe>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1624:	orr.w	r4, r1, #64	; 0x40
    1628:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    162a:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    162c:	tst.w	r4, #2031616	; 0x1f0000
    1630:	beq.n	162a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x32>
    1632:	ldr	r4, [r3, #116]	; 0x74
    1634:	movs	r6, #24
    1636:	lsr.w	r4, r2, r6
    163a:	uxtb	r4, r4
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    163c:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    163e:	ldr	r4, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1640:	tst.w	r4, #2031616	; 0x1f0000
    1644:	beq.n	163e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x46>
    1646:	subs	r6, #8
    1648:	ldr	r4, [r3, #116]	; 0x74

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    164a:	cmn.w	r6, #8
    164e:	bne.n	1636 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3e>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    1650:	cbz	r1, 1692 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x9a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    1652:	cmp	r1, #8
    1654:	ite	eq
    1656:	moveq	r2, #135	; 0x87
    1658:	movne	r2, #255	; 0xff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    165a:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    165c:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    165e:	tst.w	r2, #2031616	; 0x1f0000
    1662:	beq.n	165c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x64>
    1664:	ldr	r2, [r3, #116]	; 0x74
    1666:	movs	r1, #0
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1668:	movs	r4, #255	; 0xff
    166a:	str	r4, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    166c:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    166e:	tst.w	r2, #2031616	; 0x1f0000
    1672:	beq.n	166c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>
    1674:	ldr	r2, [r3, #116]	; 0x74
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    1676:	uxtb	r3, r1
    1678:	adds	r1, #1
    167a:	subs	r3, #255	; 0xff
    167c:	uxtb	r2, r2
    167e:	it	ne
    1680:	movne	r3, #1
    1682:	strb	r2, [r0, #1]
    1684:	ands.w	r3, r3, r2, lsr #7
    1688:	beq.n	168e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x96>
    168a:	ldr	r3, [r5, #0]
    168c:	b.n	166a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
  return status_;
}
    168e:	mov	r0, r2
    1690:	pop	{r4, r5, r6, r7, pc}
    1692:	movs	r2, #149	; 0x95
    1694:	b.n	165a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x62>
    1696:	nop
    1698:	.word	0x20001ae4
    169c:	.word	0x20000a5c

000016a0 <Sd2Card::chipSelectHigh()>:
//------------------------------------------------------------------------------
#ifdef SPI_HAS_TRANSACTION
static uint8_t chip_select_asserted = 0;
#endif
void Sd2Card::chipSelectHigh(void) {
    16a0:	push	{r4, lr}
  digitalWrite(chipSelectPin_, HIGH);
    16a2:	movs	r1, #1
    16a4:	ldrb	r0, [r0, #0]
    16a6:	bl	3b94 <digitalWrite>
#ifdef SPI_HAS_TRANSACTION
  if (chip_select_asserted) {
    16aa:	ldr	r1, [pc, #76]	; (16f8 <Sd2Card::chipSelectHigh()+0x58>)
    16ac:	ldrb	r3, [r1, #0]
    16ae:	cbz	r3, 16ec <Sd2Card::chipSelectHigh()+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    16b0:	ldr	r2, [pc, #72]	; (16fc <Sd2Card::chipSelectHigh()+0x5c>)
    chip_select_asserted = 0;
    16b2:	movs	r0, #0
    16b4:	ldrb	r3, [r2, #19]
    16b6:	strb	r0, [r1, #0]
    16b8:	mov	r1, r3
    16ba:	cbz	r3, 16ec <Sd2Card::chipSelectHigh()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    16bc:	lsls	r0, r3, #31
    16be:	bpl.n	16c6 <Sd2Card::chipSelectHigh()+0x26>
    16c0:	ldr	r4, [r2, #40]	; 0x28
    16c2:	ldr	r0, [pc, #60]	; (1700 <Sd2Card::chipSelectHigh()+0x60>)
    16c4:	str	r4, [r0, #0]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    16c6:	lsls	r3, r3, #30
    16c8:	bpl.n	16d2 <Sd2Card::chipSelectHigh()+0x32>
    16ca:	ldr	r0, [r2, #44]	; 0x2c
    16cc:	ldr	r3, [pc, #52]	; (1704 <Sd2Card::chipSelectHigh()+0x64>)
    16ce:	ldrb	r1, [r2, #19]
    16d0:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    16d2:	lsls	r4, r1, #29
    16d4:	bpl.n	16de <Sd2Card::chipSelectHigh()+0x3e>
    16d6:	ldr	r0, [r2, #48]	; 0x30
    16d8:	ldr	r3, [pc, #44]	; (1708 <Sd2Card::chipSelectHigh()+0x68>)
    16da:	ldrb	r1, [r2, #19]
    16dc:	str	r0, [r3, #0]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    16de:	lsls	r0, r1, #28
    16e0:	bmi.n	16ee <Sd2Card::chipSelectHigh()+0x4e>
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    16e2:	lsls	r3, r1, #27
    16e4:	bpl.n	16ec <Sd2Card::chipSelectHigh()+0x4c>
    16e6:	ldr	r2, [r2, #56]	; 0x38
    16e8:	ldr	r3, [pc, #32]	; (170c <Sd2Card::chipSelectHigh()+0x6c>)
    16ea:	str	r2, [r3, #0]
    16ec:	pop	{r4, pc}
		#endif
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    16ee:	ldr	r0, [r2, #52]	; 0x34
    16f0:	ldr	r3, [pc, #28]	; (1710 <Sd2Card::chipSelectHigh()+0x70>)
    16f2:	ldrb	r1, [r2, #19]
    16f4:	str	r0, [r3, #0]
    16f6:	b.n	16e2 <Sd2Card::chipSelectHigh()+0x42>
    16f8:	.word	0x2000188c
    16fc:	.word	0x20000a5c
    1700:	.word	0xe000e100
    1704:	.word	0xe000e104
    1708:	.word	0xe000e108
    170c:	.word	0xe000e110
    1710:	.word	0xe000e10c

00001714 <Sd2Card::chipSelectLow()>:
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    1714:	ldr	r2, [pc, #256]	; (1818 <Sd2Card::chipSelectLow()+0x104>)
    1716:	ldrb	r3, [r2, #0]
    1718:	cbz	r3, 1722 <Sd2Card::chipSelectLow()+0xe>
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    171a:	ldrb	r0, [r0, #0]
    171c:	movs	r1, #0
    171e:	b.w	3b94 <digitalWrite>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1722:	ldr	r3, [pc, #248]	; (181c <Sd2Card::chipSelectLow()+0x108>)
    1724:	ldr	r1, [pc, #248]	; (1820 <Sd2Card::chipSelectLow()+0x10c>)
    SPI.endTransaction();
  }
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
    1726:	push	{r4, r5, r6, r7, lr}
#ifdef SPI_HAS_TRANSACTION
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    1728:	movs	r4, #1
    172a:	ldrb	r6, [r3, #19]
    172c:	ldr	r5, [r1, #0]
    172e:	strb	r4, [r2, #0]
    1730:	ldr	r4, [r1, #4]
    1732:	cmp	r6, #0
    1734:	beq.n	179a <Sd2Card::chipSelectLow()+0x86>
			__disable_irq();
    1736:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1738:	ldrb	r1, [r3, #19]
    173a:	lsls	r6, r1, #31
    173c:	mov	r2, r1
    173e:	bpl.n	1752 <Sd2Card::chipSelectLow()+0x3e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1740:	ldr.w	lr, [pc, #252]	; 1840 <Sd2Card::chipSelectLow()+0x12c>
    1744:	ldr	r7, [r3, #20]
    1746:	ldr.w	r6, [lr]
    174a:	ands	r6, r7
    174c:	str	r6, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    174e:	str.w	r6, [lr]
			}
			if (interruptMasksUsed & 0x02) {
    1752:	lsls	r7, r1, #30
    1754:	bpl.n	1764 <Sd2Card::chipSelectLow()+0x50>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1756:	ldr	r6, [pc, #204]	; (1824 <Sd2Card::chipSelectLow()+0x110>)
    1758:	ldr	r1, [r3, #24]
    175a:	ldr	r7, [r6, #0]
    175c:	ldrb	r2, [r3, #19]
    175e:	ands	r1, r7
    1760:	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1762:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x04) {
    1764:	lsls	r6, r2, #29
    1766:	bpl.n	1776 <Sd2Card::chipSelectLow()+0x62>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1768:	ldr	r6, [pc, #188]	; (1828 <Sd2Card::chipSelectLow()+0x114>)
    176a:	ldr	r1, [r3, #28]
    176c:	ldr	r7, [r6, #0]
    176e:	ldrb	r2, [r3, #19]
    1770:	ands	r1, r7
    1772:	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1774:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x08) {
    1776:	lsls	r1, r2, #28
    1778:	bpl.n	1788 <Sd2Card::chipSelectLow()+0x74>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    177a:	ldr	r6, [pc, #176]	; (182c <Sd2Card::chipSelectLow()+0x118>)
    177c:	ldr	r1, [r3, #32]
    177e:	ldr	r7, [r6, #0]
    1780:	ldrb	r2, [r3, #19]
    1782:	ands	r1, r7
    1784:	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1786:	str	r1, [r6, #0]
			}
			if (interruptMasksUsed & 0x10) {
    1788:	lsls	r2, r2, #27
    178a:	bpl.n	1798 <Sd2Card::chipSelectLow()+0x84>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    178c:	ldr	r1, [pc, #160]	; (1830 <Sd2Card::chipSelectLow()+0x11c>)
    178e:	ldr	r2, [r3, #36]	; 0x24
    1790:	ldr	r6, [r1, #0]
    1792:	ands	r2, r6
    1794:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1796:	str	r2, [r1, #0]
			}
			__enable_irq();
    1798:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    179a:	ldr	r2, [r3, #8]
    179c:	ldr	r1, [pc, #124]	; (181c <Sd2Card::chipSelectLow()+0x108>)
    179e:	cmp	r2, r5
    17a0:	beq.n	17fa <Sd2Card::chipSelectLow()+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    17a2:	ldr	r2, [pc, #144]	; (1834 <Sd2Card::chipSelectLow()+0x120>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    17a4:	ldr	r6, [pc, #144]	; (1838 <Sd2Card::chipSelectLow()+0x124>)
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    17a6:	ldr	r2, [r2, #24]
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    17a8:	str	r5, [r1, #8]

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    17aa:	ubfx	r1, r2, #4, #2
    17ae:	ubfx	r2, r2, #26, #3
    17b2:	ldr.w	r1, [r6, r1, lsl #2]
    17b6:	adds	r2, #1
    17b8:	udiv	r1, r1, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    17bc:	cbz	r5, 17f6 <Sd2Card::chipSelectLow()+0xe2>
    17be:	udiv	r2, r1, r5

			if (d && clkhz/d > _clock) d++;
    17c2:	cbz	r2, 17d6 <Sd2Card::chipSelectLow()+0xc2>
    17c4:	udiv	r1, r1, r2
    17c8:	cmp	r1, r5
    17ca:	it	hi
    17cc:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    17ce:	cmp.w	r2, #258	; 0x102
    17d2:	bcc.n	17fe <Sd2Card::chipSelectLow()+0xea>
    17d4:	ldr	r2, [pc, #100]	; (183c <Sd2Card::chipSelectLow()+0x128>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    17d6:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    17d8:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    17da:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    17dc:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    17de:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    17e0:	str	r6, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    17e2:	str	r5, [r3, #36]	; 0x24
		port().CCR = _ccr;
    17e4:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    17e6:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    17e8:	str	r1, [r3, #16]
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    17ea:	movs	r1, #0
    17ec:	ldrb	r0, [r0, #0]
}
    17ee:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    17f2:	b.w	3b94 <digitalWrite>

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    17f6:	mov	r2, r1
    17f8:	b.n	17c2 <Sd2Card::chipSelectLow()+0xae>
    17fa:	ldr	r2, [r1, #12]
    17fc:	b.n	17d8 <Sd2Card::chipSelectLow()+0xc4>

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    17fe:	cmp	r2, #2
    1800:	it	ls
    1802:	movls	r2, #0
    1804:	bls.n	17d6 <Sd2Card::chipSelectLow()+0xc2>
    1806:	subs	r2, #2
    1808:	lsrs	r5, r2, #1
    180a:	lsls	r1, r5, #16
    180c:	orr.w	r2, r2, r5, lsl #8
    1810:	and.w	r1, r1, #16711680	; 0xff0000
    1814:	orrs	r2, r1
    1816:	b.n	17d6 <Sd2Card::chipSelectLow()+0xc2>
    1818:	.word	0x2000188c
    181c:	.word	0x20000a5c
    1820:	.word	0x20001884
    1824:	.word	0xe000e184
    1828:	.word	0xe000e188
    182c:	.word	0xe000e18c
    1830:	.word	0xe000e190
    1834:	.word	0x400fc000
    1838:	.word	0x2000003c
    183c:	.word	0x007f7fff
    1840:	.word	0xe000e180

00001844 <Sd2Card::waitStartBlock()>:
    1844:	ldr	r1, [pc, #60]	; (1884 <Sd2Card::waitStartBlock()+0x40>)
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    1846:	push	{r4, r5, r6}
    1848:	ldr	r5, [pc, #60]	; (1888 <Sd2Card::waitStartBlock()+0x44>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    184a:	movs	r4, #255	; 0xff
    184c:	ldr	r6, [r1, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    184e:	ldr	r2, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1850:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1852:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1854:	tst.w	r3, #2031616	; 0x1f0000
    1858:	beq.n	1852 <Sd2Card::waitStartBlock()+0xe>
    185a:	ldr	r3, [r2, #116]	; 0x74
    185c:	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    185e:	cmp	r3, #255	; 0xff
    1860:	strb	r3, [r0, #1]
    1862:	bne.n	1874 <Sd2Card::waitStartBlock()+0x30>
    1864:	ldr	r3, [r1, #0]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    1866:	subs	r3, r3, r6
    1868:	cmp.w	r3, #300	; 0x12c
    186c:	bls.n	184e <Sd2Card::waitStartBlock()+0xa>
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    186e:	movs	r0, #0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    1870:	pop	{r4, r5, r6}
    1872:	bx	lr
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    1874:	sub.w	r0, r3, #254	; 0xfe
    1878:	clz	r0, r0
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    187c:	pop	{r4, r5, r6}
uint8_t Sd2Card::waitStartBlock(void) {
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
      return false; // SD_CARD_ERROR_READ_TIMEOUT
    187e:	lsrs	r0, r0, #5
  }
  if (status_ != DATA_START_BLOCK) {
    return false; // SD_CARD_ERROR_READ
  }
  return true;
}
    1880:	bx	lr
    1882:	nop
    1884:	.word	0x20001ae4
    1888:	.word	0x20000a5c

0000188c <Sd2Card::SD_readBlock(unsigned long, unsigned char*)>:

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    188c:	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    188e:	ldrb	r3, [r0, #2]

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_readBlock(uint32_t block, uint8_t* dst)
{
    1890:	mov	r5, r1
    1892:	mov	r4, r0
    1894:	mov	r6, r2
  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    1896:	cmp	r3, #3
    1898:	it	ne
    189a:	lslne	r5, r1, #9
  chipSelectLow();
    189c:	bl	1714 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD17, block)) {
    18a0:	movs	r1, #17
    18a2:	mov	r2, r5
    18a4:	mov	r0, r4
    18a6:	bl	15f8 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    18aa:	cbnz	r0, 18b4 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x28>
    goto fail; // SD_CARD_ERROR_CMD17
  }
  if (!waitStartBlock()) {
    18ac:	mov	r0, r4
    18ae:	bl	1844 <Sd2Card::waitStartBlock()>
    18b2:	cbnz	r0, 18be <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x32>
#endif
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    18b4:	mov	r0, r4
    18b6:	bl	16a0 <Sd2Card::chipSelectHigh()>
  return false;
    18ba:	movs	r0, #0
}
    18bc:	pop	{r4, r5, r6, pc}
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    18be:	ldr	r5, [pc, #68]	; (1904 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x78>)
 static  uint8_t spiRec(void) {
	return SPI.transfer(0xff);
 }
 
 static void spiRec(uint8_t* buf, size_t len) {
	memset(buf, 0xFF, len);
    18c0:	mov.w	r2, #512	; 0x200
    18c4:	movs	r1, #255	; 0xff
    18c6:	mov	r0, r6
    18c8:	bl	5d60 <memset>
    18cc:	mov.w	r3, #512	; 0x200
    18d0:	mov	r2, r6
    18d2:	mov	r0, r5
    18d4:	mov	r1, r6
    18d6:	bl	1e40 <SPIClass::transfer(void const*, void*, unsigned int)>
    18da:	ldr	r3, [r5, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    18dc:	movs	r2, #255	; 0xff
    18de:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    18e0:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    18e2:	tst.w	r2, #2031616	; 0x1f0000
    18e6:	beq.n	18e0 <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x54>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    18e8:	movs	r2, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    18ea:	ldr	r1, [r3, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    18ec:	str	r2, [r3, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    18ee:	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    18f0:	tst.w	r2, #2031616	; 0x1f0000
    18f4:	beq.n	18ee <Sd2Card::SD_readBlock(unsigned long, unsigned char*)+0x62>
  dst[511] = SPDR;
  // skip CRC bytes
  spiRec();
  spiRec();
#endif
  chipSelectHigh();
    18f6:	mov	r0, r4
    18f8:	ldr	r3, [r3, #116]	; 0x74
    18fa:	bl	16a0 <Sd2Card::chipSelectHigh()>
  return true;
    18fe:	movs	r0, #1
    1900:	pop	{r4, r5, r6, pc}
    1902:	nop
    1904:	.word	0x20000a5c

00001908 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    1908:	ldr	r3, [pc, #108]	; (1978 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x70>)
    190a:	push	{r4}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    190c:	ldr	r4, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    190e:	str	r1, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1910:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1912:	tst.w	r3, #2031616	; 0x1f0000
    1916:	beq.n	1910 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x8>
    1918:	subs	r1, r2, #1
    191a:	ldr	r3, [r4, #116]	; 0x74
    191c:	addw	r2, r2, #511	; 0x1ff
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1920:	ldrb.w	r3, [r1, #1]!
    1924:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1926:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1928:	tst.w	r3, #2031616	; 0x1f0000
    192c:	beq.n	1926 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1e>
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    192e:	cmp	r1, r2
    1930:	ldr	r3, [r4, #116]	; 0x74
    1932:	bne.n	1920 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x18>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1934:	movs	r3, #255	; 0xff
    1936:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1938:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    193a:	tst.w	r3, #2031616	; 0x1f0000
    193e:	beq.n	1938 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x30>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1940:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    1942:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1944:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1946:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1948:	tst.w	r3, #2031616	; 0x1f0000
    194c:	beq.n	1946 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    194e:	movs	r3, #255	; 0xff
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
			if (fifo > 0) return port().RDR;
    1950:	ldr	r2, [r4, #116]	; 0x74
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    1952:	str	r3, [r4, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1954:	ldr	r3, [r4, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1956:	tst.w	r3, #2031616	; 0x1f0000
    195a:	beq.n	1954 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4c>
    195c:	ldr	r3, [r4, #116]	; 0x74
    195e:	uxtb	r3, r3
    1960:	and.w	r2, r3, #31
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    1964:	strb	r3, [r0, #1]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    return false; // SD_CARD_ERROR_WRITE
  }
  return true;
}
    1966:	ldr.w	r4, [sp], #4
    196a:	sub.w	r0, r2, #5
    196e:	clz	r0, r0
    1972:	lsrs	r0, r0, #5
    1974:	bx	lr
    1976:	nop
    1978:	.word	0x20000a5c

0000197c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::SD_writeBlock(uint32_t blockNumber, const uint8_t* src) {
    197c:	push	{r3, r4, r5, r6, r7, lr}
    197e:	mov	r5, r0
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    1980:	cbz	r1, 199e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_BLOCK_ZERO
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    1982:	ldrb	r3, [r0, #2]
    1984:	mov	r4, r1
    1986:	mov	r6, r2
    1988:	cmp	r3, #3
    198a:	it	ne
    198c:	lslne	r4, r1, #9
  chipSelectLow();
    198e:	bl	1714 <Sd2Card::chipSelectLow()>
  if (cardCommand(CMD24, blockNumber)) {
    1992:	movs	r1, #24
    1994:	mov	r2, r4
    1996:	mov	r0, r5
    1998:	bl	15f8 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    199c:	cbz	r0, 19a8 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x2c>
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    199e:	mov	r0, r5
    19a0:	bl	16a0 <Sd2Card::chipSelectHigh()>
  return false;
    19a4:	movs	r0, #0
}
    19a6:	pop	{r3, r4, r5, r6, r7, pc}
  if (type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  chipSelectLow();
  if (cardCommand(CMD24, blockNumber)) {
    goto fail; // SD_CARD_ERROR_CMD24
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    19a8:	mov	r2, r6
    19aa:	movs	r1, #254	; 0xfe
    19ac:	mov	r0, r5
    19ae:	bl	1908 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    19b2:	cmp	r0, #0
    19b4:	beq.n	199e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    19b6:	ldr	r1, [pc, #84]	; (1a0c <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x90>)
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    19b8:	movs	r0, #255	; 0xff
    19ba:	ldr	r6, [pc, #84]	; (1a10 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x94>)
    19bc:	ldr	r7, [r1, #0]
    19be:	ldr	r2, [r6, #0]
    19c0:	str	r0, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    19c2:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    19c4:	tst.w	r3, #2031616	; 0x1f0000
    19c8:	beq.n	19c2 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x46>
    19ca:	ldr	r4, [r2, #116]	; 0x74
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    19cc:	uxtb	r4, r4
    19ce:	cmp	r4, #255	; 0xff
    19d0:	beq.n	19de <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x62>
    19d2:	ldr	r3, [r1, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    19d4:	subs	r3, r3, r7
    19d6:	cmp.w	r3, #600	; 0x258
    19da:	bcc.n	19c0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x44>
    19dc:	b.n	199e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    goto fail; // SD_CARD_ERROR_WRITE_TIMEOUT
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    19de:	movs	r2, #0
    19e0:	movs	r1, #13
    19e2:	mov	r0, r5
    19e4:	bl	15f8 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    19e8:	cmp	r0, #0
    19ea:	bne.n	199e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    19ec:	ldr	r2, [r6, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    19ee:	str	r4, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    19f0:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    19f2:	tst.w	r3, #2031616	; 0x1f0000
    19f6:	beq.n	19f0 <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x74>
    19f8:	ldr	r3, [r2, #116]	; 0x74
    19fa:	tst.w	r3, #255	; 0xff
    19fe:	bne.n	199e <Sd2Card::SD_writeBlock(unsigned long, unsigned char const*)+0x22>
    goto fail; // SD_CARD_ERROR_WRITE_PROGRAMMING
  }
  chipSelectHigh();
    1a00:	mov	r0, r5
    1a02:	bl	16a0 <Sd2Card::chipSelectHigh()>
  return true;
    1a06:	movs	r0, #1
    1a08:	pop	{r3, r4, r5, r6, r7, pc}
    1a0a:	nop
    1a0c:	.word	0x20001ae4
    1a10:	.word	0x20000a5c

00001a14 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    1a14:	ldr	r3, [pc, #8]	; (1a20 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    1a16:	movs	r2, #7
    1a18:	ldr	r1, [pc, #8]	; (1a24 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x10>)
    1a1a:	stmia.w	r3, {r1, r2}
    1a1e:	bx	lr
    1a20:	.word	0x20001884
    1a24:	.word	0x003d0900

00001a28 <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    1a28:	push	{r4, lr}
    1a2a:	mov	r4, r0
		end();
    1a2c:	bl	41e8 <IntervalTimer::end()>
	}
    1a30:	mov	r0, r4
    1a32:	pop	{r4, pc}

00001a34 <isr()>:
	if (servoIndex >= MAX_SERVOS) return 0;
	return servo_active_mask & (1<<servoIndex);
}

static void isr(void)
{
    1a34:	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t channel=MAX_SERVOS;
	static uint8_t next_low=255;
	static uint32_t tick_accum=0;

	// If a pin is still HIGH from a prior run, turn it off
	if (next_low < 255) {
    1a36:	ldr	r4, [pc, #304]	; (1b68 <isr()+0x134>)
    1a38:	ldrb	r0, [r4, #0]
    1a3a:	cmp	r0, #255	; 0xff
    1a3c:	beq.n	1a44 <isr()+0x10>
		digitalWrite(next_low, LOW);
    1a3e:	movs	r1, #0
    1a40:	bl	3b94 <digitalWrite>
	}

	// If we're on an active channel, drive it HIGH
	if (channel < MAX_SERVOS && (servo_active_mask & (1<<channel))) {
    1a44:	ldr	r7, [pc, #292]	; (1b6c <isr()+0x138>)
    1a46:	ldrb	r3, [r7, #0]
    1a48:	cmp	r3, #11
    1a4a:	bhi.n	1ac0 <isr()+0x8c>
    1a4c:	ldr	r5, [pc, #288]	; (1b70 <isr()+0x13c>)
    1a4e:	movs	r1, #1
    1a50:	ldr	r0, [r5, #0]
    1a52:	lsl.w	r2, r1, r3
    1a56:	tst	r2, r0
    1a58:	bne.n	1afc <isr()+0xc8>
		uint8_t pin = servo_pin[channel];
		digitalWrite(pin, HIGH);
		next_low = pin;
	} else {
		next_low = 255;
    1a5a:	movs	r2, #255	; 0xff
    1a5c:	strb	r2, [r4, #0]
		//delayMicroseconds(1);
		//digitalWrite(2, LOW);
	//}

	// Find the next channel and set the timer up
	if (++channel >= MAX_SERVOS) {
    1a5e:	adds	r3, #1
    1a60:	uxtb	r3, r3
    1a62:	cmp	r3, #11
    1a64:	bhi.n	1ab8 <isr()+0x84>
    1a66:	strb	r3, [r7, #0]
    1a68:	ldrb	r6, [r7, #0]
    1a6a:	movs	r4, #0
		channel = 0;
	}
	do {
		if (servo_active_mask & (1<<channel)) {
    1a6c:	movs	r5, #1
    1a6e:	b.n	1a7a <isr()+0x46>
			uint32_t ticks = servo_ticks[channel];
			tick_accum += ticks;
			timer.update(ticksToUs_f(ticks));
			return;
		}
		channel++;
    1a70:	uxtb	r3, r1
    1a72:	movs	r4, #1
	} while (channel < MAX_SERVOS);
    1a74:	cmp	r3, #12
    1a76:	mov	r6, r3
    1a78:	beq.n	1ac6 <isr()+0x92>
	// Find the next channel and set the timer up
	if (++channel >= MAX_SERVOS) {
		channel = 0;
	}
	do {
		if (servo_active_mask & (1<<channel)) {
    1a7a:	lsl.w	r2, r5, r3
			uint32_t ticks = servo_ticks[channel];
			tick_accum += ticks;
			timer.update(ticksToUs_f(ticks));
			return;
		}
		channel++;
    1a7e:	adds	r1, r3, #1
	// Find the next channel and set the timer up
	if (++channel >= MAX_SERVOS) {
		channel = 0;
	}
	do {
		if (servo_active_mask & (1<<channel)) {
    1a80:	tst	r2, r0
    1a82:	beq.n	1a70 <isr()+0x3c>
    1a84:	cmp	r4, #0
    1a86:	bne.n	1b64 <isr()+0x130>
			uint32_t ticks = servo_ticks[channel];
    1a88:	ldr	r1, [pc, #232]	; (1b74 <isr()+0x140>)
			tick_accum += ticks;
    1a8a:	ldr	r2, [pc, #236]	; (1b78 <isr()+0x144>)
	if (++channel >= MAX_SERVOS) {
		channel = 0;
	}
	do {
		if (servo_active_mask & (1<<channel)) {
			uint32_t ticks = servo_ticks[channel];
    1a8c:	ldrh.w	r3, [r1, r3, lsl #1]
			tick_accum += ticks;
    1a90:	ldr	r1, [r2, #0]
			timer.update(ticksToUs_f(ticks));
    1a92:	vmov	s15, r3
		channel = 0;
	}
	do {
		if (servo_active_mask & (1<<channel)) {
			uint32_t ticks = servo_ticks[channel];
			tick_accum += ticks;
    1a96:	add	r3, r1
			timer.update(ticksToUs_f(ticks));
    1a98:	vcvt.f32.u32	s15, s15, #4
		channel = 0;
	}
	do {
		if (servo_active_mask & (1<<channel)) {
			uint32_t ticks = servo_ticks[channel];
			tick_accum += ticks;
    1a9c:	str	r3, [r2, #0]
	}
	void update(long microseconds) {
		return update((int)microseconds);
	}
	void update(float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return;
    1a9e:	vcmpe.f32	s15, #0.0
    1aa2:	vmrs	APSR_nzcv, fpscr
    1aa6:	bls.n	1ab6 <isr()+0x82>
    1aa8:	vldr	s14, [pc, #208]	; 1b7c <isr()+0x148>
    1aac:	vcmpe.f32	s15, s14
    1ab0:	vmrs	APSR_nzcv, fpscr
    1ab4:	ble.n	1b0e <isr()+0xda>
    1ab6:	pop	{r3, r4, r5, r6, r7, pc}
		//digitalWrite(2, LOW);
	//}

	// Find the next channel and set the timer up
	if (++channel >= MAX_SERVOS) {
		channel = 0;
    1ab8:	movs	r2, #0
    1aba:	mov	r3, r2
    1abc:	strb	r2, [r7, #0]
    1abe:	b.n	1a68 <isr()+0x34>
    1ac0:	ldr	r2, [pc, #172]	; (1b70 <isr()+0x13c>)
    1ac2:	ldr	r0, [r2, #0]
    1ac4:	b.n	1a5a <isr()+0x26>
		}
		channel++;
	} while (channel < MAX_SERVOS);

	// when all channels have output, wait for the refresh interval
	if (tick_accum < usToTicks(REFRESH_INTERVAL)) {
    1ac6:	ldr	r2, [pc, #176]	; (1b78 <isr()+0x144>)
    1ac8:	ldr	r0, [pc, #180]	; (1b80 <isr()+0x14c>)
    1aca:	ldr	r1, [r2, #0]
    1acc:	strb	r3, [r7, #0]
    1ace:	cmp	r1, r0
    1ad0:	bhi.n	1b56 <isr()+0x122>
		timer.update(ticksToUs_f(usToTicks(REFRESH_INTERVAL) - tick_accum));
    1ad2:	ldr	r3, [pc, #176]	; (1b84 <isr()+0x150>)
    1ad4:	subs	r3, r3, r1
    1ad6:	vmov	s15, r3
    1ada:	vcvt.f32.s32	s15, s15, #4
    1ade:	vcmpe.f32	s15, #0.0
    1ae2:	vmrs	APSR_nzcv, fpscr
    1ae6:	bls.n	1af6 <isr()+0xc2>
    1ae8:	vldr	s14, [pc, #144]	; 1b7c <isr()+0x148>
    1aec:	vcmpe.f32	s15, s14
    1af0:	vmrs	APSR_nzcv, fpscr
    1af4:	ble.n	1b30 <isr()+0xfc>
	} else {
		timer.update(ticksToUs_f(100));
	}
	tick_accum = 0;
    1af6:	movs	r3, #0
    1af8:	str	r3, [r2, #0]
    1afa:	pop	{r3, r4, r5, r6, r7, pc}
		digitalWrite(next_low, LOW);
	}

	// If we're on an active channel, drive it HIGH
	if (channel < MAX_SERVOS && (servo_active_mask & (1<<channel))) {
		uint8_t pin = servo_pin[channel];
    1afc:	ldr	r2, [pc, #136]	; (1b88 <isr()+0x154>)
    1afe:	ldrb	r6, [r2, r3]
		digitalWrite(pin, HIGH);
    1b00:	mov	r0, r6
    1b02:	bl	3b94 <digitalWrite>
		next_low = pin;
    1b06:	strb	r6, [r4, #0]
    1b08:	ldr	r0, [r5, #0]
    1b0a:	ldrb	r3, [r7, #0]
    1b0c:	b.n	1a5e <isr()+0x2a>
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
    1b0e:	vmov.f32	s13, #56	; 0x41c00000  24.0
    1b12:	vmov.f32	s14, #224	; 0xbf000000 -0.5
    1b16:	vfma.f32	s14, s15, s13
    1b1a:	vcvt.u32.f32	s15, s14
    1b1e:	vmov	r3, s15
		if (cycles < 17) return;
    1b22:	cmp	r3, #16
    1b24:	bls.n	1ab6 <isr()+0x82>
		if (channel) channel->LDVAL = cycles;
    1b26:	ldr	r2, [pc, #100]	; (1b8c <isr()+0x158>)
    1b28:	ldr	r2, [r2, #0]
    1b2a:	cmp	r2, #0
    1b2c:	bne.n	1af8 <isr()+0xc4>
    1b2e:	b.n	1ab6 <isr()+0x82>
	void update(long microseconds) {
		return update((int)microseconds);
	}
	void update(float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
    1b30:	vmov.f32	s13, #56	; 0x41c00000  24.0
    1b34:	vmov.f32	s14, #224	; 0xbf000000 -0.5
    1b38:	vfma.f32	s14, s15, s13
    1b3c:	vcvt.u32.f32	s15, s14
    1b40:	vmov	r3, s15
		if (cycles < 17) return;
    1b44:	cmp	r3, #16
    1b46:	bls.n	1af6 <isr()+0xc2>
		if (channel) channel->LDVAL = cycles;
    1b48:	ldr	r1, [pc, #64]	; (1b8c <isr()+0x158>)
    1b4a:	ldr	r1, [r1, #0]
    1b4c:	cmp	r1, #0
    1b4e:	beq.n	1af6 <isr()+0xc2>
    1b50:	vstr	s15, [r1]
    1b54:	b.n	1af6 <isr()+0xc2>
    1b56:	ldr	r3, [pc, #52]	; (1b8c <isr()+0x158>)
    1b58:	ldr	r3, [r3, #0]
    1b5a:	cmp	r3, #0
    1b5c:	beq.n	1af6 <isr()+0xc2>
    1b5e:	movs	r1, #149	; 0x95
    1b60:	str	r1, [r3, #0]
    1b62:	b.n	1af6 <isr()+0xc2>
    1b64:	strb	r6, [r7, #0]
    1b66:	b.n	1a88 <isr()+0x54>
    1b68:	.word	0x20000a58
    1b6c:	.word	0x20000a4c
    1b70:	.word	0x20001890
    1b74:	.word	0x20001898
    1b78:	.word	0x200018bc
    1b7c:	.word	0x4d2aaaab
    1b80:	.word	0x0004e1ff
    1b84:	.word	0x0004e200
    1b88:	.word	0x200018b0
    1b8c:	.word	0x20000a50

00001b90 <Servo::Servo()>:
static uint16_t servo_ticks[MAX_SERVOS];

static IntervalTimer timer;
static void isr(void);

Servo::Servo()
    1b90:	push	{r4, r5, r6}
    1b92:	ldr	r6, [pc, #60]	; (1bd0 <Servo::Servo()+0x40>)
{
	uint16_t mask;

	servoIndex = 0;
    1b94:	movs	r3, #0
    1b96:	movs	r1, #12
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
    1b98:	movs	r2, #1
    1b9a:	ldr	r5, [r6, #0]

Servo::Servo()
{
	uint16_t mask;

	servoIndex = 0;
    1b9c:	strb	r3, [r0, #4]
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
		if (!(servo_allocated_mask & mask)) {
    1b9e:	tst	r2, r5
Servo::Servo()
{
	uint16_t mask;

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
    1ba0:	mov.w	r4, r2, lsl #1
		if (!(servo_allocated_mask & mask)) {
    1ba4:	beq.n	1bbc <Servo::Servo()+0x2c>
			servo_allocated_mask |= mask;
			servo_active_mask &= ~mask;
			return;
		}
		servoIndex++;
    1ba6:	ldrb	r3, [r0, #4]
Servo::Servo()
{
	uint16_t mask;

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
    1ba8:	subs	r1, #1
    1baa:	uxth	r2, r4
		if (!(servo_allocated_mask & mask)) {
			servo_allocated_mask |= mask;
			servo_active_mask &= ~mask;
			return;
		}
		servoIndex++;
    1bac:	add.w	r3, r3, #1
    1bb0:	strb	r3, [r0, #4]
Servo::Servo()
{
	uint16_t mask;

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
    1bb2:	bne.n	1b9e <Servo::Servo()+0xe>
			servo_active_mask &= ~mask;
			return;
		}
		servoIndex++;
	}
	servoIndex = INVALID_SERVO;
    1bb4:	movs	r3, #255	; 0xff
    1bb6:	strb	r3, [r0, #4]
}
    1bb8:	pop	{r4, r5, r6}
    1bba:	bx	lr

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
		if (!(servo_allocated_mask & mask)) {
			servo_allocated_mask |= mask;
			servo_active_mask &= ~mask;
    1bbc:	ldr	r1, [pc, #20]	; (1bd4 <Servo::Servo()+0x44>)
	uint16_t mask;

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
		if (!(servo_allocated_mask & mask)) {
			servo_allocated_mask |= mask;
    1bbe:	orrs	r5, r2
			servo_active_mask &= ~mask;
    1bc0:	ldr	r3, [r1, #0]
	uint16_t mask;

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
		if (!(servo_allocated_mask & mask)) {
			servo_allocated_mask |= mask;
    1bc2:	str	r5, [r6, #0]
			servo_active_mask &= ~mask;
    1bc4:	bic.w	r2, r3, r2
			return;
		}
		servoIndex++;
	}
	servoIndex = INVALID_SERVO;
}
    1bc8:	pop	{r4, r5, r6}

	servoIndex = 0;
	for (mask=1; mask < (1<<MAX_SERVOS); mask <<= 1) {
		if (!(servo_allocated_mask & mask)) {
			servo_allocated_mask |= mask;
			servo_active_mask &= ~mask;
    1bca:	str	r2, [r1, #0]
			return;
		}
		servoIndex++;
	}
	servoIndex = INVALID_SERVO;
}
    1bcc:	bx	lr
    1bce:	nop
    1bd0:	.word	0x20001894
    1bd4:	.word	0x20001890

00001bd8 <Servo::attach(int, int, int)>:
{
	return attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int minimum, int maximum)
{
    1bd8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (servoIndex < MAX_SERVOS) {
    1bdc:	ldrb	r4, [r0, #4]
    1bde:	cmp	r4, #11
    1be0:	bls.n	1be8 <Servo::attach(int, int, int)+0x10>
		if ((IRQ_NUMBER_t)timer >= NVIC_NUM_INTERRUPTS) {
			timer.begin(isr, 10);
		}
	}
	return servoIndex;
}
    1be2:	mov	r0, r4
    1be4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

uint8_t Servo::attach(int pin, int minimum, int maximum)
{
	if (servoIndex < MAX_SERVOS) {
		pinMode(pin, OUTPUT);
    1be8:	uxtb	r6, r1
    1bea:	mov	r5, r0
    1bec:	movs	r1, #1
    1bee:	mov	r7, r3
    1bf0:	mov	r0, r6
    1bf2:	mov	r8, r2
    1bf4:	bl	3ba0 <pinMode>
		servo_pin[servoIndex] = pin;
    1bf8:	ldrb	r4, [r5, #4]
		servo_ticks[servoIndex] = usToTicks(DEFAULT_PULSE_WIDTH);
		servo_active_mask |= (1<<servoIndex);
    1bfa:	ldr	r0, [pc, #64]	; (1c3c <Servo::attach(int, int, int)+0x64>)
    1bfc:	movs	r3, #1
		min_ticks = usToTicks(minimum);
    1bfe:	mov.w	r1, r8, lsl #4
    1c02:	ldr.w	lr, [pc, #72]	; 1c4c <Servo::attach(int, int, int)+0x74>
{
	if (servoIndex < MAX_SERVOS) {
		pinMode(pin, OUTPUT);
		servo_pin[servoIndex] = pin;
		servo_ticks[servoIndex] = usToTicks(DEFAULT_PULSE_WIDTH);
		servo_active_mask |= (1<<servoIndex);
    1c06:	lsls	r3, r4
    1c08:	ldr	r2, [r0, #0]
		min_ticks = usToTicks(minimum);
		max_ticks = usToTicks(maximum);
    1c0a:	lsls	r7, r7, #4
	if (servoIndex < MAX_SERVOS) {
		pinMode(pin, OUTPUT);
		servo_pin[servoIndex] = pin;
		servo_ticks[servoIndex] = usToTicks(DEFAULT_PULSE_WIDTH);
		servo_active_mask |= (1<<servoIndex);
		min_ticks = usToTicks(minimum);
    1c0c:	strh	r1, [r5, #0]
{
	if (servoIndex < MAX_SERVOS) {
		pinMode(pin, OUTPUT);
		servo_pin[servoIndex] = pin;
		servo_ticks[servoIndex] = usToTicks(DEFAULT_PULSE_WIDTH);
		servo_active_mask |= (1<<servoIndex);
    1c0e:	orrs	r2, r3

uint8_t Servo::attach(int pin, int minimum, int maximum)
{
	if (servoIndex < MAX_SERVOS) {
		pinMode(pin, OUTPUT);
		servo_pin[servoIndex] = pin;
    1c10:	ldr	r3, [pc, #44]	; (1c40 <Servo::attach(int, int, int)+0x68>)
		servo_ticks[servoIndex] = usToTicks(DEFAULT_PULSE_WIDTH);
		servo_active_mask |= (1<<servoIndex);
		min_ticks = usToTicks(minimum);
		max_ticks = usToTicks(maximum);
    1c12:	strh	r7, [r5, #2]
uint8_t Servo::attach(int pin, int minimum, int maximum)
{
	if (servoIndex < MAX_SERVOS) {
		pinMode(pin, OUTPUT);
		servo_pin[servoIndex] = pin;
		servo_ticks[servoIndex] = usToTicks(DEFAULT_PULSE_WIDTH);
    1c14:	movw	r7, #24000	; 0x5dc0

uint8_t Servo::attach(int pin, int minimum, int maximum)
{
	if (servoIndex < MAX_SERVOS) {
		pinMode(pin, OUTPUT);
		servo_pin[servoIndex] = pin;
    1c18:	strb	r6, [r3, r4]
		servo_ticks[servoIndex] = usToTicks(DEFAULT_PULSE_WIDTH);
    1c1a:	ldr	r1, [pc, #40]	; (1c44 <Servo::attach(int, int, int)+0x6c>)
			}
			NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
		}
	}
	operator IRQ_NUMBER_t() {
		if (channel) {
    1c1c:	ldr.w	r3, [lr]
    1c20:	strh.w	r7, [r1, r4, lsl #1]
		servo_active_mask |= (1<<servoIndex);
    1c24:	str	r2, [r0, #0]
    1c26:	cmp	r3, #0
    1c28:	bne.n	1be2 <Servo::attach(int, int, int)+0xa>
	}
	bool begin(void (*funct)(), unsigned int microseconds) {
		if (microseconds == 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (24000000 / 1000000) * microseconds - 1;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
    1c2a:	mov	r0, lr
    1c2c:	movs	r2, #239	; 0xef
    1c2e:	ldr	r1, [pc, #24]	; (1c48 <Servo::attach(int, int, int)+0x70>)
    1c30:	bl	4128 <IntervalTimer::beginCycles(void (*)(), unsigned long)>
    1c34:	ldrb	r4, [r5, #4]
		if ((IRQ_NUMBER_t)timer >= NVIC_NUM_INTERRUPTS) {
			timer.begin(isr, 10);
		}
	}
	return servoIndex;
}
    1c36:	mov	r0, r4
    1c38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c3c:	.word	0x20001890
    1c40:	.word	0x200018b0
    1c44:	.word	0x20001898
    1c48:	.word	0x00001a35
    1c4c:	.word	0x20000a50

00001c50 <Servo::attach(int)>:
	servoIndex = INVALID_SERVO;
}

uint8_t Servo::attach(int pin)
{
	return attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
    1c50:	mov.w	r3, #2400	; 0x960
    1c54:	mov.w	r2, #544	; 0x220
    1c58:	b.w	1bd8 <Servo::attach(int, int, int)>

00001c5c <Servo::write(int)>:
	}
}

void Servo::write(int value)
{
	if (servoIndex >= MAX_SERVOS) return;
    1c5c:	ldrb	r3, [r0, #4]
    1c5e:	cmp	r3, #11
    1c60:	bhi.n	1cae <Servo::write(int)+0x52>
	if (value >= MIN_PULSE_WIDTH) {
    1c62:	cmp.w	r1, #544	; 0x220
    1c66:	blt.n	1c78 <Servo::write(int)+0x1c>
	servo_ticks[servoIndex] = map(value, 0, 180, min_ticks, max_ticks);
}

void Servo::writeMicroseconds(int value)
{
	value = usToTicks(value);
    1c68:	lsls	r1, r1, #4
	if (value < min_ticks) {
    1c6a:	ldrh	r2, [r0, #0]
    1c6c:	cmp	r1, r2
    1c6e:	bge.n	1cb0 <Servo::write(int)+0x54>
		value = min_ticks;
	} else if (value > max_ticks) {
		value = max_ticks;
	}
	if (servoIndex >= MAX_SERVOS) return;
	servo_ticks[servoIndex] = value;
    1c70:	ldr	r1, [pc, #96]	; (1cd4 <Servo::write(int)+0x78>)
    1c72:	strh.w	r2, [r1, r3, lsl #1]
    1c76:	bx	lr
    1c78:	bic.w	r1, r1, r1, asr #31
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    1c7c:	ldrh	r2, [r0, #2]
		timer.end();
	}
}

void Servo::write(int value)
{
    1c7e:	push	{r4}
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    1c80:	ldrh	r4, [r0, #0]
    1c82:	cmp	r1, #180	; 0xb4
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    1c84:	sub.w	r2, r2, r4
    1c88:	it	ge
    1c8a:	movge	r1, #180	; 0xb4
    1c8c:	cmp	r2, #179	; 0xb3
    1c8e:	ble.n	1cc0 <Servo::write(int)+0x64>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1c90:	mul.w	r1, r1, r2
    1c94:	ldr	r0, [pc, #64]	; (1cd8 <Servo::write(int)+0x7c>)
    1c96:	smull	r2, r0, r0, r1
    1c9a:	asrs	r2, r1, #31
    1c9c:	add	r1, r0
    1c9e:	rsb	r1, r2, r1, asr #7
    1ca2:	add	r4, r1
		value = 180;
	} else if (value < 0) {
		value = 0;
	}
	if (servoIndex >= MAX_SERVOS) return;
	servo_ticks[servoIndex] = map(value, 0, 180, min_ticks, max_ticks);
    1ca4:	ldr	r2, [pc, #44]	; (1cd4 <Servo::write(int)+0x78>)
    1ca6:	strh.w	r4, [r2, r3, lsl #1]
}
    1caa:	ldr.w	r4, [sp], #4
    1cae:	bx	lr
void Servo::writeMicroseconds(int value)
{
	value = usToTicks(value);
	if (value < min_ticks) {
		value = min_ticks;
	} else if (value > max_ticks) {
    1cb0:	ldrh	r2, [r0, #2]
    1cb2:	cmp	r2, r1
    1cb4:	it	ge
    1cb6:	movge	r2, r1
		value = max_ticks;
	}
	if (servoIndex >= MAX_SERVOS) return;
	servo_ticks[servoIndex] = value;
    1cb8:	ldr	r1, [pc, #24]	; (1cd4 <Servo::write(int)+0x78>)
    1cba:	strh.w	r2, [r1, r3, lsl #1]
    1cbe:	bx	lr
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    1cc0:	mla	r1, r2, r1, r1
    1cc4:	ldr	r0, [pc, #20]	; (1cdc <Servo::write(int)+0x80>)
    1cc6:	asrs	r2, r1, #31
    1cc8:	smull	r0, r1, r0, r1
    1ccc:	rsb	r1, r2, r1, asr #5
    1cd0:	add	r4, r1
    1cd2:	b.n	1ca4 <Servo::write(int)+0x48>
    1cd4:	.word	0x20001898
    1cd8:	.word	0xb60b60b7
    1cdc:	.word	0x2d4279a3

00001ce0 <_GLOBAL__sub_I__ZN5ServoC2Ev>:
static uint32_t servo_active_mask = 0;
static uint32_t servo_allocated_mask = 0;
static uint8_t servo_pin[MAX_SERVOS];
static uint16_t servo_ticks[MAX_SERVOS];

static IntervalTimer timer;
    1ce0:	ldr	r2, [pc, #8]	; (1cec <_GLOBAL__sub_I__ZN5ServoC2Ev+0xc>)
    1ce2:	ldr	r1, [pc, #12]	; (1cf0 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x10>)
    1ce4:	ldr	r0, [pc, #12]	; (1cf4 <_GLOBAL__sub_I__ZN5ServoC2Ev+0x14>)
    1ce6:	b.w	5678 <__aeabi_atexit>
    1cea:	nop
    1cec:	.word	0x20000a44
    1cf0:	.word	0x00001a29
    1cf4:	.word	0x20000a50

00001cf8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1cf8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1cfa:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1cfc:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1cfe:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1d00:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1d02:	beq.n	1d0c <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1d04:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1d08:	b.w	4334 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1d0c:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    1d0e:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1d12:	bx	r3

00001d14 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    1d14:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1d16:	movw	r5, #513	; 0x201
    1d1a:	ldr	r4, [r0, #0]
    1d1c:	str	r5, [r4, #16]

	while (count > 0) {
    1d1e:	cbz	r3, 1d68 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    1d20:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d22:	cbz	r1, 1d62 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    1d24:	ldrb	r5, [r1, #0]
    1d26:	adds	r1, #1
		count--; // how many bytes left to output.
    1d28:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d2a:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1d2c:	ldr	r5, [r4, #112]	; 0x70
    1d2e:	lsls	r5, r5, #30
    1d30:	bmi.n	1d40 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d32:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    1d34:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d36:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    1d38:	cbz	r2, 1d40 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    1d3a:	strb	r5, [r2, #0]
    1d3c:	adds	r2, #1
    1d3e:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    1d40:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    1d42:	lsls	r5, r5, #31
    1d44:	bpl.n	1d2c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    1d46:	cmp	r3, #0
    1d48:	bne.n	1d22 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    1d4a:	cbz	r6, 1d68 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1d4c:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1d4e:	ldr	r3, [r1, #112]	; 0x70
    1d50:	lsls	r3, r3, #30
    1d52:	bmi.n	1d4e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d54:	ldr	r3, [r1, #116]	; 0x74
    1d56:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    1d58:	cbz	r2, 1d5e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    1d5a:	strb	r3, [r2, #0]
    1d5c:	adds	r2, #1
			count_read--;
    1d5e:	subs	r6, #1
    1d60:	b.n	1d4a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d62:	ldrb.w	r5, [r0, #60]	; 0x3c
    1d66:	b.n	1d28 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    1d68:	pop	{r4, r5, r6}
    1d6a:	bx	lr

00001d6c <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1d6c:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    1d6e:	ldr	r4, [pc, #192]	; (1e30 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1d70:	ldr	r3, [pc, #192]	; (1e34 <_spi_dma_rxISR0()+0xc8>)
    1d72:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    1d74:	ldr	r5, [r4, #68]	; 0x44
    1d76:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    1d78:	ldr	r2, [r4, #64]	; 0x40
    1d7a:	strb	r1, [r3, #31]
    1d7c:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    1d7e:	strb	r1, [r3, #28]
    1d80:	ldrb	r1, [r0, #4]
    1d82:	strb	r1, [r3, #28]
    1d84:	cbz	r2, 1dc6 <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    1d86:	cmp.w	r2, #32768	; 0x8000
    1d8a:	bcs.n	1dbe <_spi_dma_rxISR0()+0x52>
    1d8c:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    1d8e:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1d90:	ldrh	r1, [r3, #30]
    1d92:	lsls	r6, r1, #16
    1d94:	bmi.n	1e0e <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    1d96:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1d98:	ldrh	r1, [r3, #30]
    1d9a:	uxth	r1, r1
    1d9c:	strh	r1, [r3, #22]
    1d9e:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1da0:	ldrh	r1, [r3, #30]
    1da2:	lsls	r1, r1, #16
    1da4:	bmi.n	1e00 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1da6:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    1da8:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    1daa:	ldrh	r2, [r3, #30]
    1dac:	uxth	r2, r2
    1dae:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    1db0:	str	r1, [r4, #64]	; 0x40
    1db2:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1db4:	ldr	r3, [pc, #124]	; (1e34 <_spi_dma_rxISR0()+0xc8>)
    1db6:	strb	r2, [r3, #27]
    1db8:	ldrb	r2, [r5, #4]
    1dba:	strb	r2, [r3, #27]
    1dbc:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    1dbe:	ldr	r3, [pc, #120]	; (1e38 <_spi_dma_rxISR0()+0xcc>)
    1dc0:	add	r3, r2
    1dc2:	str	r3, [r4, #64]	; 0x40
    1dc4:	b.n	1db2 <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1dc6:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1dc8:	movs	r5, #15
    1dca:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1dcc:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1dd0:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    1dd2:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1dd6:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1dd8:	movs	r6, #3
		_dma_event_responder->triggerEvent();
    1dda:	ldr	r5, [r1, #0]
    1ddc:	ldr	r1, [pc, #92]	; (1e3c <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    1dde:	str	r2, [r3, #28]
    1de0:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1de2:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    1de6:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1de8:	strb.w	r6, [r4, #61]	; 0x3d
    1dec:	bne.n	1e1e <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1dee:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1df0:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1df2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1df4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1df6:	beq.n	1e28 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1df8:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1dfc:	b.w	4334 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1e00:	ldrh	r1, [r3, #30]
    1e02:	ubfx	r2, r2, #0, #9
    1e06:	and.w	r1, r1, #65024	; 0xfe00
    1e0a:	orrs	r2, r1
    1e0c:	b.n	1da6 <_spi_dma_rxISR0()+0x3a>
    1e0e:	ldrh	r1, [r3, #30]
    1e10:	ubfx	r6, r2, #0, #9
    1e14:	and.w	r1, r1, #65024	; 0xfe00
    1e18:	orrs	r1, r6
    1e1a:	strh	r1, [r3, #30]
    1e1c:	b.n	1d98 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1e1e:	mov	r3, r5
    1e20:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e22:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1e26:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1e28:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e2a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1e2e:	bx	r3
    1e30:	.word	0x20000a5c
    1e34:	.word	0x400e8000
    1e38:	.word	0xffff8001
    1e3c:	.word	0x00001cf9

00001e40 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    1e40:	cbz	r3, 1e46 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    1e42:	b.w	1d14 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    1e46:	bx	lr

00001e48 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    1e48:	ldrb.w	r2, [r0, #59]	; 0x3b
    1e4c:	ldrb.w	r0, [r0, #58]	; 0x3a
	}
    1e50:	subs	r0, r2, r0
    1e52:	bx	lr

00001e54 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1e54:	ldrb.w	r3, [r0, #58]	; 0x3a
    1e58:	ldrb.w	r2, [r0, #59]	; 0x3b
    1e5c:	cmp	r2, r3
    1e5e:	bls.n	1e6c <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    1e60:	adds	r2, r3, #1
    1e62:	add	r3, r0
    1e64:	strb.w	r2, [r0, #58]	; 0x3a
    1e68:	ldrb	r0, [r3, #26]
    1e6a:	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1e6c:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    1e70:	bx	lr
    1e72:	nop

00001e74 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1e74:	ldrb.w	r3, [r0, #58]	; 0x3a
    1e78:	ldrb.w	r2, [r0, #59]	; 0x3b
    1e7c:	cmp	r2, r3
    1e7e:	bls.n	1e86 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    1e80:	add	r3, r0
    1e82:	ldrb	r0, [r3, #26]
    1e84:	bx	lr
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1e86:	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    1e8a:	bx	lr

00001e8c <TwoWire::flush()>:
	virtual void flush(void) {
    1e8c:	bx	lr
    1e8e:	nop

00001e90 <TwoWire::write(unsigned char)>:
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    1e90:	ldrh.w	r3, [r0, #96]	; 0x60
    1e94:	cbz	r3, 1ebc <TwoWire::write(unsigned char)+0x2c>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    1e96:	ldrb.w	r3, [r0, #95]	; 0x5f
    1e9a:	cmp	r3, #32
    1e9c:	bhi.n	1eb6 <TwoWire::write(unsigned char)+0x26>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    1e9e:	adds	r2, r0, r3
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
    1ea0:	push	{r4}
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    1ea2:	adds	r4, r3, #1
		return 1;
    1ea4:	movs	r3, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    1ea6:	strb.w	r4, [r0, #95]	; 0x5f
		return 1;
	}
	return 0;
}
    1eaa:	mov	r0, r3
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    1eac:	strb.w	r1, [r2, #61]	; 0x3d
		return 1;
	}
	return 0;
}
    1eb0:	ldr.w	r4, [sp], #4
    1eb4:	bx	lr
    1eb6:	movs	r2, #1
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    1eb8:	movs	r3, #0
    1eba:	strb	r2, [r0, #4]
		}
		txBuffer[txBufferLength++] = data;
		return 1;
	}
	return 0;
}
    1ebc:	mov	r0, r3
    1ebe:	bx	lr

00001ec0 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    1ec0:	push	{r3, r4, r5, lr}
    1ec2:	mov	r5, r0
	if (transmitting || slave_mode) {
    1ec4:	ldrh.w	r0, [r0, #96]	; 0x60
    1ec8:	cbz	r0, 1ef0 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    1eca:	ldrb.w	r3, [r5, #95]	; 0x5f
    1ece:	mov	r4, r2
    1ed0:	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    1ed4:	cmp	r4, r2
    1ed6:	bhi.n	1ef2 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    1ed8:	add.w	r0, r5, #61	; 0x3d
    1edc:	mov	r2, r4
    1ede:	add	r0, r3
    1ee0:	bl	249c <memcpy>
		txBufferLength += quantity;
    1ee4:	ldrb.w	r3, [r5, #95]	; 0x5f
    1ee8:	mov	r0, r4
    1eea:	add	r4, r3
    1eec:	strb.w	r4, [r5, #95]	; 0x5f
		return quantity;
	}
	return 0;
}
    1ef0:	pop	{r3, r4, r5, pc}
    1ef2:	mov	r4, r2
    1ef4:	movs	r2, #1
    1ef6:	strb	r2, [r5, #4]
    1ef8:	b.n	1ed8 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    1efa:	nop

00001efc <TwoWire::begin()>:
//#include "debug/printf.h"

#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
    1efc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    1f00:	ldr	r7, [pc, #188]	; (1fc0 <TwoWire::begin()+0xc4>)
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    1f02:	movs	r5, #0

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    1f04:	ldr	r2, [r0, #20]
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    1f06:	movs	r4, #1
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    1f08:	ldr	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    1f0a:	mov.w	lr, #2

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    1f0e:	ldr	r6, [r2, #0]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    1f10:	mov.w	r8, #180224	; 0x2c000
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    1f14:	bic.w	r1, r1, #16515072	; 0xfc0000
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    1f18:	ldr	r3, [r0, #16]
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    1f1a:	ldr.w	ip, [pc, #176]	; 1fcc <TwoWire::begin()+0xd0>
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    1f1e:	orr.w	r1, r1, #262144	; 0x40000
    1f22:	str	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    1f24:	ldr	r1, [r6, #0]
    1f26:	ldr	r7, [r2, #4]
    1f28:	orrs	r1, r7
    1f2a:	str	r1, [r6, #0]
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1f2c:	mov.w	r1, #65537	; 0x10001
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    1f30:	ldr	r6, [pc, #144]	; (1fc4 <TwoWire::begin()+0xc8>)
void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    1f32:	str.w	lr, [r3, #16]
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    1f36:	str	r5, [r3, #16]
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    1f38:	str.w	ip, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    1f3c:	str	r4, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    1f3e:	str	r6, [r3, #40]	; 0x28
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    1f40:	movw	r6, #63585	; 0xf861
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    1f44:	str.w	r8, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    1f48:	ldr	r7, [r3, #72]	; 0x48
    1f4a:	str	r7, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    1f4c:	str	r5, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1f4e:	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    1f50:	str	r4, [r3, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    1f52:	ldrb	r1, [r0, #24]
    1f54:	ldr	r3, [pc, #112]	; (1fc8 <TwoWire::begin()+0xcc>)
    1f56:	add.w	r1, r2, r1, lsl #4
    1f5a:	ldrb	r1, [r1, #8]
    1f5c:	add.w	r1, r3, r1, lsl #4
    1f60:	ldr	r1, [r1, #8]
    1f62:	str	r6, [r1, #0]
	*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    1f64:	ldrb	r1, [r0, #24]
    1f66:	add.w	r1, r2, r1, lsl #4
    1f6a:	ldrb	r4, [r1, #8]
    1f6c:	ldr	r5, [r1, #12]
    1f6e:	add.w	r1, r3, r4, lsl #4
    1f72:	ldr	r1, [r1, #4]
    1f74:	str	r5, [r1, #0]
    1f76:	ldrb	r1, [r0, #24]
    1f78:	add.w	r1, r2, r1, lsl #4
	if (hardware.sda_pins[sda_pin_index_].select_input_register) {
    1f7c:	ldr	r4, [r1, #16]
    1f7e:	cbz	r4, 1f84 <TwoWire::begin()+0x88>
		*(hardware.sda_pins[sda_pin_index_].select_input_register) =  hardware.sda_pins[sda_pin_index_].select_val;
    1f80:	ldr	r1, [r1, #20]
    1f82:	str	r1, [r4, #0]
	}

	// setup SCL register
	*(portControlRegister(hardware.scl_pins[scl_pin_index_].pin)) = PINCONFIG;
    1f84:	ldrb	r1, [r0, #25]
    1f86:	movw	r4, #63585	; 0xf861
    1f8a:	add.w	r1, r2, r1, lsl #4
    1f8e:	ldrb.w	r1, [r1, #40]	; 0x28
    1f92:	add.w	r1, r3, r1, lsl #4
    1f96:	ldr	r1, [r1, #8]
    1f98:	str	r4, [r1, #0]
	*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    1f9a:	ldrb	r1, [r0, #25]
    1f9c:	add.w	r1, r2, r1, lsl #4
    1fa0:	ldrb.w	r4, [r1, #40]	; 0x28
    1fa4:	ldr	r1, [r1, #44]	; 0x2c
    1fa6:	add.w	r3, r3, r4, lsl #4
    1faa:	ldr	r3, [r3, #4]
    1fac:	str	r1, [r3, #0]
    1fae:	ldrb	r3, [r0, #25]
    1fb0:	add.w	r2, r2, r3, lsl #4
	if (hardware.scl_pins[scl_pin_index_].select_input_register) {
    1fb4:	ldr	r3, [r2, #48]	; 0x30
    1fb6:	cbz	r3, 1fbc <TwoWire::begin()+0xc0>
		*(hardware.scl_pins[scl_pin_index_].select_input_register) =  hardware.scl_pins[scl_pin_index_].select_val;
    1fb8:	ldr	r2, [r2, #52]	; 0x34
    1fba:	str	r2, [r3, #0]
    1fbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fc0:	.word	0x400fc000
    1fc4:	.word	0x05050bb8
    1fc8:	.word	0x2000014c
    1fcc:	.word	0x1928373b

00001fd0 <TwoWire::setSDA(unsigned char)>:
void TwoWire::end()
{
}

void TwoWire::setSDA(uint8_t pin) {
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
    1fd0:	ldr	r3, [r0, #20]
    1fd2:	ldrb	r2, [r0, #24]
    1fd4:	add.w	r2, r3, r2, lsl #4

void TwoWire::end()
{
}

void TwoWire::setSDA(uint8_t pin) {
    1fd8:	push	{r4, r5, r6}
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
    1fda:	ldrb	r4, [r2, #8]
    1fdc:	cmp	r4, r1
    1fde:	beq.n	1ff4 <TwoWire::setSDA(unsigned char)+0x24>
	uint32_t newindex=0;
	while (1) {
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
    1fe0:	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
    1fe2:	cmp	r2, #255	; 0xff
    1fe4:	beq.n	1ff4 <TwoWire::setSDA(unsigned char)+0x24>
		if (sda_pin == pin) break;
    1fe6:	cmp	r2, r1
    1fe8:	beq.n	2040 <TwoWire::setSDA(unsigned char)+0x70>

void TwoWire::setSDA(uint8_t pin) {
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
	uint32_t newindex=0;
	while (1) {
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
    1fea:	ldrb	r2, [r3, #24]
		if (sda_pin == 255) return;
		if (sda_pin == pin) break;
    1fec:	cmp	r2, r1
    1fee:	bne.n	1ff4 <TwoWire::setSDA(unsigned char)+0x24>
    1ff0:	cmp	r2, #255	; 0xff
    1ff2:	bne.n	1ff8 <TwoWire::setSDA(unsigned char)+0x28>
		if (hardware.sda_pins[newindex].select_input_register) {
			*(hardware.sda_pins[newindex].select_input_register) =  hardware.sda_pins[newindex].select_val;
		}
	}
	sda_pin_index_ = newindex;
}
    1ff4:	pop	{r4, r5, r6}
    1ff6:	bx	lr
    1ff8:	movs	r5, #1
	uint32_t newindex=0;
	while (1) {
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
		if (sda_pin == 255) return;
		if (sda_pin == pin) break;
		if (++newindex >= sizeof(hardware.sda_pins)) return;
    1ffa:	mov	r6, r5
	}
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
    1ffc:	ldmia.w	r3, {r1, r2}
    2000:	ldr	r1, [r1, #0]
    2002:	tst	r1, r2
    2004:	beq.n	203a <TwoWire::setSDA(unsigned char)+0x6a>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;	// hard to know what to go back to?
    2006:	ldr	r2, [pc, #64]	; (2048 <TwoWire::setSDA(unsigned char)+0x78>)

		// setup new one...
		*(portControlRegister(hardware.sda_pins[newindex].pin)) |= IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
    2008:	add.w	r3, r3, r6, lsl #4
		if (sda_pin == 255) return;
		if (sda_pin == pin) break;
		if (++newindex >= sizeof(hardware.sda_pins)) return;
	}
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;	// hard to know what to go back to?
    200c:	movs	r6, #5
    200e:	add.w	r4, r2, r4, lsl #4
    2012:	ldr	r1, [r4, #4]
    2014:	str	r6, [r1, #0]

		// setup new one...
		*(portControlRegister(hardware.sda_pins[newindex].pin)) |= IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
    2016:	ldrb	r1, [r3, #8]
    2018:	add.w	r1, r2, r1, lsl #4
    201c:	ldr	r4, [r1, #8]
    201e:	ldr	r1, [r4, #0]
    2020:	orr.w	r1, r1, #61440	; 0xf000
    2024:	str	r1, [r4, #0]
		*(portConfigRegister(hardware.sda_pins[newindex].pin)) = hardware.sda_pins[newindex].mux_val;
    2026:	ldrb	r4, [r3, #8]
    2028:	ldr	r1, [r3, #12]
    202a:	add.w	r2, r2, r4, lsl #4
    202e:	ldr	r2, [r2, #4]
    2030:	str	r1, [r2, #0]
		if (hardware.sda_pins[newindex].select_input_register) {
    2032:	ldr	r2, [r3, #16]
    2034:	cbz	r2, 203a <TwoWire::setSDA(unsigned char)+0x6a>
			*(hardware.sda_pins[newindex].select_input_register) =  hardware.sda_pins[newindex].select_val;
    2036:	ldr	r3, [r3, #20]
    2038:	str	r3, [r2, #0]
		}
	}
	sda_pin_index_ = newindex;
    203a:	strb	r5, [r0, #24]
}
    203c:	pop	{r4, r5, r6}
    203e:	bx	lr
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
	uint32_t newindex=0;
	while (1) {
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
		if (sda_pin == 255) return;
		if (sda_pin == pin) break;
    2040:	movs	r5, #0
    2042:	mov	r6, r5
    2044:	b.n	1ffc <TwoWire::setSDA(unsigned char)+0x2c>
    2046:	nop
    2048:	.word	0x2000014c

0000204c <TwoWire::setSCL(unsigned char)>:
	}
	sda_pin_index_ = newindex;
}

void TwoWire::setSCL(uint8_t pin) {
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
    204c:	ldr	r3, [r0, #20]
    204e:	ldrb	r2, [r0, #25]
    2050:	add.w	r2, r3, r2, lsl #4
		}
	}
	sda_pin_index_ = newindex;
}

void TwoWire::setSCL(uint8_t pin) {
    2054:	push	{r4, r5, r6}
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
    2056:	ldrb.w	r4, [r2, #40]	; 0x28
    205a:	cmp	r4, r1
    205c:	beq.n	2076 <TwoWire::setSCL(unsigned char)+0x2a>
	uint32_t newindex=0;
	while (1) {
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
    205e:	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
    2062:	cmp	r2, #255	; 0xff
    2064:	beq.n	2076 <TwoWire::setSCL(unsigned char)+0x2a>
		if (scl_pin == pin) break;
    2066:	cmp	r2, r1
    2068:	beq.n	20c6 <TwoWire::setSCL(unsigned char)+0x7a>

void TwoWire::setSCL(uint8_t pin) {
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
	uint32_t newindex=0;
	while (1) {
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
    206a:	ldrb.w	r2, [r3, #56]	; 0x38
		if (scl_pin == 255) return;
		if (scl_pin == pin) break;
    206e:	cmp	r2, r1
    2070:	bne.n	2076 <TwoWire::setSCL(unsigned char)+0x2a>
    2072:	cmp	r2, #255	; 0xff
    2074:	bne.n	207a <TwoWire::setSCL(unsigned char)+0x2e>
		if (hardware.scl_pins[newindex].select_input_register) {
			*(hardware.scl_pins[newindex].select_input_register) =  hardware.scl_pins[newindex].select_val;
		}
	}
	scl_pin_index_ = newindex;
}
    2076:	pop	{r4, r5, r6}
    2078:	bx	lr
    207a:	movs	r5, #1
	uint32_t newindex=0;
	while (1) {
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
		if (scl_pin == 255) return;
		if (scl_pin == pin) break;
		if (++newindex >= sizeof(hardware.scl_pins)) return;
    207c:	mov	r6, r5
	}
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
    207e:	ldmia.w	r3, {r1, r2}
    2082:	ldr	r1, [r1, #0]
    2084:	tst	r1, r2
    2086:	beq.n	20c0 <TwoWire::setSCL(unsigned char)+0x74>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;	// hard to know what to go back to?
    2088:	ldr	r2, [pc, #64]	; (20cc <TwoWire::setSCL(unsigned char)+0x80>)

		// setup new one...
		*(portControlRegister(hardware.scl_pins[newindex].pin)) |= IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
    208a:	add.w	r3, r3, r6, lsl #4
		if (scl_pin == 255) return;
		if (scl_pin == pin) break;
		if (++newindex >= sizeof(hardware.scl_pins)) return;
	}
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;	// hard to know what to go back to?
    208e:	movs	r6, #5
    2090:	add.w	r4, r2, r4, lsl #4
    2094:	ldr	r1, [r4, #4]
    2096:	str	r6, [r1, #0]

		// setup new one...
		*(portControlRegister(hardware.scl_pins[newindex].pin)) |= IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
    2098:	ldrb.w	r1, [r3, #40]	; 0x28
    209c:	add.w	r1, r2, r1, lsl #4
    20a0:	ldr	r4, [r1, #8]
    20a2:	ldr	r1, [r4, #0]
    20a4:	orr.w	r1, r1, #61440	; 0xf000
    20a8:	str	r1, [r4, #0]
		*(portConfigRegister(hardware.scl_pins[newindex].pin)) = hardware.scl_pins[newindex].mux_val;
    20aa:	ldrb.w	r4, [r3, #40]	; 0x28
    20ae:	ldr	r1, [r3, #44]	; 0x2c
    20b0:	add.w	r2, r2, r4, lsl #4
    20b4:	ldr	r2, [r2, #4]
    20b6:	str	r1, [r2, #0]
		if (hardware.scl_pins[newindex].select_input_register) {
    20b8:	ldr	r2, [r3, #48]	; 0x30
    20ba:	cbz	r2, 20c0 <TwoWire::setSCL(unsigned char)+0x74>
			*(hardware.scl_pins[newindex].select_input_register) =  hardware.scl_pins[newindex].select_val;
    20bc:	ldr	r3, [r3, #52]	; 0x34
    20be:	str	r3, [r2, #0]
		}
	}
	scl_pin_index_ = newindex;
    20c0:	strb	r5, [r0, #25]
}
    20c2:	pop	{r4, r5, r6}
    20c4:	bx	lr
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
	uint32_t newindex=0;
	while (1) {
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
		if (scl_pin == 255) return;
		if (scl_pin == pin) break;
    20c6:	movs	r5, #0
    20c8:	mov	r6, r5
    20ca:	b.n	207e <TwoWire::setSCL(unsigned char)+0x32>
    20cc:	.word	0x2000014c

000020d0 <TwoWire::force_clock()>:
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    20d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20d4:	mov	fp, r0
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    20d6:	ldr	r0, [pc, #256]	; (21d8 <TwoWire::force_clock()+0x108>)
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    20d8:	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    20da:	movs	r5, #21
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    20dc:	ldr.w	sl, [fp, #20]
    20e0:	ldrb.w	r6, [fp, #24]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    20e4:	ldrb.w	r3, [fp, #25]
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    20e8:	add.w	r6, sl, r6, lsl #4
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    20ec:	ldr	r1, [pc, #236]	; (21dc <TwoWire::force_clock()+0x10c>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    20ee:	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    20f2:	ldr.w	lr, [pc, #236]	; 21e0 <TwoWire::force_clock()+0x110>
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    20f6:	ldrb	r6, [r6, #8]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    20f8:	mov	r4, r1
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    20fa:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    20fe:	lsls	r6, r6, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2100:	ldr.w	r9, [pc, #224]	; 21e4 <TwoWire::force_clock()+0x114>
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2104:	lsls	r3, r3, #4
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2106:	adds	r7, r0, r6
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
    2108:	ldr.w	r8, [r0, r6]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    210c:	add.w	ip, r0, r3
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
    2110:	ldr	r6, [r0, r3]
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    2112:	ldr	r0, [r7, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    2114:	ldr	r3, [r7, #4]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    2116:	ldr.w	r7, [ip, #12]
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    211a:	str	r3, [sp, #0]
    211c:	str	r5, [r3, #0]
	*portSetRegister(sda_pin) = sda_mask;
    211e:	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    2122:	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2126:	ldr.w	r2, [ip, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    212a:	orrs	r3, r0
	*portConfigRegister(scl_pin) = 5 | 0x10;
    212c:	str	r2, [sp, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    212e:	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    2132:	str	r5, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    2134:	str.w	r7, [r6, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    2138:	ldr	r3, [r6, #4]
    213a:	orrs	r3, r7
    213c:	str	r3, [r6, #4]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    213e:	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2140:	ldr.w	r3, [lr]
    2144:	umull	r3, r2, r9, r3
    2148:	lsrs	r2, r2, #18
    214a:	add.w	r2, r2, r2, lsl #2
    214e:	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2150:	ldr	r3, [r4, #0]
    2152:	subs	r3, r3, r1
    2154:	cmp	r2, r3
    2156:	bhi.n	2150 <TwoWire::force_clock()+0x80>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2158:	ldr	r2, [pc, #128]	; (21dc <TwoWire::force_clock()+0x10c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    215a:	movs	r5, #9

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    215c:	ldr.w	ip, [pc, #132]	; 21e4 <TwoWire::force_clock()+0x114>
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2160:	mov	r9, r2
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
    2162:	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    2166:	tst	r0, r3
    2168:	beq.n	2170 <TwoWire::force_clock()+0xa0>
    216a:	ldr	r3, [r6, #8]
    216c:	tst	r7, r3
    216e:	bne.n	21d4 <TwoWire::force_clock()+0x104>
			// success, both pins are high
			ret = true;
			break;
		}
		*portClearRegister(scl_pin) = scl_mask;
    2170:	str.w	r7, [r6, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2174:	ldr	r4, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2176:	ldr.w	r1, [lr]
    217a:	umull	r3, r1, ip, r1
    217e:	lsrs	r1, r1, #18
    2180:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2184:	ldr	r3, [r2, #0]
    2186:	subs	r3, r3, r4
    2188:	cmp	r1, r3
    218a:	bhi.n	2184 <TwoWire::force_clock()+0xb4>
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
    218c:	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2190:	ldr.w	r4, [r9]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2194:	ldr.w	r1, [lr]
    2198:	umull	r3, r1, ip, r1
    219c:	lsrs	r1, r1, #18
    219e:	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    21a2:	ldr	r3, [r2, #0]
    21a4:	subs	r3, r3, r4
    21a6:	cmp	r1, r3
    21a8:	bhi.n	21a2 <TwoWire::force_clock()+0xd2>
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
	*portModeRegister(scl_pin) |= scl_mask;
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
    21aa:	subs	r5, #1
    21ac:	bne.n	2162 <TwoWire::force_clock()+0x92>
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
	bool ret = false;
    21ae:	mov	r0, r5
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
		delayMicroseconds(5);
	}
	// return control of pins to I2C
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    21b0:	ldrb.w	r3, [fp, #24]
    21b4:	ldr	r2, [sp, #0]
    21b6:	add.w	r3, sl, r3, lsl #4
    21ba:	ldr	r3, [r3, #12]
    21bc:	str	r3, [r2, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    21be:	ldrb.w	r3, [fp, #25]
    21c2:	ldr	r2, [sp, #4]
    21c4:	add.w	sl, sl, r3, lsl #4
    21c8:	ldr.w	r3, [sl, #44]	; 0x2c
    21cc:	str	r3, [r2, #0]
	return ret;
}
    21ce:	add	sp, #12
    21d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
		  && (*portInputRegister(scl_pin) & scl_mask)) {
			// success, both pins are high
			ret = true;
    21d4:	movs	r0, #1
    21d6:	b.n	21b0 <TwoWire::force_clock()+0xe0>
    21d8:	.word	0x2000014c
    21dc:	.word	0xe0001004
    21e0:	.word	0x20000b20
    21e4:	.word	0x431bde83

000021e8 <TwoWire::wait_idle()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    21e8:	ldr	r1, [pc, #52]	; (2220 <TwoWire::wait_idle()+0x38>)
    21ea:	ldr	r2, [r0, #16]
//   01   EPF = End Packet Flag
//      2 RDF = Receive Data Flag
//      1 TDF = Transmit Data Flag

bool TwoWire::wait_idle()
{
    21ec:	push	{r4, lr}
    21ee:	ldr	r4, [r1, #0]
    21f0:	b.n	21fe <TwoWire::wait_idle()+0x16>
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    21f2:	lsls	r3, r3, #7
    21f4:	bmi.n	2206 <TwoWire::wait_idle()+0x1e>
    21f6:	ldr	r3, [r1, #0]
		if (timeout > 16) {
    21f8:	subs	r3, r3, r4
    21fa:	cmp	r3, #16
    21fc:	bhi.n	2210 <TwoWire::wait_idle()+0x28>

bool TwoWire::wait_idle()
{
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
    21fe:	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    2200:	tst.w	r3, #33554432	; 0x2000000
    2204:	bne.n	21f2 <TwoWire::wait_idle()+0xa>
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    2206:	mov.w	r3, #32512	; 0x7f00
	return true;
    220a:	movs	r0, #1
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    220c:	str	r3, [r2, #20]
	return true;
}
    220e:	pop	{r4, pc}
    2210:	mov	r4, r0
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
		if (timeout > 16) {
			//Serial.printf("timeout waiting for idle, MSR = %x\n", status);
			if (force_clock()) break;
    2212:	bl	20d0 <TwoWire::force_clock()>
    2216:	cmp	r0, #0
    2218:	beq.n	220e <TwoWire::wait_idle()+0x26>
    221a:	ldr	r2, [r4, #16]
    221c:	b.n	2206 <TwoWire::wait_idle()+0x1e>
    221e:	nop
    2220:	.word	0x20001ae4

00002224 <TwoWire::endTransmission(unsigned char)>:
	return true;
}


uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    2224:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    2228:	ldrb.w	sl, [r0, #95]	; 0x5f
	if (!tx_len) return 4; // no address for transmit
    222c:	cmp.w	sl, #0
    2230:	bne.n	2238 <TwoWire::endTransmission(unsigned char)+0x14>
    2232:	movs	r0, #4
    2234:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2238:	mov	r5, r0
    223a:	mov	r6, r1
	if (!wait_idle()) return 4;
    223c:	bl	21e8 <TwoWire::wait_idle()>
    2240:	cmp	r0, #0
    2242:	beq.n	2232 <TwoWire::endTransmission(unsigned char)+0xe>
    2244:	ldr	r7, [pc, #184]	; (2300 <TwoWire::endTransmission(unsigned char)+0xdc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    2246:	movs	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2248:	mov.w	r9, #512	; 0x200
    224c:	ldr.w	r8, [r7]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    2250:	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    2252:	ldr	r1, [r5, #16]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    2254:	bhi.n	228c <TwoWire::endTransmission(unsigned char)+0x68>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    2256:	ldr	r3, [r1, #92]	; 0x5c
    2258:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    225c:	cmp	r3, #3
    225e:	bls.n	2274 <TwoWire::endTransmission(unsigned char)+0x50>
    2260:	b.n	228c <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    2262:	ldrb.w	r2, [r5, #61]	; 0x3d
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    2266:	adds	r3, #1
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
    2268:	movs	r4, #1
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    226a:	orr.w	r2, r2, #1024	; 0x400
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    226e:	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    2270:	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    2272:	beq.n	228c <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2274:	adds	r2, r5, r4
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
    2276:	cmp	r4, #0
    2278:	beq.n	2262 <TwoWire::endTransmission(unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
    227a:	cmp	sl, r4
    227c:	bls.n	22ce <TwoWire::endTransmission(unsigned char)+0xaa>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    227e:	adds	r3, #1
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2280:	ldrb.w	r2, [r2, #61]	; 0x3d
    2284:	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    2286:	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    2288:	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    228a:	bne.n	2274 <TwoWire::endTransmission(unsigned char)+0x50>
				}
				fifo_used++;
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
    228c:	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    228e:	lsls	r0, r3, #20
    2290:	bmi.n	22d8 <TwoWire::endTransmission(unsigned char)+0xb4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
    2292:	lsls	r2, r3, #21
    2294:	bmi.n	22e6 <TwoWire::endTransmission(unsigned char)+0xc2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    2296:	lsls	r0, r3, #18
    2298:	bmi.n	22a4 <TwoWire::endTransmission(unsigned char)+0x80>
    229a:	ldr	r2, [r7, #0]
    229c:	rsb	r2, r8, r2
    22a0:	cmp	r2, #50	; 0x32
    22a2:	bls.n	22b8 <TwoWire::endTransmission(unsigned char)+0x94>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    22a4:	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    22a6:	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    22aa:	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    22ac:	orr.w	r3, r3, #768	; 0x300
    22b0:	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    22b2:	str	r2, [r1, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    22b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
    22b8:	cmp	r4, sl
    22ba:	bls.n	22c8 <TwoWire::endTransmission(unsigned char)+0xa4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    22bc:	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    22be:	lsls	r2, r2, #29
    22c0:	bne.n	22c8 <TwoWire::endTransmission(unsigned char)+0xa4>
    22c2:	lsls	r3, r3, #22
    22c4:	bmi.n	22fa <TwoWire::endTransmission(unsigned char)+0xd6>
    22c6:	cbz	r6, 22fa <TwoWire::endTransmission(unsigned char)+0xd6>
				return 0;
			}
		}
		yield();
    22c8:	bl	4244 <yield>
	uint32_t tx_len = txBufferLength;
	if (!tx_len) return 4; // no address for transmit
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
    22cc:	b.n	2250 <TwoWire::endTransmission(unsigned char)+0x2c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    22ce:	cbz	r6, 22d4 <TwoWire::endTransmission(unsigned char)+0xb0>
    22d0:	str.w	r9, [r1, #96]	; 0x60
					tx_index++;
    22d4:	adds	r4, #1
					break;
    22d6:	b.n	228c <TwoWire::endTransmission(unsigned char)+0x68>
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    22d8:	ldr	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    22da:	movs	r0, #4
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    22dc:	orr.w	r3, r3, #768	; 0x300
    22e0:	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    22e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    22e6:	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    22e8:	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    22ec:	movs	r0, #2
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    22ee:	orr.w	r3, r3, #768	; 0x300
    22f2:	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    22f4:	str	r2, [r1, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    22f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
			uint32_t tx_fifo = port->MFSR & 0x07;
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
				return 0;
    22fa:	movs	r0, #0
    22fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2300:	.word	0x20001ae4

00002304 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
		yield();
	}
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    2304:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2308:	mov	r4, r1
    230a:	mov	r5, r2
    230c:	mov	r8, r3
    230e:	mov	r9, r0
	if (!wait_idle()) return 4;
    2310:	bl	21e8 <TwoWire::wait_idle()>
    2314:	cbnz	r0, 231c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x18>
    2316:	movs	r0, #4
    2318:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
    231c:	movs	r2, #0
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
    231e:	lsls	r3, r4, #1
	if (length < 1) length = 1;
    2320:	cmp	r5, #0
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2322:	movw	sl, #1025	; 0x401
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    2326:	mov	r4, r2
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2328:	uxtb	r3, r3
    232a:	ldr	r6, [pc, #244]	; (2420 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>)

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
    232c:	it	eq
    232e:	moveq	r5, #1
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    2330:	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    2332:	orr.w	sl, r3, sl
    2336:	ldr.w	fp, [r6]
{
	if (!wait_idle()) return 4;
	address = (address & 0x7F) << 1;
	if (length < 1) length = 1;
	if (length > 255) length = 255;
	rxBufferIndex = 0;
    233a:	strb.w	r2, [r9, #58]	; 0x3a
	rxBufferLength = 0;
    233e:	strb.w	r2, [r9, #59]	; 0x3b
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    2342:	bls.n	23d6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd2>
    2344:	ldr.w	r3, [r9, #16]
				tx_state++;
				tx_fifo--;
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
    2348:	ldrb.w	r2, [r9, #59]	; 0x3b
    234c:	cmp	r2, #31
    234e:	bhi.n	2376 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    2350:	ldr	r1, [r3, #92]	; 0x5c
    2352:	ubfx	r1, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2356:	cbnz	r1, 235e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5a>
    2358:	b.n	2376 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    235a:	cmp	r2, #32
    235c:	beq.n	2376 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
				rxBuffer[rxBufferLength++] = port->MRDR;
    235e:	add.w	lr, r2, #1
    2362:	add.w	r0, r9, r2
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2366:	subs	r1, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    2368:	uxtb.w	r2, lr
    236c:	strb.w	r2, [r9, #59]	; 0x3b
    2370:	ldr	r7, [r3, #112]	; 0x70
    2372:	strb	r7, [r0, #26]
			}
		}
		// receive stuff
		if (rxBufferLength < sizeof(rxBuffer)) {
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    2374:	bne.n	235a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
				rxBuffer[rxBufferLength++] = port->MRDR;
				rx_fifo--;
			}
		}
		// monitor status, check for error conditions
		uint32_t status = port->MSR; // pg 2884 & 2891
    2376:	ldr	r2, [r3, #20]
		if (status & LPI2C_MSR_ALF) {
    2378:	lsls	r0, r2, #20
    237a:	bmi.n	2416 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    237c:	tst.w	r2, #9216	; 0x2400
    2380:	bne.n	238c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    2382:	ldr	r1, [r6, #0]
    2384:	rsb	r1, fp, r1
    2388:	cmp	r1, #50	; 0x32
    238a:	bls.n	23b2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    238c:	ldr	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    238e:	mov.w	r1, #512	; 0x200
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			break;
		}
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2392:	orr.w	r2, r2, #768	; 0x300
    2396:	str	r2, [r3, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    2398:	str	r1, [r3, #96]	; 0x60
				break;
			}
		}
		yield();
	}
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    239a:	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    239c:	tst.w	r2, #458752	; 0x70000
    23a0:	beq.n	23aa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
    23a2:	ldr	r2, [r3, #16]
    23a4:	orr.w	r2, r2, #512	; 0x200
    23a8:	str	r2, [r3, #16]
	return rxBufferLength;
    23aa:	ldrb.w	r0, [r9, #59]	; 0x3b
    23ae:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
			break;
		}
		// are we done yet?
		if (rxBufferLength >= length && tx_state >= 3) {
    23b2:	ldrb.w	r1, [r9, #59]	; 0x3b
    23b6:	cmp	r1, r5
    23b8:	bcc.n	23ce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    23ba:	cmp	r4, #2
    23bc:	bls.n	23ce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
			uint32_t tx_fifo = port->MFSR & 0x07;
    23be:	ldr	r1, [r3, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    23c0:	lsls	r1, r1, #29
    23c2:	bne.n	23ce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xca>
    23c4:	lsls	r2, r2, #22
    23c6:	bmi.n	239a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    23c8:	cmp.w	r8, #0
    23cc:	beq.n	239a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
				break;
			}
		}
		yield();
    23ce:	bl	4244 <yield>
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
    23d2:	cmp	r4, #2
    23d4:	bhi.n	2344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    23d6:	ldr.w	r2, [r9, #16]
    23da:	ldr	r3, [r2, #92]	; 0x5c
    23dc:	and.w	r3, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    23e0:	cmp	r3, #3
    23e2:	bhi.n	2400 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfc>
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    23e4:	subs	r1, r5, #1
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    23e6:	mov.w	r0, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    23ea:	orr.w	r1, r1, #256	; 0x100
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
    23ee:	cbnz	r4, 2404 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x100>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    23f0:	str.w	sl, [r2, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
				}
				tx_state++;
				tx_fifo--;
    23f4:	subs	r3, #1
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
				}
				tx_state++;
    23f6:	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
    23f8:	cmp	r3, #3
    23fa:	bhi.n	2400 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfc>
    23fc:	cmp	r4, #2
    23fe:	bls.n	23ee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
    2400:	mov	r3, r2
    2402:	b.n	2348 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
    2404:	cmp	r4, #1
    2406:	beq.n	2412 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    2408:	cmp.w	r8, #0
    240c:	beq.n	23f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    240e:	str	r0, [r2, #96]	; 0x60
    2410:	b.n	23f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    2412:	str	r1, [r2, #96]	; 0x60
    2414:	b.n	23f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			}
		}
		// monitor status, check for error conditions
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    2416:	ldr	r2, [r3, #16]
    2418:	orr.w	r2, r2, #768	; 0x300
    241c:	str	r2, [r3, #16]
    241e:	b.n	239a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
    2420:	.word	0x20001ae4

00002424 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    2424:	ldr	r3, [r0, #16]
    2426:	movs	r2, #0
	if (frequency < 400000) {
    2428:	ldr	r0, [pc, #76]	; (2478 <TwoWire::setClock(unsigned long)+0x54>)
    242a:	cmp	r1, r0
// Timeout if a device stretches SCL this long, in microseconds
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
    242c:	push	{r4}
	port->MCR = 0;
    242e:	str	r2, [r3, #16]
	if (frequency < 400000) {
    2430:	bls.n	2464 <TwoWire::setClock(unsigned long)+0x40>
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
	} else if (frequency < 1000000) {
    2432:	ldr	r0, [pc, #72]	; (247c <TwoWire::setClock(unsigned long)+0x58>)
    2434:	cmp	r1, r0
    2436:	bls.n	245e <TwoWire::setClock(unsigned long)+0x3a>
			LPI2C_MCFGR2_BUSIDLE(3600); // idle timeout 150 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	} else {
		// 1 MHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
    2438:	ldr	r4, [pc, #68]	; (2480 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
    243a:	ldr	r0, [pc, #72]	; (2484 <TwoWire::setClock(unsigned long)+0x60>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    243c:	ldr	r1, [pc, #72]	; (2488 <TwoWire::setClock(unsigned long)+0x64>)
			LPI2C_MCFGR2_BUSIDLE(3600); // idle timeout 150 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	} else {
		// 1 MHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
    243e:	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    2440:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
    2442:	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    2444:	str	r1, [r3, #44]	; 0x2c
	}
	port->MCCR1 = port->MCCR0;
    2446:	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    2448:	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    244a:	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    244e:	movs	r2, #1
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    2450:	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    2452:	str	r0, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    2454:	ldr.w	r4, [sp], #4
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    2458:	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    245a:	str	r2, [r3, #16]
}
    245c:	bx	lr
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
	} else if (frequency < 1000000) {
		// 400 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
			LPI2C_MCCR0_DATAVD(12) | LPI2C_MCCR0_SETHOLD(18);
    245e:	ldr	r4, [pc, #44]	; (248c <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
			LPI2C_MCFGR2_BUSIDLE(3600); // idle timeout 150 us
    2460:	ldr	r0, [pc, #44]	; (2490 <TwoWire::setClock(unsigned long)+0x6c>)
    2462:	b.n	243c <TwoWire::setClock(unsigned long)+0x18>
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    2464:	ldr	r4, [pc, #44]	; (2494 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    2466:	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    2468:	ldr	r1, [pc, #44]	; (2498 <TwoWire::setClock(unsigned long)+0x74>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    246a:	mov.w	r2, #180224	; 0x2c000
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    246e:	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    2470:	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    2472:	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    2474:	str	r2, [r3, #44]	; 0x2c
    2476:	b.n	2446 <TwoWire::setClock(unsigned long)+0x22>
    2478:	.word	0x00061a7f
    247c:	.word	0x000f423f
    2480:	.word	0x0407090a
    2484:	.word	0x01010960
    2488:	.word	0x00057f00
    248c:	.word	0x0c121a1c
    2490:	.word	0x02020e10
    2494:	.word	0x1928373b
    2498:	.word	0x05050bb8

0000249c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    249c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    249e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    24a2:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    24a6:	bne.n	2584 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    24a8:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    24aa:	bcc.n	2530 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    24ac:	ldr.w	r3, [r1], #4
    24b0:	str.w	r3, [r0], #4
    24b4:	ldr.w	r3, [r1], #4
    24b8:	str.w	r3, [r0], #4
    24bc:	ldr.w	r3, [r1], #4
    24c0:	str.w	r3, [r0], #4
    24c4:	ldr.w	r3, [r1], #4
    24c8:	str.w	r3, [r0], #4
    24cc:	ldr.w	r3, [r1], #4
    24d0:	str.w	r3, [r0], #4
    24d4:	ldr.w	r3, [r1], #4
    24d8:	str.w	r3, [r0], #4
    24dc:	ldr.w	r3, [r1], #4
    24e0:	str.w	r3, [r0], #4
    24e4:	ldr.w	r3, [r1], #4
    24e8:	str.w	r3, [r0], #4
    24ec:	ldr.w	r3, [r1], #4
    24f0:	str.w	r3, [r0], #4
    24f4:	ldr.w	r3, [r1], #4
    24f8:	str.w	r3, [r0], #4
    24fc:	ldr.w	r3, [r1], #4
    2500:	str.w	r3, [r0], #4
    2504:	ldr.w	r3, [r1], #4
    2508:	str.w	r3, [r0], #4
    250c:	ldr.w	r3, [r1], #4
    2510:	str.w	r3, [r0], #4
    2514:	ldr.w	r3, [r1], #4
    2518:	str.w	r3, [r0], #4
    251c:	ldr.w	r3, [r1], #4
    2520:	str.w	r3, [r0], #4
    2524:	ldr.w	r3, [r1], #4
    2528:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    252c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    252e:	bcs.n	24ac <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2530:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2532:	bcc.n	2558 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2534:	ldr.w	r3, [r1], #4
    2538:	str.w	r3, [r0], #4
    253c:	ldr.w	r3, [r1], #4
    2540:	str.w	r3, [r0], #4
    2544:	ldr.w	r3, [r1], #4
    2548:	str.w	r3, [r0], #4
    254c:	ldr.w	r3, [r1], #4
    2550:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2554:	subs	r2, #16
	bhs	.Lmid_block_loop
    2556:	bcs.n	2534 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2558:	adds	r2, #12
	blo	.Lcopy_less_than_4
    255a:	bcc.n	2568 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    255c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2560:	str.w	r3, [r0], #4
	subs	r2, #4
    2564:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2566:	bcs.n	255c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2568:	adds	r2, #4
	beq	.Ldone
    256a:	beq.n	257e <memcpy+0xe2>

	lsls	r2, r2, #31
    256c:	lsls	r2, r2, #31
	itt ne
    256e:	itt	ne
	ldrbne  r3, [r1], #1
    2570:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2574:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2578:	bcc.n	257e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    257a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    257c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    257e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2580:	bx	lr
    2582:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2584:	cmp	r2, #8
	blo	.Lbyte_copy
    2586:	bcc.n	25b0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2588:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    258a:	beq.n	24a8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    258c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2590:	beq.n	24a8 <memcpy+0xc>

	rsb	r3, #4
    2592:	rsb	r3, r3, #4
	subs	r2, r3
    2596:	subs	r2, r2, r3

	lsls    r3, r3, #31
    2598:	lsls	r3, r3, #31
	itt ne
    259a:	itt	ne
	ldrbne  r3, [r1], #1
    259c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    25a0:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    25a4:	bcc.n	24a8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    25a6:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    25aa:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    25ae:	b.n	24a8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    25b0:	subs	r2, #4
	blo	.Lcopy_less_than_4
    25b2:	bcc.n	2568 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    25b4:	subs	r2, #1
	ldrb    r3, [r1], #1
    25b6:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    25ba:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    25be:	bcs.n	25b4 <memcpy+0x118>

	ldrb	r3, [r1]
    25c0:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    25c2:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    25c4:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    25c6:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    25c8:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    25ca:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    25cc:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    25ce:	bx	lr

000025d0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    25d0:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    25d2:	ldr	r1, [pc, #80]	; (2624 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    25d4:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    25d8:	ldr	r5, [pc, #76]	; (2628 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    25da:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    25dc:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    25e0:	ldr	r6, [pc, #72]	; (262c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    25e2:	ldr	r2, [pc, #76]	; (2630 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    25e4:	add.w	r5, r5, r0, lsl #5
    25e8:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    25ea:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    25ec:	mov	r0, r5
    25ee:	ldrh	r2, [r6, #0]
    25f0:	bl	3854 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    25f4:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    25f6:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    25fa:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    25fc:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    2600:	ldr	r2, [pc, #48]	; (2634 <rx_queue_transfer+0x64>)
    2602:	str	r3, [r2, #0]
		location += 32;
    2604:	adds	r3, #32
	} while (location < end_addr);
    2606:	cmp	r1, r3
    2608:	bhi.n	2602 <rx_queue_transfer+0x32>
	asm("dsb");
    260a:	dsb	sy
	asm("isb");
    260e:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    2612:	movs	r0, #3
    2614:	mov	r1, r5
    2616:	bl	38ac <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    261a:	ldr	r3, [pc, #28]	; (2638 <rx_queue_transfer+0x68>)
    261c:	mov.w	r2, #131072	; 0x20000
    2620:	str	r2, [r3, #0]
    2622:	pop	{r3, r4, r5, r6, r7, pc}
    2624:	.word	0x20200000
    2628:	.word	0x200018e0
    262c:	.word	0x200019ee
    2630:	.word	0xe000e18c
    2634:	.word	0xe000ef5c
    2638:	.word	0xe000e10c

0000263c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    263c:	ldr	r2, [pc, #144]	; (26d0 <rx_event+0x94>)
    263e:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    2640:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2644:	ubfx	r3, r3, #16, #15
    2648:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    264a:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    264c:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    264e:	cmp	r4, #0
    2650:	ble.n	26c4 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    2652:	ldr	r1, [pc, #128]	; (26d4 <rx_event+0x98>)
		if (head != rx_tail) {
    2654:	ldr	r2, [pc, #128]	; (26d8 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    2656:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    2658:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    265a:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    265c:	ldr	r0, [pc, #124]	; (26dc <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    265e:	ldr	r6, [pc, #128]	; (26e0 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    2660:	cmp	r3, r2
    2662:	beq.n	2674 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    2664:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    2668:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    266c:	rsb	r2, r7, #512	; 0x200
    2670:	cmp	r4, r2
    2672:	bls.n	269a <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2674:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    2676:	movs	r2, #0
    2678:	ldr	r7, [pc, #104]	; (26e4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    267a:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    267c:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    2680:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    2684:	ldr	r6, [pc, #96]	; (26e8 <rx_event+0xac>)
    2686:	ite	ls
    2688:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    268a:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    268c:	strb	r2, [r1, #0]
		rx_available += len;
    268e:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    2690:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    2692:	add	r4, r2
    2694:	str	r4, [r6, #0]
    2696:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    269a:	ldr	r3, [pc, #80]	; (26ec <rx_event+0xb0>)
    269c:	add.w	r0, r7, r8, lsl #9
    26a0:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    26a2:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    26a4:	add.w	r1, r3, r5, lsl #9
    26a8:	add	r0, r3
    26aa:	bl	249c <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    26ae:	ldr	r2, [pc, #56]	; (26e8 <rx_event+0xac>)
				rx_queue_transfer(i);
    26b0:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    26b2:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    26b6:	ldr	r3, [r2, #0]
    26b8:	add	r4, r3
    26ba:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    26bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    26c0:	b.w	25d0 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    26c4:	mov	r0, r5
	}
}
    26c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    26ca:	b.w	25d0 <rx_queue_transfer>
    26ce:	nop
    26d0:	.word	0x200019ee
    26d4:	.word	0x20001a04
    26d8:	.word	0x200019e0
    26dc:	.word	0x200019e4
    26e0:	.word	0x200019f0
    26e4:	.word	0x200018c0
    26e8:	.word	0x20001a00
    26ec:	.word	0x20200000

000026f0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    26f0:	ldr	r3, [pc, #120]	; (276c <usb_serial_flush_callback+0x7c>)
    26f2:	ldrb	r2, [r3, #0]
    26f4:	cbnz	r2, 270e <usb_serial_flush_callback+0x1e>
    26f6:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    26fa:	ldr	r2, [pc, #116]	; (2770 <usb_serial_flush_callback+0x80>)
    26fc:	ldrb	r2, [r2, #0]
    26fe:	cbz	r2, 270e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    2700:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    2704:	ldr	r5, [pc, #108]	; (2774 <usb_serial_flush_callback+0x84>)
    2706:	ldrh	r2, [r5, #0]
    2708:	cbnz	r2, 2710 <usb_serial_flush_callback+0x20>
    270a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    270e:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2710:	ldr	r6, [pc, #100]	; (2778 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2712:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    2716:	ldr	r7, [pc, #100]	; (277c <usb_serial_flush_callback+0x8c>)
    2718:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    271a:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    271c:	ldr	r4, [pc, #96]	; (2780 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    271e:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2722:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2726:	mov	r0, r7
    2728:	mov	r1, r4
    272a:	bl	3854 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    272e:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2732:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2736:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    273a:	ldr	r3, [pc, #72]	; (2784 <usb_serial_flush_callback+0x94>)
    273c:	str	r1, [r3, #0]
		location += 32;
    273e:	adds	r1, #32
	} while (location < end_addr);
    2740:	cmp	r2, r1
    2742:	bhi.n	273c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    2744:	dsb	sy
	asm("isb");
    2748:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    274c:	movs	r0, #4
    274e:	mov	r1, r7
    2750:	bl	3884 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2754:	ldrb	r3, [r6, #0]
    2756:	ldr	r2, [pc, #32]	; (2778 <usb_serial_flush_callback+0x88>)
    2758:	adds	r3, #1
    275a:	uxtb	r3, r3
    275c:	cmp	r3, #3
    275e:	it	hi
    2760:	movhi	r3, #0
    2762:	strb	r3, [r2, #0]
	tx_available = 0;
    2764:	movs	r3, #0
    2766:	strh	r3, [r5, #0]
    2768:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    276c:	.word	0x200018d2
    2770:	.word	0x20001ad8
    2774:	.word	0x20001a06
    2778:	.word	0x200018d3
    277c:	.word	0x20001a20
    2780:	.word	0x20201000
    2784:	.word	0xe000ef70

00002788 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    2788:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    278c:	sub	sp, #20
    278e:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    2790:	str	r1, [sp, #4]
    2792:	cmp	r1, #0
    2794:	beq.w	28dc <usb_serial_write.part.1+0x154>
    2798:	movs	r3, #0
    279a:	ldr.w	r8, [pc, #348]	; 28f8 <usb_serial_write.part.1+0x170>
    279e:	ldr.w	r9, [pc, #332]	; 28ec <usb_serial_write.part.1+0x164>
    27a2:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    27a4:	ldr	r6, [pc, #312]	; (28e0 <usb_serial_write.part.1+0x158>)
    27a6:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    27aa:	ldr.w	sl, [pc, #336]	; 28fc <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    27ae:	ldr.w	fp, [pc, #336]	; 2900 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    27b2:	ldr	r2, [pc, #304]	; (28e4 <usb_serial_write.part.1+0x15c>)
    27b4:	ldrb	r4, [r2, #0]
    27b6:	ldr	r2, [pc, #304]	; (28e8 <usb_serial_write.part.1+0x160>)
    27b8:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    27bc:	cmp	r3, #0
    27be:	bne.n	289e <usb_serial_write.part.1+0x116>
    27c0:	mov	r5, r3
    27c2:	mov	r4, r3
    27c4:	b.n	27f0 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    27c6:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    27ca:	cbnz	r4, 27ce <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    27cc:	ldr	r5, [r6, #0]
    27ce:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    27d0:	cmp	r3, #0
    27d2:	bne.n	2892 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    27d4:	ldr	r3, [r6, #0]
    27d6:	subs	r3, r3, r5
    27d8:	cmp	r3, #120	; 0x78
    27da:	bhi.n	28d0 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    27dc:	ldrb.w	r3, [sl]
    27e0:	cmp	r3, #0
    27e2:	beq.n	2892 <usb_serial_write.part.1+0x10a>
			yield();
    27e4:	bl	4244 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    27e8:	ldrh.w	r3, [r8]
    27ec:	cmp	r3, #0
    27ee:	bne.n	289a <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    27f0:	mov	r0, r7
    27f2:	bl	38d0 <usb_transfer_status>
			if (!(status & 0x80)) {
    27f6:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    27fa:	ldr	r2, [pc, #240]	; (28ec <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    27fc:	bne.n	27c6 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    27fe:	mov.w	r3, #2048	; 0x800
    2802:	ldr	r2, [pc, #224]	; (28e4 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    2804:	strb.w	r0, [r9]
    2808:	ldrb	r4, [r2, #0]
    280a:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    280c:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2810:	lsls	r4, r4, #11
		if (size >= tx_available) {
    2812:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    2814:	ldr	r1, [pc, #216]	; (28f0 <usb_serial_write.part.1+0x168>)
    2816:	add	r0, r4
		if (size >= tx_available) {
    2818:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    281a:	add	r0, r1
		if (size >= tx_available) {
    281c:	bcc.n	28a6 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    281e:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    2820:	ldr	r1, [sp, #8]
    2822:	bl	249c <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    2826:	movs	r3, #0
    2828:	mov	r1, r4
    282a:	mov.w	r2, #2048	; 0x800
    282e:	mov	r0, r7
    2830:	bl	3854 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2834:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    2838:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    283c:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2840:	str.w	r3, [fp]
		location += 32;
    2844:	adds	r3, #32
	} while (location < end_addr);
    2846:	cmp	r4, r3
    2848:	bhi.n	2840 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    284a:	dsb	sy
	asm("isb");
    284e:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    2852:	movs	r0, #4
    2854:	mov	r1, r7
    2856:	bl	3884 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    285a:	ldr	r3, [pc, #136]	; (28e4 <usb_serial_write.part.1+0x15c>)
    285c:	ldr	r2, [pc, #132]	; (28e4 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    285e:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    2860:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    2862:	ldr	r0, [pc, #144]	; (28f4 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    2864:	adds	r3, #1
    2866:	uxtb	r3, r3
    2868:	cmp	r3, #3
    286a:	it	hi
    286c:	movhi	r3, #0
    286e:	strb	r3, [r2, #0]
			size -= tx_available;
    2870:	ldrh.w	r2, [r8]
			sent += tx_available;
    2874:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    2876:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    287a:	add	r3, r2
    287c:	str	r3, [sp, #0]
			data += tx_available;
    287e:	ldr	r3, [sp, #8]
    2880:	add	r3, r2
    2882:	str	r3, [sp, #8]
    2884:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    2886:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    288a:	ldr	r1, [sp, #4]
    288c:	subs	r2, r1, r2
    288e:	str	r2, [sp, #4]
    2890:	bne.n	27b2 <usb_serial_write.part.1+0x2a>
    2892:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    2894:	add	sp, #20
    2896:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    289a:	ldr	r2, [pc, #72]	; (28e4 <usb_serial_write.part.1+0x15c>)
    289c:	ldrb	r4, [r2, #0]
    289e:	mov	r2, r3
    28a0:	rsb	r0, r3, #2048	; 0x800
    28a4:	b.n	2810 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    28a6:	ldr	r4, [sp, #4]
    28a8:	ldr	r1, [sp, #8]
    28aa:	mov	r2, r4
    28ac:	str	r3, [sp, #12]
    28ae:	bl	249c <memcpy>
			tx_available -= size;
    28b2:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    28b4:	ldr	r2, [pc, #60]	; (28f4 <usb_serial_write.part.1+0x16c>)
    28b6:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    28ba:	subs	r3, r3, r4
    28bc:	strh.w	r3, [r8]
    28c0:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    28c2:	str.w	r1, [r2, #132]	; 0x84
    28c6:	mov	r0, r3
    28c8:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    28ca:	add	sp, #20
    28cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    28d0:	movs	r3, #1
				return sent;
    28d2:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    28d4:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    28d6:	add	sp, #20
    28d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    28dc:	ldr	r0, [sp, #4]
    28de:	b.n	2894 <usb_serial_write.part.1+0x10c>
    28e0:	.word	0x20001ae4
    28e4:	.word	0x200018d3
    28e8:	.word	0x20001a20
    28ec:	.word	0x20001a05
    28f0:	.word	0x20201000
    28f4:	.word	0x402e0000
    28f8:	.word	0x20001a06
    28fc:	.word	0x20001ad8
    2900:	.word	0xe000ef70

00002904 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    2904:	bx	lr
    2906:	nop

00002908 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2908:	ldr	r3, [pc, #196]	; (29d0 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    290a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    290e:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    2910:	ldr	r7, [pc, #192]	; (29d4 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    2912:	cmp	r3, #0
    2914:	beq.n	29c0 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    2916:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    291a:	ldr.w	r8, [pc, #236]	; 2a08 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    291e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    2920:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2924:	movs	r1, #0
    2926:	movs	r2, #128	; 0x80
    2928:	ldr	r0, [pc, #172]	; (29d8 <usb_serial_configure+0xd0>)
	tx_head = 0;
    292a:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    292c:	ldr	r6, [pc, #172]	; (29dc <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    292e:	bl	5d60 <memset>
	tx_head = 0;
    2932:	ldr	r4, [pc, #172]	; (29e0 <usb_serial_configure+0xd8>)
	tx_available = 0;
    2934:	ldr	r3, [pc, #172]	; (29e4 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2936:	mov	r1, r5
    2938:	mov.w	r2, #256	; 0x100
    293c:	ldr	r0, [pc, #168]	; (29e8 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    293e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2940:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    2942:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2944:	bl	5d60 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    2948:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    294a:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    294c:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    294e:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2950:	str	r5, [r6, #8]
    2952:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    2954:	ldr	r1, [pc, #148]	; (29ec <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    2956:	ldr	r6, [pc, #152]	; (29f0 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    2958:	ldr	r0, [pc, #152]	; (29f4 <usb_serial_configure+0xec>)
	rx_available = 0;
    295a:	ldr.w	lr, [pc, #176]	; 2a0c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    295e:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2960:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    2962:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2964:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    2966:	str	r5, [r6, #0]
    2968:	str	r5, [r6, #4]
    296a:	str	r5, [r6, #8]
    296c:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    296e:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2972:	bl	37ec <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    2976:	ldrh.w	r1, [r8]
    297a:	mov	r2, r5
    297c:	ldr	r3, [pc, #120]	; (29f8 <usb_serial_configure+0xf0>)
    297e:	movs	r0, #3
    2980:	bl	3788 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    2984:	mov	r3, r5
    2986:	ldrh	r1, [r7, #0]
    2988:	movs	r2, #1
    298a:	movs	r0, #4
    298c:	bl	37ec <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    2990:	mov	r0, r4
    2992:	adds	r4, #1
    2994:	bl	25d0 <rx_queue_transfer>
    2998:	cmp	r4, #8
    299a:	bne.n	2990 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    299c:	ldr	r3, [pc, #92]	; (29fc <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    299e:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    29a0:	ldr	r0, [pc, #92]	; (2a00 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    29a2:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    29a4:	ldr	r4, [pc, #92]	; (2a04 <usb_serial_configure+0xfc>)
    29a6:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    29a8:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    29ac:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    29b0:	ldr.w	r2, [r3, #328]	; 0x148
    29b4:	orr.w	r2, r2, #16777216	; 0x1000000
    29b8:	str.w	r2, [r3, #328]	; 0x148
    29bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    29c0:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    29c2:	ldr.w	r8, [pc, #68]	; 2a08 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    29c6:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    29c8:	strh.w	r3, [r8]
    29cc:	b.n	2924 <usb_serial_configure+0x1c>
    29ce:	nop
    29d0:	.word	0x20001ab0
    29d4:	.word	0x200018d0
    29d8:	.word	0x20001a20
    29dc:	.word	0x200019f0
    29e0:	.word	0x200018d3
    29e4:	.word	0x20001a06
    29e8:	.word	0x200018e0
    29ec:	.word	0x20001a04
    29f0:	.word	0x200018c0
    29f4:	.word	0x200019e0
    29f8:	.word	0x0000263d
    29fc:	.word	0x402e0000
    2a00:	.word	0x20001aa0
    2a04:	.word	0x000026f1
    2a08:	.word	0x200019ee
    2a0c:	.word	0x20001a00

00002a10 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2a10:	ldr	r3, [pc, #196]	; (2ad8 <usb_serial_read+0xc8>)
    2a12:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2a16:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2a1a:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2a1c:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2a1e:	ldr	r3, [pc, #188]	; (2adc <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2a20:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    2a22:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2a24:	cmp	r1, #0
    2a26:	beq.n	2ad0 <usb_serial_read+0xc0>
    2a28:	ldr	r3, [pc, #180]	; (2ae0 <usb_serial_read+0xd0>)
    2a2a:	uxtb	r4, r4
    2a2c:	ldrb	r3, [r3, #0]
    2a2e:	cmp	r4, r3
    2a30:	beq.n	2ad4 <usb_serial_read+0xc4>
    2a32:	mov	sl, r0
    2a34:	movs	r7, #0
    2a36:	ldr.w	fp, [pc, #192]	; 2af8 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    2a3a:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2a3c:	ldr	r3, [pc, #164]	; (2ae4 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    2a3e:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a42:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    2a44:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2a46:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    2a48:	ldr	r3, [pc, #156]	; (2ae8 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    2a4a:	it	cs
    2a4c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    2a4e:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2a50:	ldr	r3, [pc, #144]	; (2ae4 <usb_serial_read+0xd4>)
    2a52:	ldrh.w	lr, [r3, r5, lsl #1]
    2a56:	ldr	r3, [pc, #148]	; (2aec <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a58:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2a5c:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a60:	ldr	r3, [pc, #140]	; (2af0 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2a62:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a66:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    2a68:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2a6a:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    2a6c:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    2a6e:	bcs.n	2aa4 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    2a70:	add.w	r1, lr, r5, lsl #9
    2a74:	mov	r2, r8
    2a76:	add	r1, r3
    2a78:	bl	249c <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    2a7c:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2a7e:	ldr.w	r1, [fp]
    2a82:	mov	r0, r9
			rx_index[i] += len;
    2a84:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2a88:	rsb	r1, r8, r1
			rx_index[i] += len;
    2a8c:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2a8e:	str.w	r1, [fp]
			rx_index[i] += len;
    2a92:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2a96:	ldr	r3, [pc, #92]	; (2af4 <usb_serial_read+0xe4>)
    2a98:	mov.w	r2, #131072	; 0x20000
    2a9c:	str	r2, [r3, #0]
	return count;
}
    2a9e:	add	sp, #12
    2aa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2aa4:	bl	249c <memcpy>
			p += avail;
			rx_available -= avail;
    2aa8:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    2aac:	uxtb	r3, r4
			rx_queue_transfer(i);
    2aae:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    2ab0:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    2ab2:	add	sl, r6
			rx_available -= avail;
    2ab4:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    2ab8:	ldr	r2, [pc, #32]	; (2adc <usb_serial_read+0xcc>)
    2aba:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    2abc:	bl	25d0 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2ac0:	cmp	r9, r7
    2ac2:	bls.n	2acc <usb_serial_read+0xbc>
    2ac4:	ldr	r3, [pc, #24]	; (2ae0 <usb_serial_read+0xd0>)
    2ac6:	ldrb	r3, [r3, #0]
    2ac8:	cmp	r4, r3
    2aca:	bne.n	2a3a <usb_serial_read+0x2a>
    2acc:	mov	r0, r7
    2ace:	b.n	2a96 <usb_serial_read+0x86>
    2ad0:	mov	r0, r1
    2ad2:	b.n	2a96 <usb_serial_read+0x86>
    2ad4:	movs	r0, #0
    2ad6:	b.n	2a96 <usb_serial_read+0x86>
    2ad8:	.word	0xe000e18c
    2adc:	.word	0x200019e0
    2ae0:	.word	0x20001a04
    2ae4:	.word	0x200018c0
    2ae8:	.word	0x200019e4
    2aec:	.word	0x200019f0
    2af0:	.word	0x20200000
    2af4:	.word	0xe000e10c
    2af8:	.word	0x20001a00

00002afc <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2afc:	ldr	r3, [pc, #44]	; (2b2c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    2afe:	ldr	r2, [pc, #48]	; (2b30 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2b00:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    2b02:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    2b04:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    2b06:	cmp	r3, r2
    2b08:	beq.n	2b26 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    2b0a:	adds	r3, #1
	uint32_t i = rx_list[tail];
    2b0c:	ldr	r0, [pc, #36]	; (2b34 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2b0e:	ldr	r2, [pc, #40]	; (2b38 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2b10:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2b12:	ldr	r1, [pc, #40]	; (2b3c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2b14:	it	cs
    2b16:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    2b18:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2b1a:	ldrh.w	r1, [r1, r3, lsl #1]
    2b1e:	add.w	r3, r2, r3, lsl #9
    2b22:	ldrb	r0, [r3, r1]
    2b24:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    2b26:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    2b2a:	bx	lr
    2b2c:	.word	0x200019e0
    2b30:	.word	0x20001a04
    2b34:	.word	0x200019e4
    2b38:	.word	0x20200000
    2b3c:	.word	0x200018c0

00002b40 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    2b40:	ldr	r3, [pc, #4]	; (2b48 <usb_serial_available+0x8>)
    2b42:	ldr	r0, [r3, #0]
}
    2b44:	bx	lr
    2b46:	nop
    2b48:	.word	0x20001a00

00002b4c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    2b4c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    2b50:	ldr	r6, [pc, #84]	; (2ba8 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    2b52:	ldr	r5, [pc, #88]	; (2bac <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    2b54:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    2b56:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    2b58:	uxtb	r4, r4
	while (tail != rx_head) {
    2b5a:	cmp	r4, r3
    2b5c:	beq.n	2ba2 <usb_serial_flush_input+0x56>
    2b5e:	ldr.w	r9, [pc, #84]	; 2bb4 <usb_serial_flush_input+0x68>
    2b62:	ldr.w	fp, [pc, #84]	; 2bb8 <usb_serial_flush_input+0x6c>
    2b66:	ldr.w	r8, [pc, #84]	; 2bbc <usb_serial_flush_input+0x70>
    2b6a:	ldr	r7, [pc, #68]	; (2bb0 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    2b6c:	adds	r4, #1
    2b6e:	cmp	r4, #8
    2b70:	uxtb.w	sl, r4
    2b74:	bls.n	2b7a <usb_serial_flush_input+0x2e>
    2b76:	movs	r4, #0
    2b78:	mov	sl, r4
		uint32_t i = rx_list[tail];
    2b7a:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    2b7e:	ldr.w	r2, [fp]
    2b82:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    2b86:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    2b88:	ldrh.w	r1, [r7, r1, lsl #1]
    2b8c:	subs	r3, r3, r1
    2b8e:	subs	r3, r2, r3
    2b90:	str.w	r3, [fp]
		rx_queue_transfer(i);
    2b94:	bl	25d0 <rx_queue_transfer>
		rx_tail = tail;
    2b98:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    2b9c:	ldrb	r3, [r5, #0]
    2b9e:	cmp	r4, r3
    2ba0:	bne.n	2b6c <usb_serial_flush_input+0x20>
    2ba2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2ba6:	nop
    2ba8:	.word	0x200019e0
    2bac:	.word	0x20001a04
    2bb0:	.word	0x200018c0
    2bb4:	.word	0x200019e4
    2bb8:	.word	0x20001a00
    2bbc:	.word	0x200019f0

00002bc0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    2bc0:	push	{lr}
    2bc2:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    2bc4:	movs	r1, #1
    2bc6:	add.w	r0, sp, #7
    2bca:	bl	2a10 <usb_serial_read>
    2bce:	cbz	r0, 2bda <usb_serial_getchar+0x1a>
    2bd0:	ldrb.w	r0, [sp, #7]
	return -1;
}
    2bd4:	add	sp, #12
    2bd6:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    2bda:	mov.w	r0, #4294967295
    2bde:	b.n	2bd4 <usb_serial_getchar+0x14>

00002be0 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2be0:	ldr	r3, [pc, #36]	; (2c08 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2be2:	push	{lr}
    2be4:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2be6:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    2be8:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2bec:	cbnz	r3, 2bf8 <usb_serial_putchar+0x18>
    2bee:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    2bf2:	add	sp, #12
    2bf4:	ldr.w	pc, [sp], #4
    2bf8:	movs	r1, #1
    2bfa:	add.w	r0, sp, #7
    2bfe:	bl	2788 <usb_serial_write.part.1>
    2c02:	add	sp, #12
    2c04:	ldr.w	pc, [sp], #4
    2c08:	.word	0x20001ad8

00002c0c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    2c0c:	ldr	r3, [pc, #16]	; (2c20 <usb_serial_write+0x14>)
    2c0e:	ldrb	r3, [r3, #0]
    2c10:	and.w	r2, r3, #255	; 0xff
    2c14:	cbz	r3, 2c1a <usb_serial_write+0xe>
    2c16:	b.w	2788 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    2c1a:	mov	r0, r2
    2c1c:	bx	lr
    2c1e:	nop
    2c20:	.word	0x20001ad8

00002c24 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    2c24:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2c28:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    2c2a:	ldr.w	r8, [pc, #64]	; 2c6c <usb_serial_write_buffer_free+0x48>
    2c2e:	movs	r3, #1
    2c30:	ldr	r5, [pc, #48]	; (2c64 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    2c32:	mov	r7, r4
    2c34:	ldr	r6, [pc, #48]	; (2c68 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    2c36:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2c3a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2c3c:	mov	r0, r5
    2c3e:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2c40:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2c42:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2c46:	beq.n	2c54 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2c48:	bl	38d0 <usb_transfer_status>
    2c4c:	lsls	r3, r0, #24
    2c4e:	it	pl
    2c50:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2c54:	cmp	r4, #4
    2c56:	bne.n	2c3a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2c58:	movs	r3, #0
	return sum;
}
    2c5a:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    2c5c:	strb.w	r3, [r8]
	return sum;
}
    2c60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c64:	.word	0x20001a20
    2c68:	.word	0x200018d3
    2c6c:	.word	0x200018d2

00002c70 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    2c70:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    2c74:	ldr	r3, [pc, #124]	; (2cf4 <usb_serial_flush_output+0x84>)
    2c76:	ldrb	r3, [r3, #0]
    2c78:	cbz	r3, 2c80 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    2c7a:	ldr	r5, [pc, #124]	; (2cf8 <usb_serial_flush_output+0x88>)
    2c7c:	ldrh	r2, [r5, #0]
    2c7e:	cbnz	r2, 2c84 <usb_serial_flush_output+0x14>
    2c80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2c84:	ldr.w	r8, [pc, #132]	; 2d0c <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2c88:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2c8c:	ldr	r6, [pc, #108]	; (2cfc <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2c8e:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    2c92:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2c96:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2c98:	ldr	r4, [pc, #100]	; (2d00 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2c9a:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2c9c:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2ca0:	ldr	r7, [pc, #96]	; (2d04 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2ca2:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2ca6:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2ca8:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2cac:	mov	r1, r4
    2cae:	bl	3854 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2cb2:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2cb6:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2cba:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2cbe:	ldr	r3, [pc, #72]	; (2d08 <usb_serial_flush_output+0x98>)
    2cc0:	str	r1, [r3, #0]
		location += 32;
    2cc2:	adds	r1, #32
	} while (location < end_addr);
    2cc4:	cmp	r2, r1
    2cc6:	bhi.n	2cc0 <usb_serial_flush_output+0x50>
	asm("dsb");
    2cc8:	dsb	sy
	asm("isb");
    2ccc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2cd0:	movs	r0, #4
    2cd2:	mov	r1, r6
    2cd4:	bl	3884 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2cd8:	ldrb.w	r3, [r8]
    2cdc:	ldr	r2, [pc, #44]	; (2d0c <usb_serial_flush_output+0x9c>)
    2cde:	adds	r3, #1
    2ce0:	uxtb	r3, r3
    2ce2:	cmp	r3, #3
    2ce4:	it	hi
    2ce6:	movhi	r3, #0
    2ce8:	strb	r3, [r2, #0]
	tx_available = 0;
    2cea:	movs	r3, #0
    2cec:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    2cee:	strb	r3, [r7, #0]
    2cf0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2cf4:	.word	0x20001ad8
    2cf8:	.word	0x20001a06
    2cfc:	.word	0x20001a20
    2d00:	.word	0x20201000
    2d04:	.word	0x200018d2
    2d08:	.word	0xe000ef70
    2d0c:	.word	0x200018d3

00002d10 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2d10:	ldr	r2, [pc, #600]	; (2f6c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2d12:	ldr	r3, [pc, #604]	; (2f70 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2d14:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    2d16:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    2d1a:	ldr	r4, [pc, #600]	; (2f74 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2d1c:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2d20:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2d22:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2d24:	bls.n	2d60 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2d26:	ldr	r3, [pc, #592]	; (2f78 <set_arm_clock+0x268>)
    2d28:	cmp	r0, r3
    2d2a:	bls.w	2f58 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2d2e:	ldr	r3, [pc, #588]	; (2f7c <set_arm_clock+0x26c>)
    2d30:	movw	r5, #1575	; 0x627
    2d34:	ldr	r7, [pc, #584]	; (2f80 <set_arm_clock+0x270>)
    2d36:	add	r3, r0
    2d38:	ldr	r4, [pc, #584]	; (2f84 <set_arm_clock+0x274>)
    2d3a:	lsrs	r2, r3, #8
    2d3c:	umull	r3, r2, r7, r2
    2d40:	lsrs	r3, r2, #7
    2d42:	add.w	r3, r3, r3, lsl #2
    2d46:	add.w	r2, r3, r3, lsl #2
    2d4a:	addw	r3, r2, #1250	; 0x4e2
    2d4e:	cmp	r3, r5
    2d50:	it	cs
    2d52:	movcs	r3, r5
    2d54:	sub.w	r3, r3, #800	; 0x320
    2d58:	umull	r3, r5, r4, r3
    2d5c:	lsrs	r5, r5, #3
    2d5e:	b.n	2d6a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    2d60:	ldr	r5, [pc, #548]	; (2f88 <set_arm_clock+0x278>)
    2d62:	cmp	r0, r5
    2d64:	ite	ls
    2d66:	movls	r5, #6
    2d68:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2d6a:	ldr	r2, [pc, #516]	; (2f70 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2d6c:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2d70:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2d74:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2d76:	orr.w	r3, r3, #192	; 0xc0
    2d7a:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2d7e:	bcs.n	2d96 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2d80:	ldr	r3, [pc, #496]	; (2f74 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2d82:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2d86:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2d88:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2d8a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2d8c:	ldr	r3, [r2, #0]
    2d8e:	cmp	r3, #0
    2d90:	bge.n	2d8c <set_arm_clock+0x7c>
    2d92:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2d96:	ands.w	r3, lr, #33554432	; 0x2000000
    2d9a:	bne.n	2e00 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    2d9c:	ldr	r4, [pc, #492]	; (2f8c <set_arm_clock+0x27c>)
    2d9e:	ldr	r2, [pc, #496]	; (2f90 <set_arm_clock+0x280>)
    2da0:	ldr.w	ip, [r4, #16]
    2da4:	mov	r4, r2
    2da6:	and.w	r2, ip, r2
    2daa:	cmp	r2, r4
    2dac:	itet	eq
    2dae:	moveq.w	r3, #402653184	; 0x18000000
    2db2:	movne.w	r2, #4096	; 0x1000
    2db6:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2db8:	eor.w	r4, lr, r3
    2dbc:	tst.w	r4, #939524096	; 0x38000000
    2dc0:	beq.n	2dd4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    2dc2:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2dc6:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    2dca:	ldr	r4, [pc, #420]	; (2f70 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2dcc:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    2dd0:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2dd4:	eor.w	r3, r1, r2
    2dd8:	tst.w	r3, #12288	; 0x3000
    2ddc:	beq.n	2df0 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2dde:	ldr	r3, [pc, #400]	; (2f70 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    2de0:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    2de4:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2de6:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2de8:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2dea:	ldr	r3, [r2, #72]	; 0x48
    2dec:	lsls	r4, r3, #28
    2dee:	bmi.n	2dea <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    2df0:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    2df4:	ldr	r2, [pc, #376]	; (2f70 <set_arm_clock+0x260>)
    2df6:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2dfa:	ldr	r3, [r2, #72]	; 0x48
    2dfc:	lsls	r1, r3, #26
    2dfe:	bmi.n	2dfa <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    2e00:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2e02:	ldr	r4, [pc, #400]	; (2f94 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    2e04:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2e06:	mul.w	r3, r1, r2
    2e0a:	mul.w	r3, r0, r3
    2e0e:	cmp	r3, r4
    2e10:	bhi.n	2e26 <set_arm_clock+0x116>
		if (div_arm < 8) {
    2e12:	cmp	r2, #7
    2e14:	bhi.w	2f42 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    2e18:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2e1a:	mul.w	r3, r1, r2
    2e1e:	mul.w	r3, r0, r3
    2e22:	cmp	r3, r4
    2e24:	bls.n	2e12 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2e26:	ldr	r0, [pc, #368]	; (2f98 <set_arm_clock+0x288>)
    2e28:	ldr	r4, [pc, #368]	; (2f9c <set_arm_clock+0x28c>)
    2e2a:	add	r0, r3
    2e2c:	umull	r0, r3, r4, r0
    2e30:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    2e32:	cmp	r3, #108	; 0x6c
    2e34:	bhi.w	2f4e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    2e38:	cmp	r3, #53	; 0x35
    2e3a:	bhi.w	2f5c <set_arm_clock+0x24c>
    2e3e:	ldr.w	r8, [pc, #392]	; 2fc8 <set_arm_clock+0x2b8>
    2e42:	movs	r3, #54	; 0x36
    2e44:	ldr	r0, [pc, #344]	; (2fa0 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2e46:	ldr.w	ip, [pc, #324]	; 2f8c <set_arm_clock+0x27c>
    2e4a:	ldr	r4, [pc, #344]	; (2fa4 <set_arm_clock+0x294>)
    2e4c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2e50:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2e54:	and.w	r4, r9, r4
    2e58:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2e5a:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2e5e:	beq.n	2e78 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2e60:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2e64:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2e68:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2e6a:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2e6e:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2e72:	ldr	r3, [r4, #0]
    2e74:	cmp	r3, #0
    2e76:	bge.n	2e72 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2e78:	ldr.w	ip, [pc, #244]	; 2f70 <set_arm_clock+0x260>
    2e7c:	subs	r2, #1
    2e7e:	ldr.w	r3, [ip, #16]
    2e82:	and.w	r3, r3, #7
    2e86:	cmp	r3, r2
    2e88:	beq.n	2e9a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2e8a:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2e8e:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2e90:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2e94:	ldr	r3, [r4, #72]	; 0x48
    2e96:	lsls	r3, r3, #15
    2e98:	bmi.n	2e94 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2e9a:	subs	r1, #1
    2e9c:	lsls	r1, r1, #10
    2e9e:	eor.w	r3, lr, r1
    2ea2:	tst.w	r3, #7168	; 0x1c00
    2ea6:	beq.n	2ec2 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    2ea8:	ldr	r3, [pc, #196]	; (2f70 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    2eaa:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2eae:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2eb2:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2eb4:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    2eb8:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2ebc:	ldr	r3, [r2, #72]	; 0x48
    2ebe:	lsls	r1, r3, #30
    2ec0:	bmi.n	2ebc <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2ec2:	ldr	r3, [pc, #228]	; (2fa8 <set_arm_clock+0x298>)
    2ec4:	ldr	r1, [pc, #228]	; (2fac <set_arm_clock+0x29c>)
    2ec6:	add	r3, r0
    2ec8:	lsrs	r3, r3, #7
    2eca:	umull	r3, r1, r1, r3
    2ece:	lsrs	r1, r1, #12
    2ed0:	cmp	r1, #4
    2ed2:	it	cs
    2ed4:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2ed6:	subs	r3, r1, #1
    2ed8:	lsls	r3, r3, #8
    2eda:	eor.w	r2, lr, r3
    2ede:	tst.w	r2, #768	; 0x300
    2ee2:	beq.n	2ef4 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2ee4:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2ee8:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2eec:	ldr	r2, [pc, #128]	; (2f70 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2eee:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2ef2:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2ef4:	ldr	r3, [pc, #120]	; (2f70 <set_arm_clock+0x260>)
    2ef6:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2ef8:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2efa:	bic.w	r4, r4, #33554432	; 0x2000000
    2efe:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2f00:	ldr	r3, [r2, #72]	; 0x48
    2f02:	lsls	r3, r3, #26
    2f04:	bmi.n	2f00 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2f06:	ldr	r3, [pc, #168]	; (2fb0 <set_arm_clock+0x2a0>)
    2f08:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2f0c:	ldr	r4, [pc, #164]	; (2fb4 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2f0e:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2f10:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2f14:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2f16:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2f1a:	ldr	r4, [pc, #156]	; (2fb8 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2f1c:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2f20:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2f24:	ldr	r2, [pc, #148]	; (2fbc <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2f26:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2f28:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2f2a:	bcs.n	2f3e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2f2c:	ldr	r3, [pc, #68]	; (2f74 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2f2e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2f32:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2f34:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2f36:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2f38:	ldr	r3, [r2, #0]
    2f3a:	cmp	r3, #0
    2f3c:	bge.n	2f38 <set_arm_clock+0x228>
	}

	return frequency;
}
    2f3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2f42:	cmp	r1, #4
    2f44:	bhi.w	2e26 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    2f48:	adds	r1, #1
				div_arm = 1;
    2f4a:	movs	r2, #1
    2f4c:	b.n	2e06 <set_arm_clock+0xf6>
    2f4e:	ldr.w	r8, [pc, #124]	; 2fcc <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2f52:	movs	r3, #108	; 0x6c
    2f54:	ldr	r0, [pc, #104]	; (2fc0 <set_arm_clock+0x2b0>)
    2f56:	b.n	2e46 <set_arm_clock+0x136>
    2f58:	movs	r5, #18
    2f5a:	b.n	2d6a <set_arm_clock+0x5a>
    2f5c:	ldr	r0, [pc, #100]	; (2fc4 <set_arm_clock+0x2b4>)
    2f5e:	ldr.w	r8, [pc, #112]	; 2fd0 <set_arm_clock+0x2c0>
    2f62:	mul.w	r0, r0, r3
    2f66:	orr.w	r8, r3, r8
    2f6a:	b.n	2e46 <set_arm_clock+0x136>
    2f6c:	.word	0x1f78a400
    2f70:	.word	0x400fc000
    2f74:	.word	0x40080000
    2f78:	.word	0x23c34600
    2f7c:	.word	0xdc3cba00
    2f80:	.word	0x004cb223
    2f84:	.word	0x51eb851f
    2f88:	.word	0x016e3600
    2f8c:	.word	0x400d8000
    2f90:	.word	0x80003040
    2f94:	.word	0x269fb1ff
    2f98:	.word	0x005b8d80
    2f9c:	.word	0x165e9f81
    2fa0:	.word	0x269fb200
    2fa4:	.word	0x8001307f
    2fa8:	.word	0x08f0d17f
    2fac:	.word	0x00e5109f
    2fb0:	.word	0x431bde83
    2fb4:	.word	0x20000b20
    2fb8:	.word	0x20000b1c
    2fbc:	.word	0x20001ae0
    2fc0:	.word	0x4d3f6400
    2fc4:	.word	0x00b71b00
    2fc8:	.word	0x80002036
    2fcc:	.word	0x8000206c
    2fd0:	.word	0x80002000

00002fd4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2fd4:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    2fd6:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2fd8:	cbz	r3, 2fe2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2fda:	ldr	r3, [r2, #4]
    2fdc:	orr.w	r3, r3, #32768	; 0x8000
    2fe0:	str	r3, [r2, #4]
	}
	__disable_irq();
    2fe2:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    2fe4:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    2fe6:	cbz	r4, 3020 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2fe8:	ldr	r3, [pc, #80]	; (303c <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    2fea:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2fec:	ldr.w	r4, [r3, #432]	; 0x1b0
    2ff0:	tst	r4, r1
    2ff2:	bne.n	3034 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    2ff4:	ldr	r5, [pc, #72]	; (3040 <schedule_transfer+0x6c>)
    2ff6:	ldr	r7, [r5, #0]
    2ff8:	b.n	3004 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2ffa:	ldr	r4, [r5, #0]
    2ffc:	subs	r4, r4, r7
    2ffe:	cmp.w	r4, #2400	; 0x960
    3002:	bcs.n	301c <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    3004:	ldr.w	r4, [r3, #320]	; 0x140
    3008:	orr.w	r4, r4, #16384	; 0x4000
    300c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    3010:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3014:	ldr.w	r4, [r3, #320]	; 0x140
    3018:	lsls	r4, r4, #17
    301a:	bpl.n	2ffa <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    301c:	tst	r1, r6
    301e:	bne.n	3034 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    3020:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    3022:	ldr	r4, [pc, #24]	; (303c <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    3024:	str	r2, [r0, #8]
	endpoint->status = 0;
    3026:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    3028:	ldr.w	r3, [r4, #432]	; 0x1b0
    302c:	orrs	r1, r3
    302e:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    3032:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    3034:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    3036:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    3038:	pop	{r4, r5, r6, r7}
    303a:	bx	lr
    303c:	.word	0x402e0000
    3040:	.word	0xe0001004

00003044 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    3044:	push	{r4, r5, r6, lr}
    3046:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3048:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    304a:	cbz	r0, 3072 <run_callbacks+0x2e>
    304c:	mov	r2, r0
    304e:	movs	r4, #0
    3050:	b.n	305a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3052:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    3054:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    3056:	cmp	r2, #1
    3058:	beq.n	3074 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    305a:	ldr	r3, [r2, #4]
    305c:	ands.w	r3, r3, #128	; 0x80
    3060:	beq.n	3052 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    3062:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3064:	cbz	r4, 3072 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    3066:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    3068:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    306a:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    306c:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    306e:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3070:	bne.n	3066 <run_callbacks+0x22>
    3072:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    3074:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    3076:	str	r3, [r6, #52]	; 0x34
			break;
    3078:	b.n	3064 <run_callbacks+0x20>
    307a:	nop

0000307c <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    307c:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    307e:	cbnz	r1, 30ba <endpoint0_transmit.constprop.1+0x3e>
    3080:	ldr	r4, [pc, #132]	; (3108 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3082:	ldr	r1, [pc, #136]	; (310c <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3084:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3086:	ldr	r3, [pc, #136]	; (3110 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3088:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    308a:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    308e:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3090:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    3092:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    3094:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3096:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    3098:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    309a:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    309e:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    30a2:	ldr	r5, [pc, #112]	; (3114 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    30a4:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    30a8:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    30aa:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    30ae:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    30b0:	ldr.w	r3, [r2, #432]	; 0x1b0
    30b4:	cmp	r3, #0
    30b6:	bne.n	30b0 <endpoint0_transmit.constprop.1+0x34>
}
    30b8:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    30ba:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    30bc:	ldr	r3, [pc, #88]	; (3118 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    30be:	ldr	r5, [pc, #80]	; (3110 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    30c0:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    30c2:	ldr	r4, [pc, #68]	; (3108 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    30c4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    30c8:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    30ca:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    30cc:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    30ce:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    30d2:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    30d4:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    30d8:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    30da:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    30de:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    30e2:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    30e6:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    30e8:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    30ea:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    30ee:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    30f2:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    30f6:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    30f8:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    30fa:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    30fe:	ldr.w	r3, [r2, #432]	; 0x1b0
    3102:	cmp	r3, #0
    3104:	bne.n	30fe <endpoint0_transmit.constprop.1+0x82>
    3106:	b.n	3082 <endpoint0_transmit.constprop.1+0x6>
    3108:	.word	0x20003000
    310c:	.word	0x20002020
    3110:	.word	0x402e0000
    3114:	.word	0x20001ab4
    3118:	.word	0x20002000

0000311c <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    311c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    3120:	ldr	r4, [pc, #688]	; (33d4 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    3122:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    3124:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    3128:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    312c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    3130:	beq.n	31f0 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    3132:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3136:	cmp	r3, #0
    3138:	beq.n	31e6 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    313a:	mov.w	fp, #65537	; 0x10001
    313e:	ldr.w	r9, [pc, #700]	; 33fc <isr+0x2e0>
    3142:	ldr	r6, [pc, #660]	; (33d8 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    3144:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3146:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    3148:	str.w	r3, [r4, #428]	; 0x1ac
    314c:	ldr	r0, [r6, #40]	; 0x28
    314e:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    3150:	ldr.w	r3, [r4, #320]	; 0x140
    3154:	orr.w	r3, r3, #8192	; 0x2000
    3158:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    315c:	ldr.w	r3, [r4, #320]	; 0x140
    3160:	lsls	r7, r3, #18
    3162:	bpl.n	3150 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    3164:	ldr.w	r3, [r5, #320]	; 0x140
    3168:	bic.w	r3, r3, #8192	; 0x2000
    316c:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3170:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    3174:	ldr.w	r3, [r4, #436]	; 0x1b4
    3178:	ands.w	r3, r3, #65537	; 0x10001
    317c:	bne.n	3174 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    317e:	uxth	r1, r0
    3180:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    3184:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3188:	cmp	r1, r7
    318a:	bhi.w	32f6 <isr+0x1da>
    318e:	cmp.w	r1, #1664	; 0x680
    3192:	bcs.w	3568 <isr+0x44c>
    3196:	cmp.w	r1, #258	; 0x102
    319a:	beq.w	3474 <isr+0x358>
    319e:	bhi.w	3382 <isr+0x266>
    31a2:	cmp	r1, #128	; 0x80
    31a4:	beq.w	345a <isr+0x33e>
    31a8:	cmp	r1, #130	; 0x82
    31aa:	bne.w	3372 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    31ae:	uxth	r2, r2
    31b0:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    31b4:	cmp	r1, #7
    31b6:	bhi.w	3372 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    31ba:	lsls	r1, r1, #2
    31bc:	ldr	r0, [pc, #540]	; (33dc <isr+0x2c0>)
		reply_buffer[0] = 0;
    31be:	ldr	r7, [pc, #544]	; (33e0 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    31c0:	add	r0, r1
    31c2:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    31c4:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    31c6:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    31c8:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    31ca:	bpl.w	35e6 <isr+0x4ca>
    31ce:	lsls	r2, r1, #15
    31d0:	bpl.n	31d6 <isr+0xba>
			reply_buffer[0] = 1;
    31d2:	movs	r3, #1
    31d4:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    31d6:	movs	r1, #2
    31d8:	ldr	r0, [pc, #516]	; (33e0 <isr+0x2c4>)
    31da:	bl	307c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    31de:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    31e2:	cmp	r3, #0
    31e4:	bne.n	3148 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    31e6:	ldr	r2, [pc, #492]	; (33d4 <isr+0x2b8>)
    31e8:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    31ec:	cmp	r3, #0
    31ee:	bne.n	3292 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    31f0:	tst.w	r8, #64	; 0x40
    31f4:	beq.n	3228 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    31f6:	ldr	r3, [pc, #476]	; (33d4 <isr+0x2b8>)
    31f8:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    31fc:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    31fe:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    3202:	ldr.w	r1, [r3, #444]	; 0x1bc
    3206:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    320a:	ldr.w	r4, [r2, #432]	; 0x1b0
    320e:	ldr	r3, [pc, #452]	; (33d4 <isr+0x2b8>)
    3210:	cmp	r4, #0
    3212:	bne.n	320a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    3214:	mov.w	r2, #4294967295
    3218:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    321c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    3220:	bl	2904 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    3224:	ldr	r3, [pc, #444]	; (33e4 <isr+0x2c8>)
    3226:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    3228:	tst.w	r8, #16777216	; 0x1000000
    322c:	beq.n	3236 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    322e:	ldr	r3, [pc, #440]	; (33e8 <isr+0x2cc>)
    3230:	ldr	r3, [r3, #0]
    3232:	cbz	r3, 3236 <isr+0x11a>
    3234:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    3236:	tst.w	r8, #33554432	; 0x2000000
    323a:	beq.n	3244 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    323c:	ldr	r3, [pc, #428]	; (33ec <isr+0x2d0>)
    323e:	ldr	r3, [r3, #0]
    3240:	cbz	r3, 3244 <isr+0x128>
    3242:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    3244:	tst.w	r8, #4
    3248:	beq.n	325c <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    324a:	ldr	r3, [pc, #392]	; (33d4 <isr+0x2b8>)
    324c:	ldr.w	r3, [r3, #388]	; 0x184
    3250:	ands.w	r3, r3, #512	; 0x200
    3254:	beq.n	32f0 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    3256:	ldr	r3, [pc, #408]	; (33f0 <isr+0x2d4>)
    3258:	movs	r2, #1
    325a:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    325c:	ldr	r3, [pc, #372]	; (33d4 <isr+0x2b8>)
    325e:	ldr.w	r2, [r3, #328]	; 0x148
    3262:	lsls	r2, r2, #24
    3264:	bpl.n	328c <isr+0x170>
    3266:	tst.w	r8, #128	; 0x80
    326a:	beq.n	328c <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    326c:	ldr	r1, [pc, #388]	; (33f4 <isr+0x2d8>)
    326e:	ldrb	r2, [r1, #0]
    3270:	cbz	r2, 328c <isr+0x170>
			if (--usb_reboot_timer == 0) {
    3272:	subs	r2, #1
    3274:	uxtb	r2, r2
    3276:	strb	r2, [r1, #0]
    3278:	cbnz	r2, 328c <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    327a:	ldr	r1, [pc, #380]	; (33f8 <isr+0x2dc>)
    327c:	ldrb	r2, [r1, #0]
    327e:	and.w	r2, r2, #251	; 0xfb
    3282:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    3284:	cmp	r2, #0
    3286:	beq.w	36ee <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    328a:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    328c:	add	sp, #12
    328e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    3292:	ldr	r1, [pc, #360]	; (33fc <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    3294:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    3298:	ldr	r0, [r1, #0]
    329a:	tst	r3, r0
    329c:	bne.w	366c <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    32a0:	ldr	r2, [pc, #320]	; (33e4 <isr+0x2c8>)
    32a2:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    32a4:	ands	r5, r3
    32a6:	beq.n	31f0 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    32a8:	lsrs	r7, r5, #16
    32aa:	beq.n	32cc <isr+0x1b0>
    32ac:	ldr	r6, [pc, #296]	; (33d8 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    32ae:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    32b2:	rbit	r4, r7
    32b6:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    32ba:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    32be:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    32c2:	adds	r0, #64	; 0x40
    32c4:	bl	3044 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    32c8:	bics	r7, r4
    32ca:	bne.n	32b2 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    32cc:	uxth	r5, r5
				while(rx) {
    32ce:	cmp	r5, #0
    32d0:	beq.n	31f0 <isr+0xd4>
    32d2:	ldr	r6, [pc, #260]	; (33d8 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    32d4:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    32d6:	rbit	r4, r5
    32da:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    32de:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    32e2:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    32e6:	bl	3044 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    32ea:	bics	r5, r4
    32ec:	bne.n	32d6 <isr+0x1ba>
    32ee:	b.n	31f0 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    32f0:	ldr	r2, [pc, #252]	; (33f0 <isr+0x2d4>)
    32f2:	strb	r3, [r2, #0]
    32f4:	b.n	325c <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    32f6:	movw	r7, #8225	; 0x2021
    32fa:	cmp	r1, r7
    32fc:	beq.n	336a <isr+0x24e>
    32fe:	bhi.w	3414 <isr+0x2f8>
    3302:	cmp.w	r1, #2176	; 0x880
    3306:	beq.w	354c <isr+0x430>
    330a:	cmp.w	r1, #2304	; 0x900
    330e:	bne.n	3372 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    3310:	ubfx	r0, r0, #16, #8
    3314:	ldr	r2, [pc, #232]	; (3400 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3316:	ldr	r1, [pc, #236]	; (3404 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    3318:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    331a:	ldr	r7, [pc, #236]	; (3408 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    331c:	ldr	r2, [pc, #236]	; (340c <isr+0x2f0>)
    331e:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    3320:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3324:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3328:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    332c:	bl	2908 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3330:	ldr	r2, [pc, #220]	; (3410 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3332:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3334:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3336:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3338:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    333a:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    333c:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    333e:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3340:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3344:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3348:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    334a:	orr.w	r2, r1, #65536	; 0x10000
    334e:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3352:	ldr	r2, [pc, #168]	; (33fc <isr+0x2e0>)
    3354:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    3356:	ldr.w	r3, [r4, #432]	; 0x1b0
    335a:	cmp	r3, #0
    335c:	bne.n	3356 <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    335e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3362:	cmp	r3, #0
    3364:	bne.w	3148 <isr+0x2c>
    3368:	b.n	31e6 <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    336a:	lsrs	r1, r2, #16
    336c:	cmp	r1, #7
    336e:	beq.w	35ee <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    3372:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3376:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    337a:	cmp	r3, #0
    337c:	bne.w	3148 <isr+0x2c>
    3380:	b.n	31e6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3382:	movw	r7, #770	; 0x302
    3386:	cmp	r1, r7
    3388:	beq.w	34ec <isr+0x3d0>
    338c:	cmp.w	r1, #1280	; 0x500
    3390:	bne.n	3372 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3392:	ldr	r2, [pc, #124]	; (3410 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3394:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3396:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3398:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    339a:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    339c:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    339e:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    33a0:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    33a4:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    33a8:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    33aa:	orr.w	r3, r1, #65536	; 0x10000
    33ae:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    33b2:	ldr.w	r3, [r4, #432]	; 0x1b0
    33b6:	cmp	r3, #0
    33b8:	bne.n	33b2 <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    33ba:	lsrs	r3, r0, #16
    33bc:	lsls	r3, r3, #25
    33be:	orr.w	r3, r3, #16777216	; 0x1000000
    33c2:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    33c6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    33ca:	cmp	r3, #0
    33cc:	bne.w	3148 <isr+0x2c>
    33d0:	b.n	31e6 <isr+0xca>
    33d2:	nop
    33d4:	.word	0x402e0000
    33d8:	.word	0x20003000
    33dc:	.word	0x402e01c0
    33e0:	.word	0x20001ac8
    33e4:	.word	0x20001aa4
    33e8:	.word	0x20001aa0
    33ec:	.word	0x20001aac
    33f0:	.word	0x20001ab0
    33f4:	.word	0x20001ab8
    33f8:	.word	0x20001aa8
    33fc:	.word	0x20001ab4
    3400:	.word	0x20001ad8
    3404:	.word	0x000200c8
    3408:	.word	0x00cc0002
    340c:	.word	0x00c80002
    3410:	.word	0x20002020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    3414:	movw	r3, #8737	; 0x2221
    3418:	cmp	r1, r3
    341a:	beq.n	34d4 <isr+0x3b8>
    341c:	movw	r3, #8993	; 0x2321
    3420:	cmp	r1, r3
    3422:	bne.n	3372 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3424:	ldr	r3, [pc, #724]	; (36fc <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3426:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    3428:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    342a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    342c:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    342e:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3430:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3432:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3434:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3438:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    343c:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    343e:	orr.w	r3, r2, #65536	; 0x10000
    3442:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3446:	ldr.w	r3, [r4, #432]	; 0x1b0
    344a:	cmp	r3, #0
    344c:	bne.n	3446 <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    344e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3452:	cmp	r3, #0
    3454:	bne.w	3148 <isr+0x2c>
    3458:	b.n	31e6 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    345a:	ldr	r2, [pc, #676]	; (3700 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    345c:	movs	r1, #2
    345e:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    3460:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    3462:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    3464:	bl	307c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3468:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    346c:	cmp	r3, #0
    346e:	bne.w	3148 <isr+0x2c>
    3472:	b.n	31e6 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    3474:	uxth	r2, r2
    3476:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    347a:	cmp	r3, #7
    347c:	bhi.w	3372 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    3480:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    3484:	mov.w	r3, r3, lsl #2
    3488:	ldr	r2, [pc, #632]	; (3704 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    348a:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    348e:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    3492:	add	r2, r3
    3494:	ldr	r3, [r2, #0]
    3496:	ite	ne
    3498:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    349c:	biceq.w	r3, r3, #1
    34a0:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    34a2:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    34a4:	ldr	r3, [pc, #596]	; (36fc <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    34a6:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    34a8:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    34aa:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    34ac:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    34ae:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    34b2:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    34b6:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    34b8:	orr.w	r3, r2, #65536	; 0x10000
    34bc:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    34c0:	ldr.w	r3, [r4, #432]	; 0x1b0
    34c4:	cmp	r3, #0
    34c6:	bne.n	34c0 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    34c8:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    34cc:	cmp	r3, #0
    34ce:	bne.w	3148 <isr+0x2c>
    34d2:	b.n	31e6 <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    34d4:	uxth	r2, r2
    34d6:	cmp	r2, #0
    34d8:	bne.n	3424 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    34da:	ldr	r3, [pc, #556]	; (3708 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    34dc:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    34e0:	ldr	r2, [pc, #552]	; (370c <isr+0x5f0>)
    34e2:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    34e4:	ldr	r3, [pc, #552]	; (3710 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    34e6:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    34e8:	strb	r0, [r3, #0]
    34ea:	b.n	3424 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    34ec:	uxth	r2, r2
    34ee:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    34f2:	cmp	r3, #7
    34f4:	bhi.w	3372 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    34f8:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    34fc:	mov.w	r3, r3, lsl #2
    3500:	ldr	r2, [pc, #512]	; (3704 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3502:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3506:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    350a:	add	r2, r3
    350c:	ldr	r3, [r2, #0]
    350e:	ite	ne
    3510:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3514:	orreq.w	r3, r3, #1
    3518:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    351a:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    351c:	ldr	r3, [pc, #476]	; (36fc <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    351e:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3520:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3522:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3524:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3526:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    352a:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    352e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3530:	orr.w	r3, r2, #65536	; 0x10000
    3534:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3538:	ldr.w	r3, [r4, #432]	; 0x1b0
    353c:	cmp	r3, #0
    353e:	bne.n	3538 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3540:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3544:	cmp	r3, #0
    3546:	bne.w	3148 <isr+0x2c>
    354a:	b.n	31e6 <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    354c:	ldr	r2, [pc, #452]	; (3714 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    354e:	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3550:	ldr	r3, [pc, #428]	; (3700 <isr+0x5e4>)
    3552:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    3554:	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3556:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    3558:	bl	307c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    355c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3560:	cmp	r3, #0
    3562:	bne.w	3148 <isr+0x2c>
    3566:	b.n	31e6 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3568:	ldr	r3, [pc, #428]	; (3718 <isr+0x5fc>)
    356a:	ldr	r1, [r3, #4]
    356c:	cmp	r1, #0
    356e:	beq.w	3372 <isr+0x256>
    3572:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3574:	uxth.w	lr, r2
    3578:	b.n	3584 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    357a:	adds	r3, #12
    357c:	ldr	r1, [r3, #4]
    357e:	cmp	r1, #0
    3580:	beq.w	3372 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3584:	ldrh	r7, [r3, #0]
    3586:	cmp	r7, r0
    3588:	bne.n	357a <isr+0x45e>
    358a:	ldrh	r7, [r3, #2]
    358c:	cmp	r7, lr
    358e:	bne.n	357a <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    3590:	lsrs	r7, r0, #8
    3592:	cmp	r7, #3
    3594:	beq.w	376a <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    3598:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    359a:	lsrs	r2, r2, #16
    359c:	cmp	r3, r2
    359e:	it	cs
    35a0:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    35a2:	cmp.w	r0, #512	; 0x200
    35a6:	beq.w	374c <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    35aa:	cmp.w	r0, #1792	; 0x700
    35ae:	beq.w	36c8 <isr+0x5ac>
    35b2:	ldr	r7, [pc, #360]	; (371c <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    35b4:	mov	r2, r3
    35b6:	str	r3, [sp, #4]
    35b8:	mov	r0, r7
    35ba:	bl	249c <memcpy>
    35be:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    35c0:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    35c4:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    35c6:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    35ca:	ldr	r1, [pc, #340]	; (3720 <isr+0x604>)
    35cc:	str	r2, [r1, #0]
		location += 32;
    35ce:	adds	r2, #32
	} while (location < end_addr);
    35d0:	cmp	r7, r2
    35d2:	bhi.n	35ca <isr+0x4ae>
	asm("dsb");
    35d4:	dsb	sy
	asm("isb");
    35d8:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    35dc:	ldr	r0, [pc, #316]	; (371c <isr+0x600>)
    35de:	mov	r1, r3
    35e0:	bl	307c <endpoint0_transmit.constprop.1>
    35e4:	b.n	31de <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    35e6:	lsls	r3, r1, #31
    35e8:	bpl.w	31d6 <isr+0xba>
    35ec:	b.n	31d2 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    35ee:	ldr	r7, [pc, #308]	; (3724 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    35f0:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    35f4:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    35f6:	ldr	r1, [pc, #304]	; (3728 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    35f8:	ldr	r3, [pc, #304]	; (372c <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    35fa:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    35fc:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3600:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    3602:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    3604:	ldr	r1, [pc, #296]	; (3730 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3606:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    360a:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    360c:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3610:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3614:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3616:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    361a:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    361e:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3622:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3626:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3628:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    362c:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    362e:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    3630:	ldr.w	r3, [r4, #432]	; 0x1b0
    3634:	cmp	r3, #0
    3636:	bne.n	3630 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    3638:	ldr	r2, [pc, #192]	; (36fc <isr+0x5e0>)
    363a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    363c:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3640:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3642:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3644:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3648:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    364a:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    364c:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3650:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3654:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3656:	orr.w	r3, r1, r0
    365a:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    365e:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    3662:	ldr.w	r3, [r4, #432]	; 0x1b0
    3666:	cmp	r3, #0
    3668:	bne.n	3662 <isr+0x546>
    366a:	b.n	31de <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    366c:	ldr	r0, [pc, #180]	; (3724 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    366e:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3672:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    3674:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    3676:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    3678:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    367a:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    367c:	bne.w	32a0 <isr+0x184>
    3680:	uxth	r1, r0
    3682:	cmp	r1, #0
    3684:	bne.w	32a0 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    3688:	ldr	r1, [pc, #164]	; (3730 <isr+0x614>)
    368a:	ldr	r4, [pc, #168]	; (3734 <isr+0x618>)
    368c:	ldmia	r1, {r0, r1}
    368e:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    3690:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    3692:	str	r0, [r4, #0]
    3694:	strh	r1, [r4, #4]
    3696:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    3698:	bne.w	32a0 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    369c:	cpsid	i
	sof_usage |= (1 << interface);
    369e:	ldr	r0, [pc, #152]	; (3738 <isr+0x61c>)
    36a0:	ldrb	r1, [r0, #0]
    36a2:	orr.w	r1, r1, #4
    36a6:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    36a8:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    36ac:	lsls	r0, r1, #24
    36ae:	bmi.n	36be <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    36b0:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    36b4:	movs	r0, #128	; 0x80
    36b6:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    36ba:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    36be:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    36c0:	ldr	r2, [pc, #120]	; (373c <isr+0x620>)
    36c2:	movs	r1, #80	; 0x50
    36c4:	strb	r1, [r2, #0]
    36c6:	b.n	32a0 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    36c8:	ldr	r0, [pc, #116]	; (3740 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    36ca:	mov	r2, r3
    36cc:	ldr	r7, [pc, #76]	; (371c <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    36ce:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    36d2:	ldr	r1, [pc, #112]	; (3744 <isr+0x628>)
    36d4:	ldr	r0, [pc, #112]	; (3748 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    36d6:	str	r3, [sp, #4]
    36d8:	cmp.w	lr, #0
    36dc:	it	eq
    36de:	moveq	r1, r0
    36e0:	mov	r0, r7
    36e2:	bl	249c <memcpy>
					usb_descriptor_buffer[1] = 7;
    36e6:	movs	r2, #7
    36e8:	ldr	r3, [sp, #4]
    36ea:	strb	r2, [r7, #1]
    36ec:	b.n	35c0 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    36ee:	ldr.w	r2, [r3, #328]	; 0x148
    36f2:	bic.w	r2, r2, #128	; 0x80
    36f6:	str.w	r2, [r3, #328]	; 0x148
    36fa:	b.n	328a <isr+0x16e>
    36fc:	.word	0x20002020
    3700:	.word	0x20001ac8
    3704:	.word	0x402e01c0
    3708:	.word	0x20001ae4
    370c:	.word	0x20001b88
    3710:	.word	0x20001a08
    3714:	.word	0x20001ad8
    3718:	.word	0x200000e0
    371c:	.word	0x20203000
    3720:	.word	0xe000ef70
    3724:	.word	0x20001ac0
    3728:	.word	0x00070080
    372c:	.word	0x20002000
    3730:	.word	0x20001ad0
    3734:	.word	0x20001b80
    3738:	.word	0x20001aa8
    373c:	.word	0x20001ab8
    3740:	.word	0x20001ab0
    3744:	.word	0x60001af8
    3748:	.word	0x60001b3c

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    374c:	ldr	r0, [pc, #40]	; (3778 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    374e:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    3750:	ldr	r1, [pc, #40]	; (377c <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    3752:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    3754:	ldr	r0, [pc, #40]	; (3780 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    3756:	str	r3, [sp, #4]
    3758:	cmp	r7, #0
    375a:	it	eq
    375c:	moveq	r1, r0
    375e:	ldr	r0, [pc, #36]	; (3784 <isr+0x668>)
    3760:	bl	249c <memcpy>
    3764:	ldr	r7, [pc, #28]	; (3784 <isr+0x668>)
    3766:	ldr	r3, [sp, #4]
    3768:	b.n	35c0 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    376a:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    376c:	ldrb	r3, [r1, #0]
    376e:	cmp	r3, r2
    3770:	it	cs
    3772:	movcs	r3, r2
    3774:	b.n	35aa <isr+0x48e>
    3776:	nop
    3778:	.word	0x20001ab0
    377c:	.word	0x60001b3c
    3780:	.word	0x60001af8
    3784:	.word	0x20203000

00003788 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3788:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    378a:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    378e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3792:	ite	ne
    3794:	movne	r7, #0
    3796:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    379a:	cmp	r2, #2
    379c:	bls.n	37a2 <usb_config_rx+0x1a>
    379e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    37a2:	mov.w	sl, r0, lsl #7
    37a6:	ldr.w	r9, [pc, #64]	; 37e8 <usb_config_rx+0x60>
    37aa:	mov	r5, r1
    37ac:	mov	r4, r0
    37ae:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    37b2:	movs	r1, #0
    37b4:	movs	r2, #64	; 0x40
    37b6:	mov	r8, r3
    37b8:	mov	r0, r6
    37ba:	bl	5d60 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    37be:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    37c0:	orr.w	r1, r7, r5, lsl #16
    37c4:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    37c8:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    37cc:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    37ce:	cmp.w	r8, #0
    37d2:	beq.n	379e <usb_config_rx+0x16>
    37d4:	ldr	r3, [pc, #12]	; (37e4 <usb_config_rx+0x5c>)
    37d6:	lsls	r0, r4
    37d8:	ldr	r4, [r3, #0]
    37da:	orrs	r0, r4
    37dc:	str	r0, [r3, #0]
    37de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37e2:	nop
    37e4:	.word	0x20001aa4
    37e8:	.word	0x20003000

000037ec <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    37ec:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    37ee:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    37f2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    37f6:	ite	ne
    37f8:	movne	r7, #0
    37fa:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    37fe:	cmp	r2, #2
    3800:	bls.n	3806 <usb_config_tx+0x1a>
    3802:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3806:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3808:	lsls	r5, r0, #7
    380a:	ldr.w	r9, [pc, #68]	; 3850 <usb_config_tx+0x64>
    380e:	mov	r8, r1
    3810:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3812:	movs	r1, #0
    3814:	mov	r4, r0
    3816:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3818:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    381c:	mov	r0, sl
    381e:	bl	5d60 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3822:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    3824:	orr.w	r1, r7, r8, lsl #16
    3828:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    382c:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3830:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    3834:	cmp	r6, #0
    3836:	beq.n	3802 <usb_config_tx+0x16>
    3838:	add.w	r0, r4, #16
    383c:	ldr	r3, [pc, #12]	; (384c <usb_config_tx+0x60>)
    383e:	lsls	r2, r0
    3840:	ldr	r0, [r3, #0]
    3842:	orrs	r2, r0
    3844:	str	r2, [r3, #0]
    3846:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    384a:	nop
    384c:	.word	0x20001aa4
    3850:	.word	0x20003000

00003854 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3854:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    3856:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    3858:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    385a:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    385e:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3860:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    3862:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    3864:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    3868:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    386c:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    3870:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    3874:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    3876:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    3878:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    387a:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    387c:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    387e:	pop	{r4, r5, r6, r7}
    3880:	bx	lr
    3882:	nop

00003884 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3884:	subs	r3, r0, #2
    3886:	cmp	r3, #2
    3888:	bls.n	388c <usb_transmit+0x8>
    388a:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    388c:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    388e:	ldr	r3, [pc, #24]	; (38a8 <usb_transmit+0x24>)
    3890:	add.w	r4, r0, #16
    3894:	movs	r5, #1
    3896:	mov	r2, r1
    3898:	add.w	r0, r3, r0, lsl #7
    389c:	lsl.w	r1, r5, r4
}
    38a0:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    38a2:	b.w	2fd4 <schedule_transfer>
    38a6:	nop
    38a8:	.word	0x20003040

000038ac <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    38ac:	subs	r3, r0, #2
    38ae:	cmp	r3, #2
    38b0:	bls.n	38b4 <usb_receive+0x8>
    38b2:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    38b4:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    38b6:	ldr	r3, [pc, #20]	; (38cc <usb_receive+0x20>)
    38b8:	movs	r4, #1
    38ba:	mov	r2, r1
    38bc:	lsl.w	r1, r4, r0
    38c0:	add.w	r0, r3, r0, lsl #7
}
    38c4:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    38c8:	b.w	2fd4 <schedule_transfer>
    38cc:	.word	0x20003000

000038d0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    38d0:	ldr	r0, [r0, #4]
#endif
}
    38d2:	bx	lr

000038d4 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    38d4:	cmp	r0, #0
    38d6:	beq.n	3988 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    38d8:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    38da:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38de:	sub	sp, #20
    38e0:	mov	fp, r0
    38e2:	ldr	r4, [pc, #168]	; (398c <delay+0xb8>)
    38e4:	ldr	r5, [pc, #168]	; (3990 <delay+0xbc>)
    38e6:	ldr	r6, [pc, #172]	; (3994 <delay+0xc0>)
    38e8:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    38ec:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    38f0:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    38f2:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    38f4:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    38f8:	cmp	r1, #0
    38fa:	bne.n	38ec <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    38fc:	ldr	r7, [pc, #152]	; (3998 <delay+0xc4>)
    38fe:	strd	r8, r9, [sp, #8]
    3902:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    3904:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3906:	ldr	r2, [pc, #148]	; (399c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    3908:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    390c:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    390e:	ldr	r2, [r2, #0]
    3910:	movs	r7, #1
    3912:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    3916:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    391a:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    391c:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    391e:	cmp	r3, r1
    3920:	it	eq
    3922:	cmpeq	r2, r8
    3924:	ite	cs
    3926:	movcs	sl, r8
    3928:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    392a:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    392e:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    3932:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3934:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3936:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    393a:	cmp	r3, #0
    393c:	bne.n	392e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    393e:	ldr	r0, [sp, #4]
    3940:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    3942:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3944:	ldr	r0, [pc, #84]	; (399c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3946:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    394a:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    394c:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3950:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    3954:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3958:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    395c:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    395e:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3960:	cmp	r1, r3
    3962:	it	eq
    3964:	cmpeq	r0, r8
    3966:	ite	cs
    3968:	movcs	r3, r8
    396a:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    396c:	add	r2, r3
    396e:	cmp	r2, lr
    3970:	bcc.n	3982 <delay+0xae>
			if (--msec == 0) return;
    3972:	subs.w	fp, fp, #1
			start += 1000;
    3976:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    397a:	bne.n	392e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    397c:	add	sp, #20
    397e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    3982:	bl	4244 <yield>
	}
    3986:	b.n	392e <delay+0x5a>
    3988:	bx	lr
    398a:	nop
    398c:	.word	0x20003280
    3990:	.word	0x20001ae4
    3994:	.word	0x20001adc
    3998:	.word	0xe0001004
    399c:	.word	0x20001ae0

000039a0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    39a0:	ldr	r2, [pc, #72]	; (39ec <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    39a2:	ldr	r3, [pc, #76]	; (39f0 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    39a4:	ldr.w	r0, [r2, #544]	; 0x220
    39a8:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    39ac:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    39ae:	push	{r4, lr}
    39b0:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    39b2:	bhi.n	39ba <usb_init_serialnumber+0x1a>
    39b4:	add.w	r0, r0, r0, lsl #2
    39b8:	lsls	r0, r0, #1
    39ba:	ldr	r4, [pc, #56]	; (39f4 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    39bc:	add	r1, sp, #4
    39be:	movs	r2, #10
    39c0:	bl	3ad4 <ultoa>
    39c4:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    39c6:	movs	r3, #0
    39c8:	mov	r0, r4
		char c = buf[i];
    39ca:	ldrb.w	r2, [r1], #1
    39ce:	adds	r3, #1
		if (!c) break;
    39d0:	cbz	r2, 39e2 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    39d2:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    39d4:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    39d8:	bne.n	39ca <usb_init_serialnumber+0x2a>
    39da:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    39dc:	strb	r3, [r4, #0]
}
    39de:	add	sp, #16
    39e0:	pop	{r4, pc}
    39e2:	lsls	r3, r3, #1
    39e4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    39e6:	strb	r3, [r4, #0]
}
    39e8:	add	sp, #16
    39ea:	pop	{r4, pc}
    39ec:	.word	0x401f4400
    39f0:	.word	0x0098967f
    39f4:	.word	0x20000b38

000039f8 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    39f8:	movs	r0, #4
    39fa:	mov	r1, lr
    39fc:	tst	r0, r1
    39fe:	beq.n	3a08 <_MSP>
    3a00:	mrs	r0, PSP
    3a04:	b.w	3a18 <HardFault_HandlerC>

00003a08 <_MSP>:
    3a08:	mrs	r0, MSP
    3a0c:	b.w	3a18 <HardFault_HandlerC>

00003a10 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    3a10:	bx	lr
    3a12:	nop

00003a14 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    3a14:	bx	lr
    3a16:	nop

00003a18 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3a18:	ldr	r3, [pc, #108]	; (3a88 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    3a1a:	movs	r1, #5
    3a1c:	ldr	r2, [pc, #108]	; (3a8c <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    3a1e:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    3a20:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    3a22:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    3a26:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    3a28:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    3a2c:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3a2e:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    3a30:	ldr	r4, [pc, #92]	; (3a90 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3a32:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    3a34:	ldr	r0, [pc, #92]	; (3a94 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    3a36:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    3a38:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    3a3c:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    3a40:	ldr	r3, [r4, #0]
    3a42:	cmp	r3, r0
    3a44:	bls.n	3a4c <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    3a46:	ldr	r0, [pc, #80]	; (3a98 <HardFault_HandlerC+0x80>)
    3a48:	bl	2d10 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    3a4c:	ldr	r5, [pc, #56]	; (3a88 <HardFault_HandlerC+0x70>)
    3a4e:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    3a50:	movs	r0, #0
    3a52:	ldr	r2, [pc, #72]	; (3a9c <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    3a54:	ldr	r1, [pc, #72]	; (3aa0 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    3a56:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    3a5a:	str	r0, [sp, #4]
    3a5c:	ldr	r3, [sp, #4]
    3a5e:	cmp	r3, r2
    3a60:	bhi.n	3a6e <HardFault_HandlerC+0x56>
    3a62:	ldr	r3, [sp, #4]
    3a64:	adds	r3, #1
    3a66:	str	r3, [sp, #4]
    3a68:	ldr	r3, [sp, #4]
    3a6a:	cmp	r3, r2
    3a6c:	bls.n	3a62 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    3a6e:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    3a72:	str	r0, [sp, #4]
    3a74:	ldr	r3, [sp, #4]
    3a76:	cmp	r3, r1
    3a78:	bhi.n	3a56 <HardFault_HandlerC+0x3e>
    3a7a:	ldr	r3, [sp, #4]
    3a7c:	adds	r3, #1
    3a7e:	str	r3, [sp, #4]
    3a80:	ldr	r3, [sp, #4]
    3a82:	cmp	r3, r1
    3a84:	bls.n	3a7a <HardFault_HandlerC+0x62>
    3a86:	b.n	3a56 <HardFault_HandlerC+0x3e>
    3a88:	.word	0x401bc000
    3a8c:	.word	0x401f8000
    3a90:	.word	0x20000b20
    3a94:	.word	0x23c345ff
    3a98:	.word	0x11e1a300
    3a9c:	.word	0x000f423f
    3aa0:	.word	0x0089543f

00003aa4 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    3aa4:	ldr	r2, [pc, #36]	; (3acc <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    3aa6:	push	{r3, lr}
        char *prev = __brkval;
    3aa8:	ldr	r3, [r2, #0]
        if (incr != 0) {
    3aaa:	cbz	r0, 3ab6 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    3aac:	add	r0, r3
    3aae:	ldr	r1, [pc, #32]	; (3ad0 <_sbrk+0x2c>)
    3ab0:	cmp	r0, r1
    3ab2:	bhi.n	3aba <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    3ab4:	str	r0, [r2, #0]
        }
        return prev;
}
    3ab6:	mov	r0, r3
    3ab8:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    3aba:	bl	5690 <__errno>
    3abe:	movs	r2, #12
                        return (void *)-1;
    3ac0:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    3ac4:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    3ac6:	mov	r0, r3
    3ac8:	pop	{r3, pc}
    3aca:	nop
    3acc:	.word	0x20000b50
    3ad0:	.word	0x20280000

00003ad4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3ad4:	push	{r4, r5, r6, r7}
    3ad6:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    3ad8:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3ada:	mov	r7, r6
    3adc:	b.n	3ae0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3ade:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    3ae0:	udiv	r3, r0, r2
    3ae4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3ae8:	add.w	r4, r0, #55	; 0x37
    3aec:	cmp	r0, #9
    3aee:	add.w	r0, r0, #48	; 0x30
    3af2:	uxtb	r4, r4
    3af4:	it	ls
    3af6:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    3af8:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3afa:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    3afe:	cmp	r3, #0
    3b00:	bne.n	3ade <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    3b02:	adds	r2, r1, r5
    3b04:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    3b06:	cbz	r5, 3b1c <ultoa+0x48>
    3b08:	adds	r3, #1
		t = buf[j];
    3b0a:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    3b0e:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3b10:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    3b12:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3b14:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    3b16:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    3b1a:	blt.n	3b08 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    3b1c:	mov	r0, r1
    3b1e:	pop	{r4, r5, r6, r7}
    3b20:	bx	lr
    3b22:	nop

00003b24 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    3b24:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    3b26:	ldr	r2, [pc, #24]	; (3b40 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    3b28:	movs	r1, #7
    3b2a:	ldr	r3, [pc, #24]	; (3b44 <Panic_Temp_isr+0x20>)
    3b2c:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    3b2e:	ldr	r3, [r2, #56]	; 0x38
    3b30:	orr.w	r3, r3, #64	; 0x40
    3b34:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    3b36:	dsb	sy
  while (1) asm ("wfi");
    3b3a:	wfi
    3b3c:	b.n	3b3a <Panic_Temp_isr+0x16>
    3b3e:	nop
    3b40:	.word	0x400d4000
    3b44:	.word	0x400ac000

00003b48 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    3b48:	lsls	r0, r0, #4
    3b4a:	ldr	r3, [pc, #60]	; (3b88 <digitalWrite.part.0+0x40>)
    3b4c:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    3b4e:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    3b50:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    3b52:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    3b54:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    3b56:	tst	r4, r0
    3b58:	beq.n	3b66 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    3b5a:	cbz	r1, 3b74 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    3b5c:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3b60:	ldr.w	r4, [sp], #4
    3b64:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3b66:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    3b68:	cbnz	r1, 3b7e <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3b6a:	ldr	r2, [pc, #32]	; (3b8c <digitalWrite.part.0+0x44>)
		}
	}
}
    3b6c:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3b70:	str	r2, [r3, #0]
		}
	}
}
    3b72:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    3b74:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3b78:	ldr.w	r4, [sp], #4
    3b7c:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3b7e:	ldr	r2, [pc, #16]	; (3b90 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3b80:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3b84:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3b86:	bx	lr
    3b88:	.word	0x2000014c
    3b8c:	.word	0x00013038
    3b90:	.word	0x0001f038

00003b94 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    3b94:	cmp	r0, #54	; 0x36
    3b96:	bhi.n	3b9c <digitalWrite+0x8>
    3b98:	b.w	3b48 <digitalWrite.part.0>
    3b9c:	bx	lr
    3b9e:	nop

00003ba0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    3ba0:	cmp	r0, #54	; 0x36
    3ba2:	bhi.n	3bde <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    3ba4:	lsls	r0, r0, #4
    3ba6:	ldr	r2, [pc, #104]	; (3c10 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3ba8:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    3baa:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3bae:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    3bb0:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3bb2:	beq.n	3be0 <pinMode+0x40>
    3bb4:	cmp	r1, #4
    3bb6:	beq.n	3be0 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3bb8:	ldr	r4, [r3, #12]
    3bba:	ldr	r2, [r0, #4]
    3bbc:	bic.w	r2, r2, r4
    3bc0:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3bc2:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    3bc4:	cbz	r1, 3c02 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    3bc6:	cmp	r1, #2
    3bc8:	beq.n	3c08 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    3bca:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    3bcc:	ldr	r3, [r3, #4]
}
    3bce:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3bd2:	ite	eq
    3bd4:	ldreq	r1, [pc, #60]	; (3c14 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    3bd6:	ldrne	r1, [pc, #64]	; (3c18 <pinMode+0x78>)
    3bd8:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    3bda:	movs	r2, #21
    3bdc:	str	r2, [r3, #0]
}
    3bde:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3be0:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    3be2:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3be4:	ldr	r4, [r0, #4]
    3be6:	orr.w	r2, r2, r4
    3bea:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3bec:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    3bee:	beq.n	3c02 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    3bf0:	movw	r1, #2104	; 0x838
    3bf4:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    3bf6:	ldr	r3, [r3, #4]
    3bf8:	movs	r2, #21
}
    3bfa:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    3bfe:	str	r2, [r3, #0]
}
    3c00:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3c02:	movs	r1, #56	; 0x38
    3c04:	str	r1, [r2, #0]
    3c06:	b.n	3bf6 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3c08:	ldr	r1, [pc, #16]	; (3c1c <pinMode+0x7c>)
    3c0a:	str	r1, [r2, #0]
    3c0c:	b.n	3bf6 <pinMode+0x56>
    3c0e:	nop
    3c10:	.word	0x2000014c
    3c14:	.word	0x00013038
    3c18:	.word	0x00010038
    3c1c:	.word	0x0001f038

00003c20 <flexpwmFrequency>:
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
    3c20:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
    3c24:	mov.w	lr, r1, lsl #1
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    3c28:	ldr	r2, [pc, #224]	; (3d0c <flexpwmFrequency+0xec>)
    3c2a:	vmov.f32	s14, #96	; 0x3f000000  0.5
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    3c2e:	mov.w	ip, #1
	uint32_t olddiv = p->SM[submodule].VAL1;
    3c32:	add.w	r3, lr, r1
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    3c36:	lsl.w	r7, ip, r1
	uint32_t olddiv = p->SM[submodule].VAL1;
    3c3a:	add.w	r3, r0, r3, lsl #5
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
    3c3e:	uxth	r6, r7
	uint32_t olddiv = p->SM[submodule].VAL1;
    3c40:	ldrh	r3, [r3, #14]
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    3c42:	vldr	s15, [r2]
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
    3c46:	uxth	r5, r3
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    3c48:	vcvt.f32.u32	s15, s15
    3c4c:	vdiv.f32	s0, s15, s0
    3c50:	vadd.f32	s0, s0, s14
    3c54:	vcvt.u32.f32	s15, s0
    3c58:	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
    3c5c:	cmp.w	r3, #65536	; 0x10000
    3c60:	bcc.n	3d00 <flexpwmFrequency+0xe0>
    3c62:	movs	r2, #0
    3c64:	movw	r4, #65535	; 0xffff
    3c68:	b.n	3c6e <flexpwmFrequency+0x4e>
    3c6a:	cmp	r2, #6
    3c6c:	bhi.n	3c76 <flexpwmFrequency+0x56>
		newdiv = newdiv >> 1;
    3c6e:	lsrs	r3, r3, #1
		prescale = prescale + 1;
    3c70:	adds	r2, #1
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
    3c72:	cmp	r3, r4
    3c74:	bhi.n	3c6a <flexpwmFrequency+0x4a>
		newdiv = newdiv >> 1;
		prescale = prescale + 1;
	}
	if (newdiv > 65535) {
    3c76:	cmp.w	r3, #65536	; 0x10000
    3c7a:	mov.w	r2, r2, lsl #4
    3c7e:	bcs.n	3cf0 <flexpwmFrequency+0xd0>
    3c80:	orr.w	r2, r2, #1024	; 0x400
    3c84:	uxth	r2, r2
    3c86:	add.w	ip, r3, #4294967295
    3c8a:	uxth.w	ip, ip
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    3c8e:	ldrh.w	r8, [r0, #392]	; 0x188
    3c92:	lsls	r6, r6, #4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    3c94:	and.w	r4, r7, #15
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    3c98:	add	r1, lr
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    3c9a:	uxtb	r6, r6
    3c9c:	uxth.w	r7, r8
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    3ca0:	add.w	r1, r0, r1, lsl #5
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    3ca4:	orrs	r6, r7
    3ca6:	strh.w	r6, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    3caa:	strh	r2, [r1, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    3cac:	strh.w	ip, [r1, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    3cb0:	ldrh	r2, [r1, #10]
    3cb2:	uxth	r2, r2
    3cb4:	mul.w	r2, r3, r2
    3cb8:	udiv	r2, r2, r5
    3cbc:	uxth	r2, r2
    3cbe:	strh	r2, [r1, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    3cc0:	ldrh	r2, [r1, #22]
    3cc2:	uxth	r2, r2
    3cc4:	mul.w	r2, r3, r2
    3cc8:	udiv	r2, r2, r5
    3ccc:	uxth	r2, r2
    3cce:	strh	r2, [r1, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    3cd0:	ldrh	r2, [r1, #30]
    3cd2:	uxth	r2, r2
    3cd4:	mul.w	r3, r3, r2
    3cd8:	udiv	r3, r3, r5
    3cdc:	uxth	r3, r3
    3cde:	strh	r3, [r1, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    3ce0:	ldrh.w	r3, [r0, #392]	; 0x188
    3ce4:	uxth	r3, r3
    3ce6:	orrs	r4, r3
    3ce8:	strh.w	r4, [r0, #392]	; 0x188
    3cec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cf0:	orr.w	r2, r2, #1024	; 0x400
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
		newdiv = newdiv >> 1;
		prescale = prescale + 1;
	}
	if (newdiv > 65535) {
    3cf4:	movw	ip, #65534	; 0xfffe
		newdiv = 65535;
    3cf8:	movw	r3, #65535	; 0xffff
    3cfc:	uxth	r2, r2
    3cfe:	b.n	3c8e <flexpwmFrequency+0x6e>
	} else if (newdiv < 2) {
    3d00:	cmp	r3, #1
    3d02:	mov.w	r2, #1024	; 0x400
    3d06:	bhi.n	3c86 <flexpwmFrequency+0x66>
		newdiv = 2;
    3d08:	movs	r3, #2
    3d0a:	b.n	3c8e <flexpwmFrequency+0x6e>
    3d0c:	.word	0x20000b1c

00003d10 <quadtimerFrequency>:
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    3d10:	ldr	r3, [pc, #136]	; (3d9c <quadtimerFrequency+0x8c>)
    3d12:	vmov.f32	s14, #96	; 0x3f000000  0.5
    3d16:	vldr	s15, [r3]
    3d1a:	vcvt.f32.u32	s15, s15
	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
    3d1e:	push	{r4, r5}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    3d20:	vdiv.f32	s0, s15, s0
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    3d24:	movw	r4, #65534	; 0xfffe
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    3d28:	vadd.f32	s0, s0, s14
    3d2c:	vcvt.u32.f32	s15, s0
    3d30:	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    3d34:	cmp	r3, r4
    3d36:	bls.n	3d8e <quadtimerFrequency+0x7e>
    3d38:	movs	r2, #0
    3d3a:	b.n	3d40 <quadtimerFrequency+0x30>
    3d3c:	cmp	r2, #6
    3d3e:	bhi.n	3d48 <quadtimerFrequency+0x38>
		newdiv = newdiv >> 1; 
    3d40:	lsrs	r3, r3, #1
		prescale = prescale + 1;
    3d42:	adds	r2, #1
void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
    3d44:	cmp	r3, r4
    3d46:	bhi.n	3d3c <quadtimerFrequency+0x2c>
    3d48:	adds	r2, #8
		newdiv = newdiv >> 1; 
		prescale = prescale + 1;
	}
	if (newdiv > 65534) {
    3d4a:	movw	r5, #65534	; 0xfffe
    3d4e:	movw	r4, #8230	; 0x2026
    3d52:	lsls	r2, r2, #9
    3d54:	cmp	r3, r5
    3d56:	and.w	r2, r2, #7680	; 0x1e00
		newdiv = 65534;
    3d5a:	it	hi
    3d5c:	movhi	r3, r5
    3d5e:	orrs	r4, r2
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    3d60:	add.w	r1, r0, r1, lsl #5
    3d64:	ldrh	r5, [r1, #16]
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    3d66:	ldrh	r2, [r1, #6]
		newdiv = 65534;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    3d68:	uxth	r5, r5
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    3d6a:	uxth	r2, r2
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    3d6c:	mul.w	r0, r5, r3
    3d70:	rsb	r2, r2, #65537	; 0x10001
    3d74:	add	r2, r5
    3d76:	udiv	r2, r0, r2
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
    3d7a:	subs	r3, r3, r2
	p->CH[submodule].CMPLD1 = high;
    3d7c:	uxth	r2, r2
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
    3d7e:	rsb	r3, r3, #1
    3d82:	uxth	r3, r3
    3d84:	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    3d86:	strh	r2, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    3d88:	strh	r4, [r1, #12]
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
}
    3d8a:	pop	{r4, r5}
    3d8c:	bx	lr
		newdiv = newdiv >> 1; 
		prescale = prescale + 1;
	}
	if (newdiv > 65534) {
		newdiv = 65534;
	} else if (newdiv < 2) {
    3d8e:	cmp	r3, #1
    3d90:	movw	r4, #12326	; 0x3026
		newdiv = 2;
    3d94:	it	ls
    3d96:	movls	r3, #2
    3d98:	b.n	3d60 <quadtimerFrequency+0x50>
    3d9a:	nop
    3d9c:	.word	0x20000b1c

00003da0 <analogWriteFrequency>:

void analogWriteFrequency(uint8_t pin, float frequency)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    3da0:	cmp	r0, #54	; 0x36
    3da2:	bhi.n	3db8 <analogWriteFrequency+0x18>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
    3da4:	sxth	r0, r0
    3da6:	ldr	r3, [pc, #76]	; (3df4 <analogWriteFrequency+0x54>)
	if (info->type == 1) {
    3da8:	ldrb.w	r2, [r3, r0, lsl #2]
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
    3dac:	add.w	r3, r3, r0, lsl #2
	if (info->type == 1) {
    3db0:	cmp	r2, #1
    3db2:	beq.n	3dba <analogWriteFrequency+0x1a>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
    3db4:	cmp	r2, #2
    3db6:	beq.n	3dd4 <analogWriteFrequency+0x34>
    3db8:	bx	lr
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    3dba:	ldrb	r1, [r3, #1]
    3dbc:	ubfx	r2, r1, #4, #2
    3dc0:	cmp	r2, #3
    3dc2:	beq.n	3dec <analogWriteFrequency+0x4c>
    3dc4:	ldr	r0, [pc, #48]	; (3df8 <analogWriteFrequency+0x58>)
    3dc6:	ldr.w	r0, [r0, r2, lsl #2]
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    3dca:	ldrb	r2, [r3, #2]
    3dcc:	and.w	r1, r1, #3
    3dd0:	b.w	3c20 <flexpwmFrequency>
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    3dd4:	ldrb	r1, [r3, #1]
    3dd6:	ubfx	r3, r1, #4, #2
    3dda:	cmp	r3, #3
    3ddc:	beq.n	3df0 <analogWriteFrequency+0x50>
    3dde:	ldr	r2, [pc, #28]	; (3dfc <analogWriteFrequency+0x5c>)
    3de0:	ldr.w	r0, [r2, r3, lsl #2]
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    3de4:	and.w	r1, r1, #3
    3de8:	b.w	3d10 <quadtimerFrequency>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
    3dec:	ldr	r0, [pc, #16]	; (3e00 <analogWriteFrequency+0x60>)
    3dee:	b.n	3dca <analogWriteFrequency+0x2a>
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    3df0:	ldr	r0, [pc, #16]	; (3e04 <analogWriteFrequency+0x64>)
    3df2:	b.n	3de4 <analogWriteFrequency+0x44>
    3df4:	.word	0x200004bc
    3df8:	.word	0x20000598
    3dfc:	.word	0x200005a4
    3e00:	.word	0x403e8000
    3e04:	.word	0x401e8000

00003e08 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3e08:	ldr	r0, [pc, #656]	; (409c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3e0a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3e0e:	ldr	r3, [pc, #656]	; (40a0 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3e10:	ldr	r2, [r0, #120]	; 0x78
    3e12:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    3e16:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3e18:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    3e1a:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3e1c:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3e20:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3e24:	ldr	r4, [pc, #636]	; (40a4 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3e26:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3e2a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3e2c:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3e30:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3e32:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3e34:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3e38:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3e3c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3e40:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3e44:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3e48:	ldrh.w	r0, [r3, #392]	; 0x188
    3e4c:	uxth	r0, r0
    3e4e:	orr.w	r0, r0, #240	; 0xf0
    3e52:	strh.w	r0, [r3, #392]	; 0x188
    3e56:	add.w	r0, r1, r1, lsl #1
    3e5a:	ldr	r3, [pc, #580]	; (40a0 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    3e5c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3e5e:	movs	r5, #0
    3e60:	lsls	r0, r0, #5
    3e62:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3e64:	cmp	r1, #4
    3e66:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3e68:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3e6c:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    3e6e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3e70:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3e72:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3e74:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3e76:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3e78:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3e7a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3e7c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3e7e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3e80:	bne.n	3e56 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3e82:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3e86:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3e8a:	ldr	r3, [pc, #540]	; (40a8 <pwm_init+0x2a0>)
    3e8c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3e90:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3e92:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3e94:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3e98:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3e9a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3e9e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3ea2:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3ea6:	ldrh.w	r0, [r4, #392]	; 0x188
    3eaa:	uxth	r0, r0
    3eac:	orr.w	r0, r0, #3840	; 0xf00
    3eb0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3eb4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3eb8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3ebc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3ec0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3ec4:	ldrh.w	r0, [r3, #392]	; 0x188
    3ec8:	uxth	r0, r0
    3eca:	orr.w	r0, r0, #240	; 0xf0
    3ece:	strh.w	r0, [r3, #392]	; 0x188
    3ed2:	add.w	r0, r1, r1, lsl #1
    3ed6:	ldr	r3, [pc, #464]	; (40a8 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    3ed8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3eda:	movs	r5, #0
    3edc:	lsls	r0, r0, #5
    3ede:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3ee0:	cmp	r1, #4
    3ee2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3ee4:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3ee6:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3eea:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3eec:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3eee:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3ef0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3ef2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3ef4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3ef6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3ef8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3efa:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3efc:	bne.n	3ed2 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3efe:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3f02:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3f06:	ldr	r3, [pc, #420]	; (40ac <pwm_init+0x2a4>)
    3f08:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3f0c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3f0e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3f10:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3f14:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3f16:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3f1a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3f1e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3f22:	ldrh.w	r0, [r4, #392]	; 0x188
    3f26:	uxth	r0, r0
    3f28:	orr.w	r0, r0, #3840	; 0xf00
    3f2c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3f30:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3f34:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3f38:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3f3c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3f40:	ldrh.w	r0, [r3, #392]	; 0x188
    3f44:	uxth	r0, r0
    3f46:	orr.w	r0, r0, #240	; 0xf0
    3f4a:	strh.w	r0, [r3, #392]	; 0x188
    3f4e:	add.w	r0, r1, r1, lsl #1
    3f52:	ldr	r3, [pc, #344]	; (40ac <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    3f54:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3f56:	movs	r5, #0
    3f58:	lsls	r0, r0, #5
    3f5a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3f5c:	cmp	r1, #4
    3f5e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3f60:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3f62:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3f66:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3f68:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3f6a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3f6c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3f6e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3f70:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3f72:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3f74:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3f76:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3f78:	bne.n	3f4e <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3f7a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3f7e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3f82:	ldr	r3, [pc, #300]	; (40b0 <pwm_init+0x2a8>)
    3f84:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3f88:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3f8a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3f8c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3f90:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3f92:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3f96:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3f9a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3f9e:	ldrh.w	r0, [r4, #392]	; 0x188
    3fa2:	uxth	r0, r0
    3fa4:	orr.w	r0, r0, #3840	; 0xf00
    3fa8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3fac:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3fb0:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3fb4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3fb8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3fbc:	ldrh.w	r0, [r3, #392]	; 0x188
    3fc0:	uxth	r0, r0
    3fc2:	orr.w	r0, r0, #240	; 0xf0
    3fc6:	strh.w	r0, [r3, #392]	; 0x188
    3fca:	add.w	r0, r1, r1, lsl #1
    3fce:	ldr	r3, [pc, #224]	; (40b0 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    3fd0:	adds	r1, #1
    3fd2:	lsls	r0, r0, #5
    3fd4:	mov	r4, r3
    3fd6:	cmp	r1, #4
    3fd8:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3fda:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3fdc:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3fe0:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3fe2:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3fe4:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3fe6:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3fe8:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    3fea:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3fec:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3fee:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3ff0:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3ff2:	bne.n	3fca <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3ff4:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3ff8:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3ffa:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3ffc:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4000:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4002:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4006:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4008:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    400c:	orrs	r3, r7
    400e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4012:	ldrh.w	r3, [r4, #392]	; 0x188
    4016:	uxth	r3, r3
    4018:	orr.w	r3, r3, #3840	; 0xf00
    401c:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4020:	lsls	r0, r2, #5
    4022:	ldr	r3, [pc, #144]	; (40b4 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4024:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4026:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4028:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    402a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    402c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    402e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4030:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4032:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4036:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    4038:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    403a:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    403c:	bne.n	4020 <pwm_init+0x218>
    403e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4040:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4042:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4046:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    404a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    404c:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4050:	lsls	r0, r2, #5
    4052:	ldr	r3, [pc, #100]	; (40b8 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4054:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4056:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4058:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    405a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    405c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    405e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4060:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4062:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4064:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    4066:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4068:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    406a:	bne.n	4050 <pwm_init+0x248>
    406c:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    406e:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4070:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4074:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    4078:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    407a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    407e:	lsls	r0, r2, #5
    4080:	ldr	r3, [pc, #56]	; (40bc <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4082:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4084:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4086:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    4088:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    408a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    408c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    408e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4090:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4092:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    4094:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4096:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    4098:	bne.n	407e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    409a:	pop	{r4, r5, r6, r7, pc}
    409c:	.word	0x400fc000
    40a0:	.word	0x403dc000
    40a4:	.word	0xfc030000
    40a8:	.word	0x403e0000
    40ac:	.word	0x403e4000
    40b0:	.word	0x403e8000
    40b4:	.word	0x401dc000
    40b8:	.word	0x401e0000
    40bc:	.word	0x401e4000

000040c0 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
    40c0:	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    40c2:	ldr	r4, [pc, #80]	; (4114 <pit_isr()+0x54>)
    40c4:	ldr	r3, [r4, #0]
    40c6:	cbz	r3, 40ce <pit_isr()+0xe>
    40c8:	ldr	r2, [pc, #76]	; (4118 <pit_isr()+0x58>)
    40ca:	ldr	r1, [r2, #12]
    40cc:	cbnz	r1, 410a <pit_isr()+0x4a>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    40ce:	ldr	r3, [r4, #4]
    40d0:	cbz	r3, 40d8 <pit_isr()+0x18>
    40d2:	ldr	r2, [pc, #72]	; (411c <pit_isr()+0x5c>)
    40d4:	ldr	r1, [r2, #12]
    40d6:	cbnz	r1, 4102 <pit_isr()+0x42>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    40d8:	ldr	r3, [r4, #8]
    40da:	cbz	r3, 40e2 <pit_isr()+0x22>
    40dc:	ldr	r2, [pc, #64]	; (4120 <pit_isr()+0x60>)
    40de:	ldr	r1, [r2, #12]
    40e0:	cbnz	r1, 40fa <pit_isr()+0x3a>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    40e2:	ldr	r3, [r4, #12]
    40e4:	cbz	r3, 40f6 <pit_isr()+0x36>
    40e6:	ldr	r2, [pc, #60]	; (4124 <pit_isr()+0x64>)
    40e8:	ldr	r1, [r2, #12]
    40ea:	cbz	r1, 40f8 <pit_isr()+0x38>
    40ec:	movs	r1, #1
#endif
}
    40ee:	ldmia.w	sp!, {r4, lr}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    40f2:	str	r1, [r2, #12]
    40f4:	bx	r3
    40f6:	pop	{r4, pc}
    40f8:	pop	{r4, pc}
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    40fa:	movs	r1, #1
    40fc:	str	r1, [r2, #12]
    40fe:	blx	r3
    4100:	b.n	40e2 <pit_isr()+0x22>
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    4102:	movs	r1, #1
    4104:	str	r1, [r2, #12]
    4106:	blx	r3
    4108:	b.n	40d8 <pit_isr()+0x18>

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    410a:	movs	r1, #1
    410c:	str	r1, [r2, #12]
    410e:	blx	r3
    4110:	b.n	40ce <pit_isr()+0xe>
    4112:	nop
    4114:	.word	0x20001b00
    4118:	.word	0x40084100
    411c:	.word	0x40084110
    4120:	.word	0x40084120
    4124:	.word	0x40084130

00004128 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	printf("beginCycles %u\n", cycles);
	if (channel) {
    4128:	ldr	r3, [r0, #0]
static void (*funct_table[4])(void) __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
uint8_t IntervalTimer::nvic_priorites[4] = {255, 255, 255, 255};


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
    412a:	push	{r4, r5, r6, r7, lr}
	printf("beginCycles %u\n", cycles);
	if (channel) {
    412c:	cbz	r3, 4186 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x5e>
		channel->TCTRL = 0;
    412e:	movs	r5, #0
		channel->TFLG = 1;
    4130:	movs	r4, #1

bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
    4132:	str	r5, [r3, #8]
		channel->TFLG = 1;
    4134:	str	r4, [r3, #12]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
    4136:	ldr	r5, [pc, #132]	; (41bc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x94>)
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
    4138:	movs	r4, #3
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
	funct_table[index] = funct;
	channel->LDVAL = cycles;
    413a:	str	r2, [r3, #0]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
    413c:	add	r5, r3
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
    413e:	str	r4, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    4140:	ldr	r4, [pc, #124]	; (41c0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x98>)
    4142:	ldrb	r3, [r0, #4]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
    4144:	asrs	r5, r5, #4
	funct_table[index] = funct;
    4146:	ldr	r7, [pc, #124]	; (41c4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x9c>)
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
	nvic_priorites[index] = nvic_priority;
    4148:	strb	r3, [r4, r5]
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    414a:	ldrb	r3, [r4, #0]
    414c:	ldrb	r0, [r4, #1]
    414e:	cmp	r3, #255	; 0xff
    4150:	ldrb	r2, [r4, #2]
    4152:	ldrb	r4, [r4, #3]
    4154:	it	cs
    4156:	movcs	r3, #255	; 0xff
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    4158:	ldr	r6, [pc, #108]	; (41c8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
	funct_table[index] = funct;
    415a:	str.w	r1, [r7, r5, lsl #2]
    415e:	cmp	r3, r0
    4160:	it	cs
    4162:	movcs	r3, r0
    4164:	ldr	r0, [pc, #100]	; (41cc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
    4166:	cmp	r3, r2
    4168:	str.w	r6, [r0, #552]	; 0x228
    416c:	it	cs
    416e:	movcs	r3, r2
    4170:	cmp	r3, r4
    4172:	it	cs
    4174:	movcs	r3, r4
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
	}
	attachInterruptVector(IRQ_PIT, &pit_isr);
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    4176:	ldr	r4, [pc, #88]	; (41d0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    4178:	mov.w	r1, #67108864	; 0x4000000
    417c:	ldr	r2, [pc, #84]	; (41d4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	return true;
    417e:	movs	r0, #1
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
	}
	attachInterruptVector(IRQ_PIT, &pit_isr);
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    4180:	strb	r3, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_PIT);
    4182:	str	r1, [r2, #0]
	return true;
}
    4184:	pop	{r4, r5, r6, r7, pc}
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    4186:	ldr	r7, [pc, #80]	; (41d8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    4188:	mov.w	ip, #1
		channel = IMXRT_PIT_CHANNELS;
    418c:	ldr	r6, [pc, #76]	; (41dc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    418e:	ldr	r4, [r7, #108]	; 0x6c
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    4190:	ldr.w	lr, [pc, #80]	; 41e4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>
		channel = IMXRT_PIT_CHANNELS;
    4194:	mov	r3, r6
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    4196:	orr.w	r4, r4, #12288	; 0x3000
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = IMXRT_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    419a:	ldr	r5, [pc, #68]	; (41e0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    419c:	str	r4, [r7, #108]	; 0x6c
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    419e:	str.w	ip, [lr]
		channel = IMXRT_PIT_CHANNELS;
    41a2:	str	r6, [r0, #0]
		while (1) {
			if (channel->TCTRL == 0) break;
    41a4:	ldr	r4, [r3, #8]
    41a6:	cmp	r4, #0
    41a8:	beq.n	4136 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xe>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    41aa:	adds	r3, #16
    41ac:	cmp	r3, r5
    41ae:	str	r3, [r0, #0]
    41b0:	bne.n	41a4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x7c>
				channel = NULL;
    41b2:	movs	r3, #0
    41b4:	str	r3, [r0, #0]
				return false;
    41b6:	mov	r0, r3
    41b8:	pop	{r4, r5, r6, r7, pc}
    41ba:	nop
    41bc:	.word	0xbff7bf00
    41c0:	.word	0x20000b54
    41c4:	.word	0x20001b00
    41c8:	.word	0x000040c1
    41cc:	.word	0x20003400
    41d0:	.word	0xe000e47a
    41d4:	.word	0xe000e10c
    41d8:	.word	0x400fc000
    41dc:	.word	0x40084100
    41e0:	.word	0x40084140
    41e4:	.word	0x40084000

000041e8 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
    41e8:	ldr	r2, [r0, #0]
    41ea:	cbz	r2, 4230 <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
    41ec:	ldr	r3, [pc, #68]	; (4234 <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    41ee:	ldr	r1, [pc, #72]	; (4238 <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    41f0:	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
    41f2:	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    41f4:	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    41f6:	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    41f8:	movs	r4, #0
    41fa:	ldr.w	lr, [pc, #68]	; 4240 <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    41fe:	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    4200:	ldrb	r6, [r1, #0]
    4202:	ldrb	r5, [r1, #1]
    4204:	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
    4206:	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    4208:	str.w	r4, [lr, r3, lsl #2]
    420c:	it	cs
    420e:	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    4210:	ldrb	r2, [r1, #2]
    4212:	ldrb	r1, [r1, #3]
    4214:	cmp	r6, r5
    4216:	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    4218:	ldr	r7, [pc, #32]	; (423c <IntervalTimer::end()+0x54>)
    421a:	it	cs
    421c:	movcs	r3, r5
    421e:	cmp	r3, r2
    4220:	it	cs
    4222:	movcs	r3, r2
    4224:	cmp	r3, r1
    4226:	it	cs
    4228:	movcs	r3, r1
    422a:	strb	r3, [r7, #0]
		channel = 0;
    422c:	str	r4, [r0, #0]
    422e:	pop	{r4, r5, r6, r7, pc}
    4230:	bx	lr
    4232:	nop
    4234:	.word	0xbff7bf00
    4238:	.word	0x20000b54
    423c:	.word	0xe000e47a
    4240:	.word	0x20001b00

00004244 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4244:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    4248:	ldr	r6, [pc, #200]	; (4314 <yield+0xd0>)
    424a:	ldrb	r3, [r6, #0]
    424c:	cbz	r3, 4274 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    424e:	ldr	r7, [pc, #200]	; (4318 <yield+0xd4>)
    4250:	ldrb	r2, [r7, #0]
    4252:	cbnz	r2, 4274 <yield+0x30>
	running = 1;
    4254:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    4256:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    4258:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    425a:	bmi.n	42cc <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    425c:	lsls	r2, r3, #30
    425e:	bmi.n	4294 <yield+0x50>

	running = 0;
    4260:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4262:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    4264:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4266:	bpl.n	4274 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    4268:	ldr	r3, [pc, #176]	; (431c <yield+0xd8>)
    426a:	ldr	r2, [r3, #0]
    426c:	cbz	r2, 4274 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    426e:	mrs	r2, IPSR
		if (ipsr != 0) return;
    4272:	cbz	r2, 4278 <yield+0x34>
    4274:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4278:	mrs	r0, PRIMASK
		__disable_irq();
    427c:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    427e:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    4280:	cbz	r2, 428a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    4282:	ldr	r4, [pc, #156]	; (4320 <yield+0xdc>)
    4284:	ldrb	r1, [r4, #0]
    4286:	cmp	r1, #0
    4288:	beq.n	42ea <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    428a:	cmp	r0, #0
    428c:	bne.n	4274 <yield+0x30>
    428e:	cpsie	i
    4290:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4294:	ldr.w	r8, [pc, #148]	; 432c <yield+0xe8>
    4298:	ldrb.w	r2, [r8]
    429c:	cmp	r2, #0
    429e:	beq.n	4260 <yield+0x1c>
    42a0:	movs	r4, #0
    42a2:	ldr.w	r9, [pc, #140]	; 4330 <yield+0xec>
    42a6:	b.n	42b4 <yield+0x70>
    42a8:	adds	r4, #1
    42aa:	ldrb.w	r3, [r8]
    42ae:	uxtb	r4, r4
    42b0:	cmp	r3, r4
    42b2:	bls.n	42dc <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    42b4:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    42b8:	ldr	r3, [r5, #0]
    42ba:	mov	r0, r5
    42bc:	ldr	r3, [r3, #16]
    42be:	blx	r3
    42c0:	cmp	r0, #0
    42c2:	beq.n	42a8 <yield+0x64>
    42c4:	ldr	r3, [r5, #20]
    42c6:	ldr	r3, [r3, #8]
    42c8:	blx	r3
    42ca:	b.n	42a8 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    42cc:	bl	2b40 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    42d0:	cbnz	r0, 4308 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    42d2:	ldr	r3, [pc, #80]	; (4324 <yield+0xe0>)
    42d4:	ldrb	r3, [r3, #0]
    42d6:	cbnz	r3, 42e0 <yield+0x9c>
    42d8:	ldrb	r3, [r6, #0]
    42da:	b.n	425c <yield+0x18>
    42dc:	ldrb	r3, [r6, #0]
    42de:	b.n	4260 <yield+0x1c>
    42e0:	ldrb	r3, [r6, #0]
    42e2:	and.w	r3, r3, #254	; 0xfe
    42e6:	strb	r3, [r6, #0]
    42e8:	b.n	425c <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    42ea:	movs	r6, #1
		firstYield = first->_next;
    42ec:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    42ee:	strb	r6, [r4, #0]
		firstYield = first->_next;
    42f0:	str	r5, [r3, #0]
		if (firstYield) {
    42f2:	cbz	r5, 430e <yield+0xca>
			firstYield->_prev = nullptr;
    42f4:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    42f6:	cbnz	r0, 42fa <yield+0xb6>
    42f8:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    42fa:	movs	r5, #0
		(*(first->_function))(*first);
    42fc:	ldr	r3, [r2, #8]
    42fe:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    4300:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    4302:	blx	r3
		runningFromYield = false;
    4304:	strb	r5, [r4, #0]
    4306:	b.n	4274 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    4308:	bl	4538 <serialEvent()>
    430c:	b.n	42d2 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    430e:	ldr	r3, [pc, #24]	; (4328 <yield+0xe4>)
    4310:	str	r5, [r3, #0]
    4312:	b.n	42f6 <yield+0xb2>
    4314:	.word	0x20000b58
    4318:	.word	0x20001b10
    431c:	.word	0x20001b20
    4320:	.word	0x20001b24
    4324:	.word	0x60001b8a
    4328:	.word	0x20001b1c
    432c:	.word	0x20001b48
    4330:	.word	0x20001b28

00004334 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    4334:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4336:	mrs	r2, PRIMASK
		__disable_irq();
    433a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    433c:	ldrb	r3, [r0, #29]
    433e:	cbnz	r3, 434e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    4340:	ldrb	r1, [r0, #28]
    4342:	cmp	r1, #1
    4344:	beq.n	4358 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    4346:	cmp	r1, #3
    4348:	beq.n	436c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    434a:	movs	r3, #1
    434c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    434e:	cbnz	r2, 4352 <EventResponder::triggerEventNotImmediate()+0x1e>
    4350:	cpsie	i
	}
	enableInterrupts(irq);
}
    4352:	ldr.w	r4, [sp], #4
    4356:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    4358:	ldr	r4, [pc, #68]	; (43a0 <EventResponder::triggerEventNotImmediate()+0x6c>)
    435a:	ldr	r1, [r4, #0]
    435c:	cbz	r1, 4388 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    435e:	ldr	r1, [pc, #68]	; (43a4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    4360:	str	r3, [r0, #20]
				_prev = lastYield;
    4362:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    4364:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    4366:	str	r3, [r0, #24]
				_prev->_next = this;
    4368:	str	r0, [r3, #20]
    436a:	b.n	434a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    436c:	ldr	r4, [pc, #56]	; (43a8 <EventResponder::triggerEventNotImmediate()+0x74>)
    436e:	ldr	r1, [r4, #0]
    4370:	cbz	r1, 4394 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    4372:	ldr	r1, [pc, #56]	; (43ac <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    4374:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    4376:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    4378:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    437a:	str	r3, [r0, #24]
				_prev->_next = this;
    437c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    437e:	ldr	r3, [pc, #48]	; (43b0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    4380:	mov.w	r1, #268435456	; 0x10000000
    4384:	str	r1, [r3, #0]
    4386:	b.n	434a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    4388:	ldr	r3, [pc, #24]	; (43a4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    438a:	str	r1, [r0, #20]
				_prev = nullptr;
    438c:	str	r1, [r0, #24]
				firstYield = this;
    438e:	str	r0, [r4, #0]
				lastYield = this;
    4390:	str	r0, [r3, #0]
    4392:	b.n	434a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    4394:	ldr	r3, [pc, #20]	; (43ac <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    4396:	str	r1, [r0, #20]
				_prev = nullptr;
    4398:	str	r1, [r0, #24]
				firstInterrupt = this;
    439a:	str	r0, [r4, #0]
				lastInterrupt = this;
    439c:	str	r0, [r3, #0]
    439e:	b.n	437e <EventResponder::triggerEventNotImmediate()+0x4a>
    43a0:	.word	0x20001b20
    43a4:	.word	0x20001b1c
    43a8:	.word	0x20001b14
    43ac:	.word	0x20001b18
    43b0:	.word	0xe000ed04

000043b4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    43b4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    43b6:	mrs	r1, PRIMASK
		__disable_irq();
    43ba:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    43bc:	ldr	r4, [pc, #48]	; (43f0 <EventResponder::runFromInterrupt()+0x3c>)
    43be:	ldr	r3, [r4, #0]
		if (first) {
    43c0:	cbz	r3, 43e6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    43c2:	ldr	r6, [pc, #48]	; (43f4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    43c4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    43c6:	ldr	r2, [r3, #20]
    43c8:	str	r2, [r4, #0]
			if (firstInterrupt) {
    43ca:	cbz	r2, 43ec <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    43cc:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    43ce:	cbnz	r1, 43d2 <EventResponder::runFromInterrupt()+0x1e>
    43d0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    43d2:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    43d4:	mov	r0, r3
    43d6:	ldr	r3, [r3, #8]
    43d8:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    43da:	mrs	r1, PRIMASK
		__disable_irq();
    43de:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    43e0:	ldr	r3, [r4, #0]
		if (first) {
    43e2:	cmp	r3, #0
    43e4:	bne.n	43c6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    43e6:	cbnz	r1, 43ea <EventResponder::runFromInterrupt()+0x36>
    43e8:	cpsie	i
    43ea:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    43ec:	str	r2, [r6, #0]
    43ee:	b.n	43ce <EventResponder::runFromInterrupt()+0x1a>
    43f0:	.word	0x20001b14
    43f4:	.word	0x20001b18

000043f8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    43f8:	b.w	43b4 <EventResponder::runFromInterrupt()>

000043fc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    43fc:	ldr	r2, [pc, #16]	; (4410 <systick_isr+0x14>)
    43fe:	ldr	r3, [pc, #20]	; (4414 <systick_isr+0x18>)
    4400:	ldr	r1, [r2, #0]
	systick_millis_count++;
    4402:	ldr	r2, [pc, #20]	; (4418 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    4404:	str	r1, [r3, #0]
	systick_millis_count++;
    4406:	ldr	r3, [r2, #0]
    4408:	adds	r3, #1
    440a:	str	r3, [r2, #0]
    440c:	bx	lr
    440e:	nop
    4410:	.word	0xe0001004
    4414:	.word	0x20001adc
    4418:	.word	0x20001ae4

0000441c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    441c:	b.w	2b4c <usb_serial_flush_input>

00004420 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    4420:	b.w	2afc <usb_serial_peekchar>

00004424 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    4424:	b.w	2bc0 <usb_serial_getchar>

00004428 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    4428:	b.w	2b40 <usb_serial_available>

0000442c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    442c:	b.w	2c70 <usb_serial_flush_output>

00004430 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4430:	b.w	2c24 <usb_serial_write_buffer_free>

00004434 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4434:	mov	r0, r1
    4436:	mov	r1, r2
    4438:	b.w	2c0c <usb_serial_write>

0000443c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    443c:	mov	r0, r1
    443e:	b.w	2be0 <usb_serial_putchar>
    4442:	nop

00004444 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    4444:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    4446:	mov	r6, r1
    4448:	cbz	r1, 4468 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    444a:	cbz	r2, 446c <Print::write(unsigned char const*, unsigned int)+0x28>
    444c:	mov	r7, r0
    444e:	mov	r4, r2
    4450:	movs	r5, #0
    4452:	ldr	r3, [r7, #0]
    4454:	mov	r0, r7
    4456:	ldrb.w	r1, [r6], #1
    445a:	ldr	r3, [r3, #0]
    445c:	blx	r3
    445e:	subs	r4, #1
    4460:	add	r5, r0
    4462:	bne.n	4452 <Print::write(unsigned char const*, unsigned int)+0xe>
    4464:	mov	r0, r5
    4466:	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    4468:	mov	r0, r1
    446a:	pop	{r3, r4, r5, r6, r7, pc}
    446c:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    446e:	pop	{r3, r4, r5, r6, r7, pc}

00004470 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4470:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    4472:	ldr	r4, [pc, #24]	; (448c <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    4474:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    4476:	ldr	r3, [r0, #0]
    4478:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    447a:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    447c:	add	r1, sp, #4
    447e:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    4480:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    4484:	blx	r3
}
    4486:	add	sp, #8
    4488:	pop	{r4, pc}
    448a:	nop
    448c:	.word	0x200005d8

00004490 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    4490:	push	{r4, r5, r6, r7, lr}
    4492:	mov	r6, r0
    4494:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    4496:	cmp	r2, #0
    4498:	beq.n	4502 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    449a:	cmp	r2, #1
    449c:	it	eq
    449e:	moveq	r2, #10
	}


	if (n == 0) {
    44a0:	cbz	r1, 44f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    44a2:	movs	r5, #33	; 0x21
    44a4:	b.n	44a8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    44a6:	uxtb	r5, r7
    44a8:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    44aa:	udiv	r4, r1, r2
    44ae:	mls	r1, r2, r4, r1
    44b2:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    44b4:	cmp	r1, #9
    44b6:	add.w	r1, r0, #55	; 0x37
    44ba:	add.w	r0, r0, #48	; 0x30
    44be:	it	hi
    44c0:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    44c2:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    44c4:	add	r4, sp, #40	; 0x28
    44c6:	it	ls
    44c8:	uxtbls	r0, r0
    44ca:	add	r4, r5
    44cc:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    44d0:	cmp	r1, #0
    44d2:	bne.n	44a6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    44d4:	cbz	r3, 44e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    44d6:	subs	r5, #1
		buf[i] = '-';
    44d8:	add	r3, sp, #40	; 0x28
    44da:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    44dc:	uxtb	r5, r5
		buf[i] = '-';
    44de:	add	r3, r5
    44e0:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    44e4:	ldr	r3, [r6, #0]
    44e6:	add	r1, sp, #4
    44e8:	rsb	r2, r5, #34	; 0x22
    44ec:	mov	r0, r6
    44ee:	add	r1, r5
    44f0:	ldr	r3, [r3, #4]
    44f2:	blx	r3
}
    44f4:	add	sp, #44	; 0x2c
    44f6:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    44f8:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    44fa:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    44fc:	strb.w	r2, [sp, #37]	; 0x25
    4500:	b.n	44d4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    4502:	ldr	r3, [r0, #0]
    4504:	uxtb	r1, r1
    4506:	ldr	r3, [r3, #0]
    4508:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    450a:	add	sp, #44	; 0x2c
    450c:	pop	{r4, r5, r6, r7, pc}
    450e:	nop

00004510 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    4510:	cmp	r1, #0
    4512:	blt.n	451c <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    4514:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    4516:	movs	r2, #10
    4518:	b.w	4490 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    451c:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    451e:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    4520:	movs	r2, #10
    4522:	b.w	4490 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4526:	nop

00004528 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    4528:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    452a:	bl	2e8 <setup>
	while (1) {
		loop();
    452e:	bl	388 <loop>
		yield();
    4532:	bl	4244 <yield>
    4536:	b.n	452e <main+0x6>

00004538 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    4538:	bx	lr
    453a:	nop
    453c:	movs	r0, r0
	...

00004540 <cos>:
    4540:	push	{lr}
    4542:	vmov.f64	d7, d0
    4546:	vmov	r3, s15
    454a:	ldr	r2, [pc, #140]	; (45d8 <cos+0x98>)
    454c:	bic.w	r3, r3, #2147483648	; 0x80000000
    4550:	cmp	r3, r2
    4552:	sub	sp, #20
    4554:	ble.n	458a <cos+0x4a>
    4556:	ldr	r2, [pc, #132]	; (45dc <cos+0x9c>)
    4558:	cmp	r3, r2
    455a:	ble.n	4566 <cos+0x26>
    455c:	vsub.f64	d0, d0, d0
    4560:	add	sp, #20
    4562:	ldr.w	pc, [sp], #4
    4566:	mov	r0, sp
    4568:	bl	46e8 <__ieee754_rem_pio2>
    456c:	and.w	r0, r0, #3
    4570:	cmp	r0, #1
    4572:	beq.n	45aa <cos+0x6a>
    4574:	cmp	r0, #2
    4576:	beq.n	4598 <cos+0x58>
    4578:	cbz	r0, 45bc <cos+0x7c>
    457a:	movs	r0, #1
    457c:	vldr	d1, [sp, #8]
    4580:	vldr	d0, [sp]
    4584:	bl	5128 <__kernel_sin>
    4588:	b.n	4560 <cos+0x20>
    458a:	vldr	d1, [pc, #68]	; 45d0 <cos+0x90>
    458e:	bl	4988 <__kernel_cos>
    4592:	add	sp, #20
    4594:	ldr.w	pc, [sp], #4
    4598:	vldr	d1, [sp, #8]
    459c:	vldr	d0, [sp]
    45a0:	bl	4988 <__kernel_cos>
    45a4:	vneg.f64	d0, d0
    45a8:	b.n	4560 <cos+0x20>
    45aa:	vldr	d1, [sp, #8]
    45ae:	vldr	d0, [sp]
    45b2:	bl	5128 <__kernel_sin>
    45b6:	vneg.f64	d0, d0
    45ba:	b.n	4560 <cos+0x20>
    45bc:	vldr	d1, [sp, #8]
    45c0:	vldr	d0, [sp]
    45c4:	bl	4988 <__kernel_cos>
    45c8:	b.n	4560 <cos+0x20>
    45ca:	nop
    45cc:	nop.w
	...
    45d8:	.word	0x3fe921fb
    45dc:	.word	0x7fefffff

000045e0 <sin>:
    45e0:	push	{lr}
    45e2:	vmov.f64	d7, d0
    45e6:	vmov	r3, s15
    45ea:	ldr	r2, [pc, #140]	; (4678 <sin+0x98>)
    45ec:	bic.w	r3, r3, #2147483648	; 0x80000000
    45f0:	cmp	r3, r2
    45f2:	sub	sp, #20
    45f4:	ble.n	462c <sin+0x4c>
    45f6:	ldr	r2, [pc, #132]	; (467c <sin+0x9c>)
    45f8:	cmp	r3, r2
    45fa:	ble.n	4606 <sin+0x26>
    45fc:	vsub.f64	d0, d0, d0
    4600:	add	sp, #20
    4602:	ldr.w	pc, [sp], #4
    4606:	mov	r0, sp
    4608:	bl	46e8 <__ieee754_rem_pio2>
    460c:	and.w	r0, r0, #3
    4610:	cmp	r0, #1
    4612:	beq.n	4650 <sin+0x70>
    4614:	cmp	r0, #2
    4616:	beq.n	463c <sin+0x5c>
    4618:	cbz	r0, 465e <sin+0x7e>
    461a:	vldr	d1, [sp, #8]
    461e:	vldr	d0, [sp]
    4622:	bl	4988 <__kernel_cos>
    4626:	vneg.f64	d0, d0
    462a:	b.n	4600 <sin+0x20>
    462c:	movs	r0, #0
    462e:	vldr	d1, [pc, #64]	; 4670 <sin+0x90>
    4632:	bl	5128 <__kernel_sin>
    4636:	add	sp, #20
    4638:	ldr.w	pc, [sp], #4
    463c:	movs	r0, #1
    463e:	vldr	d1, [sp, #8]
    4642:	vldr	d0, [sp]
    4646:	bl	5128 <__kernel_sin>
    464a:	vneg.f64	d0, d0
    464e:	b.n	4600 <sin+0x20>
    4650:	vldr	d1, [sp, #8]
    4654:	vldr	d0, [sp]
    4658:	bl	4988 <__kernel_cos>
    465c:	b.n	4600 <sin+0x20>
    465e:	movs	r0, #1
    4660:	vldr	d1, [sp, #8]
    4664:	vldr	d0, [sp]
    4668:	bl	5128 <__kernel_sin>
    466c:	b.n	4600 <sin+0x20>
    466e:	nop
	...
    4678:	.word	0x3fe921fb
    467c:	.word	0x7fefffff

00004680 <tan>:
    4680:	push	{lr}
    4682:	vmov.f64	d7, d0
    4686:	vmov	r3, s15
    468a:	ldr	r2, [pc, #84]	; (46e0 <tan+0x60>)
    468c:	bic.w	r3, r3, #2147483648	; 0x80000000
    4690:	cmp	r3, r2
    4692:	sub	sp, #20
    4694:	ble.n	46c8 <tan+0x48>
    4696:	ldr	r2, [pc, #76]	; (46e4 <tan+0x64>)
    4698:	cmp	r3, r2
    469a:	ble.n	46a6 <tan+0x26>
    469c:	vsub.f64	d0, d0, d0
    46a0:	add	sp, #20
    46a2:	ldr.w	pc, [sp], #4
    46a6:	mov	r0, sp
    46a8:	bl	46e8 <__ieee754_rem_pio2>
    46ac:	lsls	r0, r0, #1
    46ae:	and.w	r0, r0, #2
    46b2:	rsb	r0, r0, #1
    46b6:	vldr	d1, [sp, #8]
    46ba:	vldr	d0, [sp]
    46be:	bl	51d8 <__kernel_tan>
    46c2:	add	sp, #20
    46c4:	ldr.w	pc, [sp], #4
    46c8:	movs	r0, #1
    46ca:	vldr	d1, [pc, #12]	; 46d8 <tan+0x58>
    46ce:	bl	51d8 <__kernel_tan>
    46d2:	add	sp, #20
    46d4:	ldr.w	pc, [sp], #4
	...
    46e0:	.word	0x3fe921fb
    46e4:	.word	0x7fefffff

000046e8 <__ieee754_rem_pio2>:
    46e8:	push	{r4, r5, r6, lr}
    46ea:	vmov	r2, r3, d0
    46ee:	ldr	r1, [pc, #632]	; (4968 <__ieee754_rem_pio2+0x280>)
    46f0:	bic.w	r6, r3, #2147483648	; 0x80000000
    46f4:	cmp	r6, r1
    46f6:	sub	sp, #32
    46f8:	ble.n	47c0 <__ieee754_rem_pio2+0xd8>
    46fa:	ldr	r1, [pc, #624]	; (496c <__ieee754_rem_pio2+0x284>)
    46fc:	cmp	r6, r1
    46fe:	mov	r5, r3
    4700:	bgt.n	473c <__ieee754_rem_pio2+0x54>
    4702:	cmp	r3, #0
    4704:	vldr	d7, [pc, #544]	; 4928 <__ieee754_rem_pio2+0x240>
    4708:	ble.w	48ca <__ieee754_rem_pio2+0x1e2>
    470c:	vsub.f64	d7, d0, d7
    4710:	sub.w	r1, r1, #634880	; 0x9b000
    4714:	sub.w	r1, r1, #1920	; 0x780
    4718:	cmp	r6, r1
    471a:	beq.n	47e4 <__ieee754_rem_pio2+0xfc>
    471c:	vldr	d6, [pc, #528]	; 4930 <__ieee754_rem_pio2+0x248>
    4720:	vsub.f64	d5, d7, d6
    4724:	vsub.f64	d7, d7, d5
    4728:	movs	r3, #1
    472a:	vstr	d5, [r0]
    472e:	vsub.f64	d7, d7, d6
    4732:	vstr	d7, [r0, #8]
    4736:	mov	r0, r3
    4738:	add	sp, #32
    473a:	pop	{r4, r5, r6, pc}
    473c:	ldr	r1, [pc, #560]	; (4970 <__ieee754_rem_pio2+0x288>)
    473e:	cmp	r6, r1
    4740:	mov	r4, r0
    4742:	ble.n	47f2 <__ieee754_rem_pio2+0x10a>
    4744:	ldr	r1, [pc, #556]	; (4974 <__ieee754_rem_pio2+0x28c>)
    4746:	cmp	r6, r1
    4748:	bgt.n	47d4 <__ieee754_rem_pio2+0xec>
    474a:	mov	r0, r2
    474c:	asrs	r2, r6, #20
    474e:	subw	r2, r2, #1046	; 0x416
    4752:	sub.w	r1, r6, r2, lsl #20
    4756:	vmov	d6, r0, r1
    475a:	vldr	d7, [pc, #476]	; 4938 <__ieee754_rem_pio2+0x250>
    475e:	vcvt.s32.f64	s8, d6
    4762:	movs	r3, #0
    4764:	vcvt.f64.s32	d4, s8
    4768:	vsub.f64	d6, d6, d4
    476c:	vmul.f64	d6, d6, d7
    4770:	vcvt.s32.f64	s10, d6
    4774:	vstr	d4, [sp, #8]
    4778:	vcvt.f64.s32	d5, s10
    477c:	vsub.f64	d6, d6, d5
    4780:	vmul.f64	d7, d6, d7
    4784:	vcmp.f64	d7, #0.0
    4788:	vmrs	APSR_nzcv, fpscr
    478c:	vstr	d5, [sp, #16]
    4790:	vstr	d7, [sp, #24]
    4794:	bne.w	490e <__ieee754_rem_pio2+0x226>
    4798:	vcmp.f64	d5, #0.0
    479c:	vmrs	APSR_nzcv, fpscr
    47a0:	ite	eq
    47a2:	moveq	r3, #1
    47a4:	movne	r3, #2
    47a6:	ldr	r1, [pc, #464]	; (4978 <__ieee754_rem_pio2+0x290>)
    47a8:	str	r1, [sp, #4]
    47aa:	movs	r1, #2
    47ac:	str	r1, [sp, #0]
    47ae:	add	r0, sp, #8
    47b0:	mov	r1, r4
    47b2:	bl	4aa8 <__kernel_rem_pio2>
    47b6:	cmp	r5, #0
    47b8:	blt.w	48f2 <__ieee754_rem_pio2+0x20a>
    47bc:	mov	r3, r0
    47be:	b.n	47ce <__ieee754_rem_pio2+0xe6>
    47c0:	movs	r4, #0
    47c2:	movs	r5, #0
    47c4:	vstr	d0, [r0]
    47c8:	strd	r4, r5, [r0, #8]
    47cc:	movs	r3, #0
    47ce:	mov	r0, r3
    47d0:	add	sp, #32
    47d2:	pop	{r4, r5, r6, pc}
    47d4:	vsub.f64	d7, d0, d0
    47d8:	movs	r3, #0
    47da:	vstr	d7, [r0, #8]
    47de:	vstr	d7, [r0]
    47e2:	b.n	47ce <__ieee754_rem_pio2+0xe6>
    47e4:	vldr	d5, [pc, #344]	; 4940 <__ieee754_rem_pio2+0x258>
    47e8:	vldr	d6, [pc, #348]	; 4948 <__ieee754_rem_pio2+0x260>
    47ec:	vsub.f64	d7, d7, d5
    47f0:	b.n	4720 <__ieee754_rem_pio2+0x38>
    47f2:	bl	5418 <fabs>
    47f6:	vmov.f64	d7, #96	; 0x3f000000  0.5
    47fa:	vldr	d6, [pc, #340]	; 4950 <__ieee754_rem_pio2+0x268>
    47fe:	vfma.f64	d7, d0, d6
    4802:	vcvt.s32.f64	s15, d7
    4806:	vldr	d3, [pc, #288]	; 4928 <__ieee754_rem_pio2+0x240>
    480a:	vmov	r3, s15
    480e:	vldr	d6, [pc, #288]	; 4930 <__ieee754_rem_pio2+0x248>
    4812:	cmp	r3, #31
    4814:	vcvt.f64.s32	d5, s15
    4818:	vneg.f64	d4, d5
    481c:	vmul.f64	d7, d5, d6
    4820:	vfma.f64	d0, d4, d3
    4824:	bgt.n	485e <__ieee754_rem_pio2+0x176>
    4826:	ldr	r2, [pc, #340]	; (497c <__ieee754_rem_pio2+0x294>)
    4828:	subs	r1, r3, #1
    482a:	ldr.w	r2, [r2, r1, lsl #2]
    482e:	cmp	r6, r2
    4830:	beq.n	485e <__ieee754_rem_pio2+0x176>
    4832:	vsub.f64	d6, d0, d7
    4836:	vstr	d6, [r4]
    483a:	vsub.f64	d0, d0, d6
    483e:	vsub.f64	d0, d0, d7
    4842:	cmp	r5, #0
    4844:	vstr	d0, [r4, #8]
    4848:	bge.n	47ce <__ieee754_rem_pio2+0xe6>
    484a:	vneg.f64	d6, d6
    484e:	vneg.f64	d0, d0
    4852:	vstr	d6, [r4]
    4856:	vstr	d0, [r4, #8]
    485a:	negs	r3, r3
    485c:	b.n	47ce <__ieee754_rem_pio2+0xe6>
    485e:	vsub.f64	d6, d0, d7
    4862:	vmov	r2, s13
    4866:	asrs	r6, r6, #20
    4868:	ubfx	r2, r2, #20, #11
    486c:	subs	r2, r6, r2
    486e:	cmp	r2, #16
    4870:	vstr	d6, [r4]
    4874:	ble.n	483a <__ieee754_rem_pio2+0x152>
    4876:	vmov.f64	d3, d0
    487a:	vldr	d7, [pc, #196]	; 4940 <__ieee754_rem_pio2+0x258>
    487e:	vldr	d6, [pc, #200]	; 4948 <__ieee754_rem_pio2+0x260>
    4882:	vfma.f64	d3, d4, d7
    4886:	vsub.f64	d0, d0, d3
    488a:	vfma.f64	d0, d4, d7
    488e:	vmov.f64	d7, d0
    4892:	vfnms.f64	d7, d5, d6
    4896:	vsub.f64	d6, d3, d7
    489a:	vmov	r2, s13
    489e:	ubfx	r2, r2, #20, #11
    48a2:	subs	r6, r6, r2
    48a4:	cmp	r6, #49	; 0x31
    48a6:	vstr	d6, [r4]
    48aa:	ble.n	4920 <__ieee754_rem_pio2+0x238>
    48ac:	vmov.f64	d0, d3
    48b0:	vldr	d6, [pc, #164]	; 4958 <__ieee754_rem_pio2+0x270>
    48b4:	vldr	d2, [pc, #168]	; 4960 <__ieee754_rem_pio2+0x278>
    48b8:	vfma.f64	d0, d4, d6
    48bc:	vsub.f64	d7, d3, d0
    48c0:	vfma.f64	d7, d4, d6
    48c4:	vfnms.f64	d7, d5, d2
    48c8:	b.n	4832 <__ieee754_rem_pio2+0x14a>
    48ca:	ldr	r1, [pc, #180]	; (4980 <__ieee754_rem_pio2+0x298>)
    48cc:	vadd.f64	d7, d0, d7
    48d0:	cmp	r6, r1
    48d2:	beq.n	4912 <__ieee754_rem_pio2+0x22a>
    48d4:	vldr	d6, [pc, #88]	; 4930 <__ieee754_rem_pio2+0x248>
    48d8:	vadd.f64	d5, d7, d6
    48dc:	vsub.f64	d7, d7, d5
    48e0:	mov.w	r3, #4294967295
    48e4:	vadd.f64	d7, d7, d6
    48e8:	vstr	d5, [r0]
    48ec:	vstr	d7, [r0, #8]
    48f0:	b.n	47ce <__ieee754_rem_pio2+0xe6>
    48f2:	vldr	d6, [r4]
    48f6:	vldr	d7, [r4, #8]
    48fa:	vneg.f64	d6, d6
    48fe:	vneg.f64	d7, d7
    4902:	negs	r3, r0
    4904:	vstr	d6, [r4]
    4908:	vstr	d7, [r4, #8]
    490c:	b.n	47ce <__ieee754_rem_pio2+0xe6>
    490e:	movs	r3, #3
    4910:	b.n	47a6 <__ieee754_rem_pio2+0xbe>
    4912:	vldr	d5, [pc, #44]	; 4940 <__ieee754_rem_pio2+0x258>
    4916:	vldr	d6, [pc, #48]	; 4948 <__ieee754_rem_pio2+0x260>
    491a:	vadd.f64	d7, d7, d5
    491e:	b.n	48d8 <__ieee754_rem_pio2+0x1f0>
    4920:	vmov.f64	d0, d3
    4924:	b.n	483a <__ieee754_rem_pio2+0x152>
    4926:	nop
    4928:	.word	0x54400000
    492c:	.word	0x3ff921fb
    4930:	.word	0x1a626331
    4934:	.word	0x3dd0b461
    4938:	.word	0x00000000
    493c:	.word	0x41700000
    4940:	.word	0x1a600000
    4944:	.word	0x3dd0b461
    4948:	.word	0x2e037073
    494c:	.word	0x3ba3198a
    4950:	.word	0x6dc9c883
    4954:	.word	0x3fe45f30
    4958:	.word	0x2e000000
    495c:	.word	0x3ba3198a
    4960:	.word	0x252049c1
    4964:	.word	0x397b839a
    4968:	.word	0x3fe921fb
    496c:	.word	0x4002d97b
    4970:	.word	0x413921fb
    4974:	.word	0x7fefffff
    4978:	.word	0x2000065c
    497c:	.word	0x200005dc
    4980:	.word	0x3ff921fb
    4984:	.word	0x00000000

00004988 <__kernel_cos>:
    4988:	vmov	r3, s1
    498c:	bic.w	r3, r3, #2147483648	; 0x80000000
    4990:	cmp.w	r3, #1044381696	; 0x3e400000
    4994:	bge.n	49f0 <__kernel_cos+0x68>
    4996:	vcvt.s32.f64	s15, d0
    499a:	vmov	r3, s15
    499e:	cmp	r3, #0
    49a0:	beq.n	4a66 <__kernel_cos+0xde>
    49a2:	vmul.f64	d7, d0, d0
    49a6:	vldr	d4, [pc, #200]	; 4a70 <__kernel_cos+0xe8>
    49aa:	vldr	d5, [pc, #204]	; 4a78 <__kernel_cos+0xf0>
    49ae:	vldr	d6, [pc, #208]	; 4a80 <__kernel_cos+0xf8>
    49b2:	vfma.f64	d5, d7, d4
    49b6:	vldr	d4, [pc, #208]	; 4a88 <__kernel_cos+0x100>
    49ba:	vfma.f64	d6, d7, d5
    49be:	vldr	d5, [pc, #208]	; 4a90 <__kernel_cos+0x108>
    49c2:	vfma.f64	d4, d7, d6
    49c6:	vldr	d6, [pc, #208]	; 4a98 <__kernel_cos+0x110>
    49ca:	vfma.f64	d5, d7, d4
    49ce:	vfma.f64	d6, d7, d5
    49d2:	vmul.f64	d6, d6, d7
    49d6:	vnmul.f64	d0, d1, d0
    49da:	vmov.f64	d5, #96	; 0x3f000000  0.5
    49de:	vfma.f64	d0, d7, d6
    49e2:	vmov.f64	d6, #112	; 0x3f800000  1.0
    49e6:	vfnms.f64	d0, d7, d5
    49ea:	vsub.f64	d0, d6, d0
    49ee:	bx	lr
    49f0:	vldr	d4, [pc, #124]	; 4a70 <__kernel_cos+0xe8>
    49f4:	vmul.f64	d7, d0, d0
    49f8:	vldr	d5, [pc, #124]	; 4a78 <__kernel_cos+0xf0>
    49fc:	vldr	d6, [pc, #128]	; 4a80 <__kernel_cos+0xf8>
    4a00:	vfma.f64	d5, d7, d4
    4a04:	vldr	d4, [pc, #128]	; 4a88 <__kernel_cos+0x100>
    4a08:	vfma.f64	d6, d7, d5
    4a0c:	ldr	r2, [pc, #144]	; (4aa0 <__kernel_cos+0x118>)
    4a0e:	vfma.f64	d4, d7, d6
    4a12:	vldr	d5, [pc, #124]	; 4a90 <__kernel_cos+0x108>
    4a16:	vldr	d6, [pc, #128]	; 4a98 <__kernel_cos+0x110>
    4a1a:	vfma.f64	d5, d7, d4
    4a1e:	cmp	r3, r2
    4a20:	vfma.f64	d6, d7, d5
    4a24:	vmul.f64	d6, d6, d7
    4a28:	ble.n	49d6 <__kernel_cos+0x4e>
    4a2a:	ldr	r2, [pc, #120]	; (4aa4 <__kernel_cos+0x11c>)
    4a2c:	cmp	r3, r2
    4a2e:	bgt.n	4a5c <__kernel_cos+0xd4>
    4a30:	vmov.f64	d4, #112	; 0x3f800000  1.0
    4a34:	movs	r0, #0
    4a36:	sub.w	r1, r3, #2097152	; 0x200000
    4a3a:	vmov	d5, r0, r1
    4a3e:	vsub.f64	d4, d4, d5
    4a42:	vnmul.f64	d1, d1, d0
    4a46:	vmov.f64	d3, #96	; 0x3f000000  0.5
    4a4a:	vfma.f64	d1, d7, d6
    4a4e:	vfnms.f64	d5, d7, d3
    4a52:	vsub.f64	d5, d5, d1
    4a56:	vsub.f64	d0, d4, d5
    4a5a:	bx	lr
    4a5c:	vmov.f64	d4, #103	; 0x3f380000  0.7187500
    4a60:	vmov.f64	d5, #82	; 0x3e900000  0.2812500
    4a64:	b.n	4a42 <__kernel_cos+0xba>
    4a66:	vmov.f64	d0, #112	; 0x3f800000  1.0
    4a6a:	bx	lr
    4a6c:	nop.w
    4a70:	.word	0xbe8838d4
    4a74:	.word	0xbda8fae9
    4a78:	.word	0xbdb4b1c4
    4a7c:	.word	0x3e21ee9e
    4a80:	.word	0x809c52ad
    4a84:	.word	0xbe927e4f
    4a88:	.word	0x19cb1590
    4a8c:	.word	0x3efa01a0
    4a90:	.word	0x16c15177
    4a94:	.word	0xbf56c16c
    4a98:	.word	0x5555554c
    4a9c:	.word	0x3fa55555
    4aa0:	.word	0x3fd33332
    4aa4:	.word	0x3fe90000

00004aa8 <__kernel_rem_pio2>:
    4aa8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4aac:	vpush	{d8-d11}
    4ab0:	sub.w	sp, sp, #588	; 0x24c
    4ab4:	ldr	r4, [pc, #704]	; (4d78 <__kernel_rem_pio2+0x2d0>)
    4ab6:	ldr	r6, [sp, #656]	; 0x290
    4ab8:	ldr	r5, [pc, #704]	; (4d7c <__kernel_rem_pio2+0x2d4>)
    4aba:	ldr.w	r6, [r4, r6, lsl #2]
    4abe:	str	r3, [sp, #4]
    4ac0:	subs	r4, r2, #3
    4ac2:	smull	r7, r5, r5, r4
    4ac6:	asrs	r4, r4, #31
    4ac8:	rsb	r4, r4, r5, asr #2
    4acc:	bic.w	r4, r4, r4, asr #31
    4ad0:	subs	r7, r3, #1
    4ad2:	add.w	sl, r4, #1
    4ad6:	sub.w	sl, sl, sl, lsl #2
    4ada:	mov	fp, r1
    4adc:	adds	r1, r6, r7
    4ade:	str	r4, [sp, #8]
    4ae0:	mov	r9, r0
    4ae2:	add.w	sl, r2, sl, lsl #3
    4ae6:	sub.w	r3, r4, r7
    4aea:	bmi.n	4b1e <__kernel_rem_pio2+0x76>
    4aec:	add	r1, r3
    4aee:	adds	r1, #1
    4af0:	add	r2, sp, #104	; 0x68
    4af2:	ldr	r0, [sp, #660]	; 0x294
    4af4:	b.n	4b0c <__kernel_rem_pio2+0x64>
    4af6:	ldr.w	r4, [r0, r3, lsl #2]
    4afa:	vmov	s15, r4
    4afe:	adds	r3, #1
    4b00:	vcvt.f64.s32	d7, s15
    4b04:	cmp	r3, r1
    4b06:	vstmia	r2!, {d7}
    4b0a:	beq.n	4b1e <__kernel_rem_pio2+0x76>
    4b0c:	cmp	r3, #0
    4b0e:	bge.n	4af6 <__kernel_rem_pio2+0x4e>
    4b10:	vldr	d7, [pc, #588]	; 4d60 <__kernel_rem_pio2+0x2b8>
    4b14:	adds	r3, #1
    4b16:	cmp	r3, r1
    4b18:	vstmia	r2!, {d7}
    4b1c:	bne.n	4b0c <__kernel_rem_pio2+0x64>
    4b1e:	cmp	r6, #0
    4b20:	blt.w	50e8 <__kernel_rem_pio2+0x640>
    4b24:	ldr	r3, [sp, #4]
    4b26:	add	r0, sp, #424	; 0x1a8
    4b28:	add.w	lr, r6, #1
    4b2c:	lsls	r4, r3, #3
    4b2e:	add.w	lr, r0, lr, lsl #3
    4b32:	add.w	r1, r9, r4
    4b36:	mov	r5, r7
    4b38:	cmp	r7, #0
    4b3a:	blt.w	4ece <__kernel_rem_pio2+0x426>
    4b3e:	add	r3, sp, #104	; 0x68
    4b40:	vldr	d7, [pc, #540]	; 4d60 <__kernel_rem_pio2+0x2b8>
    4b44:	add.w	r2, r3, r5, lsl #3
    4b48:	adds	r2, #8
    4b4a:	mov	r3, r9
    4b4c:	vldmia	r3!, {d5}
    4b50:	vldmdb	r2!, {d6}
    4b54:	cmp	r3, r1
    4b56:	vfma.f64	d7, d5, d6
    4b5a:	bne.n	4b4c <__kernel_rem_pio2+0xa4>
    4b5c:	vstmia	r0!, {d7}
    4b60:	cmp	r0, lr
    4b62:	add.w	r5, r5, #1
    4b66:	bne.n	4b38 <__kernel_rem_pio2+0x90>
    4b68:	add.w	r3, r6, #1073741824	; 0x40000000
    4b6c:	subs	r3, #2
    4b6e:	lsls	r3, r3, #2
    4b70:	add	r2, sp, #24
    4b72:	vldr	d9, [pc, #500]	; 4d68 <__kernel_rem_pio2+0x2c0>
    4b76:	vldr	d8, [pc, #504]	; 4d70 <__kernel_rem_pio2+0x2c8>
    4b7a:	add.w	r8, r3, #4
    4b7e:	add	r3, r2
    4b80:	add	r4, r9
    4b82:	add	r8, r2
    4b84:	str	r3, [sp, #12]
    4b86:	mov	r5, r6
    4b88:	str.w	fp, [sp, #16]
    4b8c:	add	r3, sp, #584	; 0x248
    4b8e:	add.w	r3, r3, r5, lsl #3
    4b92:	cmp	r5, #0
    4b94:	vldr	d0, [r3, #-160]	; 0xffffff60
    4b98:	ble.n	4bca <__kernel_rem_pio2+0x122>
    4b9a:	add	r1, sp, #424	; 0x1a8
    4b9c:	add.w	r3, r1, r5, lsl #3
    4ba0:	add	r2, sp, #20
    4ba2:	vmul.f64	d7, d0, d9
    4ba6:	vcvt.s32.f64	s14, d7
    4baa:	vldmdb	r3!, {d6}
    4bae:	vcvt.f64.s32	d7, s14
    4bb2:	vfms.f64	d0, d7, d8
    4bb6:	vcvt.s32.f64	s11, d0
    4bba:	cmp	r3, r1
    4bbc:	vmov	r0, s11
    4bc0:	vadd.f64	d0, d7, d6
    4bc4:	str.w	r0, [r2, #4]!
    4bc8:	bne.n	4ba2 <__kernel_rem_pio2+0xfa>
    4bca:	mov	r0, sl
    4bcc:	bl	5540 <scalbn>
    4bd0:	vmov.f64	d10, d0
    4bd4:	vmov.f64	d0, #64	; 0x3e000000  0.125
    4bd8:	vmul.f64	d0, d10, d0
    4bdc:	bl	5428 <floor>
    4be0:	vmov.f64	d7, #32	; 0x41000000  8.0
    4be4:	vfms.f64	d10, d0, d7
    4be8:	vcvt.s32.f64	s15, d10
    4bec:	cmp.w	sl, #0
    4bf0:	vmov	fp, s15
    4bf4:	vcvt.f64.s32	d7, s15
    4bf8:	vsub.f64	d10, d10, d7
    4bfc:	ble.w	4e98 <__kernel_rem_pio2+0x3f0>
    4c00:	add.w	lr, r5, #4294967295
    4c04:	add	r3, sp, #24
    4c06:	rsb	r2, sl, #24
    4c0a:	ldr.w	r3, [r3, lr, lsl #2]
    4c0e:	asr.w	r0, r3, r2
    4c12:	lsl.w	r2, r0, r2
    4c16:	add	r1, sp, #24
    4c18:	subs	r3, r3, r2
    4c1a:	rsb	r2, sl, #23
    4c1e:	str.w	r3, [r1, lr, lsl #2]
    4c22:	add	fp, r0
    4c24:	asr.w	r1, r3, r2
    4c28:	cmp	r1, #0
    4c2a:	ble.n	4ca0 <__kernel_rem_pio2+0x1f8>
    4c2c:	cmp	r5, #0
    4c2e:	add.w	fp, fp, #1
    4c32:	ble.w	507e <__kernel_rem_pio2+0x5d6>
    4c36:	movs	r2, #0
    4c38:	mov	r0, r2
    4c3a:	add.w	lr, sp, #20
    4c3e:	mov	ip, r1
    4c40:	b.n	4c54 <__kernel_rem_pio2+0x1ac>
    4c42:	rsb	r1, r3, #16777216	; 0x1000000
    4c46:	cbz	r3, 4c4e <__kernel_rem_pio2+0x1a6>
    4c48:	str.w	r1, [lr]
    4c4c:	movs	r0, #1
    4c4e:	adds	r2, #1
    4c50:	cmp	r5, r2
    4c52:	ble.n	4c72 <__kernel_rem_pio2+0x1ca>
    4c54:	ldr.w	r3, [lr, #4]!
    4c58:	cmp	r0, #0
    4c5a:	beq.n	4c42 <__kernel_rem_pio2+0x19a>
    4c5c:	rsb	r3, r3, #16711935	; 0xff00ff
    4c60:	adds	r2, #1
    4c62:	add.w	r3, r3, #65280	; 0xff00
    4c66:	cmp	r5, r2
    4c68:	str.w	r3, [lr]
    4c6c:	mov.w	r0, #1
    4c70:	bgt.n	4c54 <__kernel_rem_pio2+0x1ac>
    4c72:	mov	r1, ip
    4c74:	cmp.w	sl, #0
    4c78:	ble.n	4c9c <__kernel_rem_pio2+0x1f4>
    4c7a:	cmp.w	sl, #1
    4c7e:	beq.w	4ea6 <__kernel_rem_pio2+0x3fe>
    4c82:	cmp.w	sl, #2
    4c86:	bne.n	4c9c <__kernel_rem_pio2+0x1f4>
    4c88:	subs	r2, r5, #1
    4c8a:	add	r3, sp, #24
    4c8c:	add.w	lr, sp, #24
    4c90:	ldr.w	r3, [r3, r2, lsl #2]
    4c94:	ubfx	r3, r3, #0, #22
    4c98:	str.w	r3, [lr, r2, lsl #2]
    4c9c:	cmp	r1, #2
    4c9e:	beq.n	4d80 <__kernel_rem_pio2+0x2d8>
    4ca0:	vcmp.f64	d10, #0.0
    4ca4:	vmrs	APSR_nzcv, fpscr
    4ca8:	bne.n	4da4 <__kernel_rem_pio2+0x2fc>
    4caa:	add.w	lr, r5, #4294967295
    4cae:	cmp	r6, lr
    4cb0:	bgt.n	4cd2 <__kernel_rem_pio2+0x22a>
    4cb2:	add.w	r2, r5, #1073741824	; 0x40000000
    4cb6:	subs	r2, #1
    4cb8:	add	r3, sp, #24
    4cba:	add.w	r2, r3, r2, lsl #2
    4cbe:	movs	r0, #0
    4cc0:	ldr.w	r3, [r2], #-4
    4cc4:	cmp	r2, r8
    4cc6:	orr.w	r0, r0, r3
    4cca:	bne.n	4cc0 <__kernel_rem_pio2+0x218>
    4ccc:	cmp	r0, #0
    4cce:	bne.w	4efc <__kernel_rem_pio2+0x454>
    4cd2:	subs	r3, r6, #1
    4cd4:	add	r2, sp, #24
    4cd6:	ldr.w	r3, [r2, r3, lsl #2]
    4cda:	cmp	r3, #0
    4cdc:	bne.w	5078 <__kernel_rem_pio2+0x5d0>
    4ce0:	ldr	r3, [sp, #12]
    4ce2:	mov.w	lr, #1
    4ce6:	ldr.w	r2, [r3], #-4
    4cea:	add.w	lr, lr, #1
    4cee:	cmp	r2, #0
    4cf0:	beq.n	4ce6 <__kernel_rem_pio2+0x23e>
    4cf2:	add	lr, r5
    4cf4:	adds	r3, r5, #1
    4cf6:	cmp	r3, lr
    4cf8:	bgt.n	4d56 <__kernel_rem_pio2+0x2ae>
    4cfa:	ldr	r2, [sp, #8]
    4cfc:	adds	r0, r3, r2
    4cfe:	ldr	r2, [sp, #4]
    4d00:	add.w	r0, r0, #1073741824	; 0x40000000
    4d04:	adds	r1, r2, r5
    4d06:	add.w	ip, lr, r2
    4d0a:	ldr	r2, [sp, #660]	; 0x294
    4d0c:	subs	r0, #1
    4d0e:	add.w	r0, r2, r0, lsl #2
    4d12:	add	r2, sp, #104	; 0x68
    4d14:	add.w	r1, r2, r1, lsl #3
    4d18:	add.w	ip, r2, ip, lsl #3
    4d1c:	add	r2, sp, #424	; 0x1a8
    4d1e:	add.w	r5, r2, r3, lsl #3
    4d22:	ldr.w	r3, [r0, #4]!
    4d26:	vmov	s14, r3
    4d2a:	vcvt.f64.s32	d7, s14
    4d2e:	cmp	r7, #0
    4d30:	vstmia	r1!, {d7}
    4d34:	vldr	d7, [pc, #40]	; 4d60 <__kernel_rem_pio2+0x2b8>
    4d38:	blt.n	4d4e <__kernel_rem_pio2+0x2a6>
    4d3a:	mov	r3, r9
    4d3c:	mov	r2, r1
    4d3e:	vldmia	r3!, {d5}
    4d42:	vldmdb	r2!, {d6}
    4d46:	cmp	r3, r4
    4d48:	vfma.f64	d7, d5, d6
    4d4c:	bne.n	4d3e <__kernel_rem_pio2+0x296>
    4d4e:	cmp	r1, ip
    4d50:	vstmia	r5!, {d7}
    4d54:	bne.n	4d22 <__kernel_rem_pio2+0x27a>
    4d56:	mov	r5, lr
    4d58:	b.n	4b8c <__kernel_rem_pio2+0xe4>
    4d5a:	nop
    4d5c:	nop.w
	...
    4d6c:	.word	0x3e700000
    4d70:	.word	0x00000000
    4d74:	.word	0x41700000
    4d78:	.word	0x20000764
    4d7c:	.word	0x2aaaaaab
    4d80:	vmov.f64	d0, #112	; 0x3f800000  1.0
    4d84:	vsub.f64	d10, d0, d10
    4d88:	cmp	r0, #0
    4d8a:	beq.n	4ca0 <__kernel_rem_pio2+0x1f8>
    4d8c:	mov	r0, sl
    4d8e:	str	r1, [sp, #20]
    4d90:	bl	5540 <scalbn>
    4d94:	vsub.f64	d10, d10, d0
    4d98:	vcmp.f64	d10, #0.0
    4d9c:	vmrs	APSR_nzcv, fpscr
    4da0:	ldr	r1, [sp, #20]
    4da2:	beq.n	4caa <__kernel_rem_pio2+0x202>
    4da4:	vmov.f64	d0, d10
    4da8:	rsb	r0, sl, #0
    4dac:	vmov	s22, fp
    4db0:	mov	r9, r1
    4db2:	ldr.w	fp, [sp, #16]
    4db6:	bl	5540 <scalbn>
    4dba:	vldr	d6, [pc, #836]	; 5100 <__kernel_rem_pio2+0x658>
    4dbe:	vcmpe.f64	d0, d6
    4dc2:	vmrs	APSR_nzcv, fpscr
    4dc6:	blt.w	50ae <__kernel_rem_pio2+0x606>
    4dca:	vldr	d7, [pc, #828]	; 5108 <__kernel_rem_pio2+0x660>
    4dce:	vmul.f64	d7, d0, d7
    4dd2:	vcvt.s32.f64	s14, d7
    4dd6:	add	r1, sp, #24
    4dd8:	vcvt.f64.s32	d5, s14
    4ddc:	vfms.f64	d0, d5, d6
    4de0:	vcvt.s32.f64	s0, d0
    4de4:	adds	r3, r5, #1
    4de6:	vmov	r2, s0
    4dea:	str.w	r2, [r1, r5, lsl #2]
    4dee:	vmov	r2, s14
    4df2:	str.w	r2, [r1, r3, lsl #2]
    4df6:	add.w	sl, sl, #24
    4dfa:	vmov.f64	d0, #112	; 0x3f800000  1.0
    4dfe:	mov	r0, sl
    4e00:	str	r3, [sp, #4]
    4e02:	bl	5540 <scalbn>
    4e06:	ldr	r3, [sp, #4]
    4e08:	cmp	r3, #0
    4e0a:	blt.w	50ca <__kernel_rem_pio2+0x622>
    4e0e:	add	r4, sp, #424	; 0x1a8
    4e10:	lsls	r7, r3, #3
    4e12:	add	r2, sp, #24
    4e14:	vldr	d6, [pc, #752]	; 5108 <__kernel_rem_pio2+0x660>
    4e18:	add.w	r2, r2, r3, lsl #2
    4e1c:	add.w	ip, r4, r7
    4e20:	adds	r2, #4
    4e22:	add.w	r0, ip, #8
    4e26:	vldmdb	r2!, {s14}
    4e2a:	vcvt.f64.s32	d7, s14
    4e2e:	vmul.f64	d7, d7, d0
    4e32:	vstmdb	r0!, {d7}
    4e36:	vmul.f64	d0, d0, d6
    4e3a:	cmp	r0, r4
    4e3c:	bne.n	4e26 <__kernel_rem_pio2+0x37e>
    4e3e:	add.w	r8, sp, #416	; 0x1a0
    4e42:	movs	r5, #0
    4e44:	add.w	lr, sp, #264	; 0x108
    4e48:	cmp	r6, #0
    4e4a:	blt.w	5072 <__kernel_rem_pio2+0x5ca>
    4e4e:	ldr	r0, [pc, #720]	; (5120 <__kernel_rem_pio2+0x678>)
    4e50:	mov	r1, ip
    4e52:	vldr	d6, [pc, #700]	; 5110 <__kernel_rem_pio2+0x668>
    4e56:	vldr	d7, [pc, #704]	; 5118 <__kernel_rem_pio2+0x670>
    4e5a:	movs	r2, #0
    4e5c:	b.n	4e66 <__kernel_rem_pio2+0x3be>
    4e5e:	cmp	r5, r2
    4e60:	blt.n	4e74 <__kernel_rem_pio2+0x3cc>
    4e62:	vldmia	r0!, {d6}
    4e66:	vldmia	r1!, {d5}
    4e6a:	adds	r2, #1
    4e6c:	cmp	r6, r2
    4e6e:	vfma.f64	d7, d5, d6
    4e72:	bge.n	4e5e <__kernel_rem_pio2+0x3b6>
    4e74:	sub.w	ip, ip, #8
    4e78:	add.w	r2, lr, r5, lsl #3
    4e7c:	cmp	ip, r8
    4e7e:	vstr	d7, [r2]
    4e82:	add.w	r5, r5, #1
    4e86:	bne.n	4e48 <__kernel_rem_pio2+0x3a0>
    4e88:	ldr	r2, [sp, #656]	; 0x290
    4e8a:	cmp	r2, #3
    4e8c:	bhi.w	4fea <__kernel_rem_pio2+0x542>
    4e90:	tbb	[pc, r2]
    4e94:	.word	0x50b5b5dd
    4e98:	bne.n	4ebc <__kernel_rem_pio2+0x414>
    4e9a:	subs	r3, r5, #1
    4e9c:	add	r2, sp, #24
    4e9e:	ldr.w	r1, [r2, r3, lsl #2]
    4ea2:	asrs	r1, r1, #23
    4ea4:	b.n	4c28 <__kernel_rem_pio2+0x180>
    4ea6:	subs	r2, r5, #1
    4ea8:	add	r3, sp, #24
    4eaa:	add.w	lr, sp, #24
    4eae:	ldr.w	r3, [r3, r2, lsl #2]
    4eb2:	ubfx	r3, r3, #0, #23
    4eb6:	str.w	r3, [lr, r2, lsl #2]
    4eba:	b.n	4c9c <__kernel_rem_pio2+0x1f4>
    4ebc:	vmov.f64	d7, #96	; 0x3f000000  0.5
    4ec0:	vcmpe.f64	d10, d7
    4ec4:	vmrs	APSR_nzcv, fpscr
    4ec8:	bge.n	4ee2 <__kernel_rem_pio2+0x43a>
    4eca:	movs	r1, #0
    4ecc:	b.n	4ca0 <__kernel_rem_pio2+0x1f8>
    4ece:	vldr	d7, [pc, #584]	; 5118 <__kernel_rem_pio2+0x670>
    4ed2:	vstmia	r0!, {d7}
    4ed6:	cmp	r0, lr
    4ed8:	add.w	r5, r5, #1
    4edc:	bne.w	4b38 <__kernel_rem_pio2+0x90>
    4ee0:	b.n	4b68 <__kernel_rem_pio2+0xc0>
    4ee2:	cmp	r5, #0
    4ee4:	add.w	fp, fp, #1
    4ee8:	it	gt
    4eea:	movgt	r1, #2
    4eec:	bgt.w	4c36 <__kernel_rem_pio2+0x18e>
    4ef0:	vmov.f64	d7, #112	; 0x3f800000  1.0
    4ef4:	movs	r1, #2
    4ef6:	vsub.f64	d10, d7, d10
    4efa:	b.n	4ca0 <__kernel_rem_pio2+0x1f8>
    4efc:	add	r2, sp, #24
    4efe:	vmov	s22, fp
    4f02:	ldr.w	r2, [r2, lr, lsl #2]
    4f06:	ldr.w	fp, [sp, #16]
    4f0a:	mov	r3, lr
    4f0c:	mov	r9, r1
    4f0e:	sub.w	sl, sl, #24
    4f12:	cmp	r2, #0
    4f14:	bne.w	4dfa <__kernel_rem_pio2+0x352>
    4f18:	add.w	r2, lr, #1073741824	; 0x40000000
    4f1c:	subs	r2, #1
    4f1e:	add	r1, sp, #24
    4f20:	add.w	r2, r1, r2, lsl #2
    4f24:	ldr.w	r1, [r2], #-4
    4f28:	subs	r3, #1
    4f2a:	sub.w	sl, sl, #24
    4f2e:	cmp	r1, #0
    4f30:	beq.n	4f24 <__kernel_rem_pio2+0x47c>
    4f32:	b.n	4dfa <__kernel_rem_pio2+0x352>
    4f34:	cmp	r3, #0
    4f36:	ble.w	50c4 <__kernel_rem_pio2+0x61c>
    4f3a:	add.w	r2, r3, #536870912	; 0x20000000
    4f3e:	subs	r2, #1
    4f40:	add.w	r4, lr, r7
    4f44:	lsls	r0, r2, #3
    4f46:	vldr	d7, [r4]
    4f4a:	add.w	r4, r0, #8
    4f4e:	adds	r0, #16
    4f50:	add	r4, lr
    4f52:	add	r0, lr
    4f54:	add	r5, sp, #272	; 0x110
    4f56:	vldmdb	r4!, {d6}
    4f5a:	vadd.f64	d5, d6, d7
    4f5e:	vsub.f64	d6, d6, d5
    4f62:	vadd.f64	d7, d6, d7
    4f66:	vstmdb	r0!, {d7}
    4f6a:	vmov.f64	d7, d5
    4f6e:	cmp	r0, r5
    4f70:	vstr	d5, [r4]
    4f74:	bne.n	4f56 <__kernel_rem_pio2+0x4ae>
    4f76:	cmp	r3, #1
    4f78:	ble.w	50c4 <__kernel_rem_pio2+0x61c>
    4f7c:	lsls	r2, r2, #3
    4f7e:	add	r7, lr
    4f80:	add.w	r0, r2, #16
    4f84:	vldr	d7, [r7]
    4f88:	adds	r2, #8
    4f8a:	add	r0, lr
    4f8c:	add.w	r3, lr, r2
    4f90:	add	r4, sp, #280	; 0x118
    4f92:	mov	r2, r0
    4f94:	vldmdb	r3!, {d6}
    4f98:	vadd.f64	d5, d7, d6
    4f9c:	vsub.f64	d6, d6, d5
    4fa0:	vadd.f64	d7, d6, d7
    4fa4:	vstmdb	r2!, {d7}
    4fa8:	vmov.f64	d7, d5
    4fac:	cmp	r4, r2
    4fae:	vstr	d5, [r3]
    4fb2:	bne.n	4f94 <__kernel_rem_pio2+0x4ec>
    4fb4:	vldr	d7, [pc, #352]	; 5118 <__kernel_rem_pio2+0x670>
    4fb8:	vldmdb	r0!, {d6}
    4fbc:	cmp	r4, r0
    4fbe:	vadd.f64	d7, d7, d6
    4fc2:	bne.n	4fb8 <__kernel_rem_pio2+0x510>
    4fc4:	mov	r3, r9
    4fc6:	cmp	r3, #0
    4fc8:	beq.n	5098 <__kernel_rem_pio2+0x5f0>
    4fca:	vneg.f64	d7, d7
    4fce:	vldr	d5, [lr]
    4fd2:	vldr	d6, [lr, #8]
    4fd6:	vneg.f64	d5, d5
    4fda:	vstr	d5, [fp]
    4fde:	vstr	d7, [fp, #16]
    4fe2:	vneg.f64	d7, d6
    4fe6:	vstr	d7, [fp, #8]
    4fea:	vmov	r3, s22
    4fee:	and.w	r0, r3, #7
    4ff2:	add.w	sp, sp, #588	; 0x24c
    4ff6:	vpop	{d8-d11}
    4ffa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ffe:	vldr	d7, [pc, #280]	; 5118 <__kernel_rem_pio2+0x670>
    5002:	add.w	r2, r7, #8
    5006:	add	r2, lr
    5008:	vldmdb	r2!, {d6}
    500c:	cmp	r2, lr
    500e:	vadd.f64	d7, d7, d6
    5012:	bne.n	5008 <__kernel_rem_pio2+0x560>
    5014:	mov	r2, r9
    5016:	cbz	r2, 5082 <__kernel_rem_pio2+0x5da>
    5018:	vneg.f64	d5, d7
    501c:	vldr	d6, [lr]
    5020:	cmp	r3, #0
    5022:	vstr	d5, [fp]
    5026:	vsub.f64	d7, d6, d7
    502a:	ble.n	5044 <__kernel_rem_pio2+0x59c>
    502c:	add	r0, sp, #272	; 0x110
    502e:	movs	r2, #1
    5030:	vldmia	r0!, {d6}
    5034:	adds	r2, #1
    5036:	cmp	r3, r2
    5038:	vadd.f64	d7, d7, d6
    503c:	bge.n	5030 <__kernel_rem_pio2+0x588>
    503e:	mov	r3, r9
    5040:	cmp	r3, #0
    5042:	beq.n	4fe6 <__kernel_rem_pio2+0x53e>
    5044:	vneg.f64	d7, d7
    5048:	vstr	d7, [fp, #8]
    504c:	b.n	4fea <__kernel_rem_pio2+0x542>
    504e:	vldr	d7, [pc, #200]	; 5118 <__kernel_rem_pio2+0x670>
    5052:	adds	r7, #8
    5054:	add	lr, r7
    5056:	vldmdb	lr!, {d6}
    505a:	subs	r3, #1
    505c:	adds	r2, r3, #1
    505e:	vadd.f64	d7, d7, d6
    5062:	bne.n	5056 <__kernel_rem_pio2+0x5ae>
    5064:	mov	r3, r9
    5066:	cbz	r3, 506c <__kernel_rem_pio2+0x5c4>
    5068:	vneg.f64	d7, d7
    506c:	vstr	d7, [fp]
    5070:	b.n	4fea <__kernel_rem_pio2+0x542>
    5072:	vldr	d7, [pc, #164]	; 5118 <__kernel_rem_pio2+0x670>
    5076:	b.n	4e74 <__kernel_rem_pio2+0x3cc>
    5078:	mov.w	lr, #1
    507c:	b.n	4cf2 <__kernel_rem_pio2+0x24a>
    507e:	movs	r0, #0
    5080:	b.n	4c74 <__kernel_rem_pio2+0x1cc>
    5082:	vldr	d6, [lr]
    5086:	cmp	r3, #0
    5088:	vstr	d7, [fp]
    508c:	vsub.f64	d7, d6, d7
    5090:	bgt.n	502c <__kernel_rem_pio2+0x584>
    5092:	vstr	d7, [fp, #8]
    5096:	b.n	4fea <__kernel_rem_pio2+0x542>
    5098:	ldrd	r0, r1, [lr]
    509c:	ldrd	r2, r3, [lr, #8]
    50a0:	vstr	d7, [fp, #16]
    50a4:	strd	r0, r1, [fp]
    50a8:	strd	r2, r3, [fp, #8]
    50ac:	b.n	4fea <__kernel_rem_pio2+0x542>
    50ae:	vcvt.s32.f64	s0, d0
    50b2:	add	r1, sp, #24
    50b4:	vmov	r2, s0
    50b8:	mov	r3, r5
    50ba:	str.w	r2, [r1, r5, lsl #2]
    50be:	b.n	4dfa <__kernel_rem_pio2+0x352>
    50c0:	add.w	lr, sp, #264	; 0x108
    50c4:	vldr	d7, [pc, #80]	; 5118 <__kernel_rem_pio2+0x670>
    50c8:	b.n	4fc4 <__kernel_rem_pio2+0x51c>
    50ca:	ldr	r2, [sp, #656]	; 0x290
    50cc:	cmp	r2, #3
    50ce:	bhi.n	4fea <__kernel_rem_pio2+0x542>
    50d0:	add	r1, pc, #4	; (adr r1, 50d8 <__kernel_rem_pio2+0x630>)
    50d2:	ldr.w	pc, [r1, r2, lsl #2]
    50d6:	nop
    50d8:	.word	0x000050f9
    50dc:	.word	0x000050ef
    50e0:	.word	0x000050ef
    50e4:	.word	0x000050c1
    50e8:	ldr	r3, [sp, #4]
    50ea:	lsls	r4, r3, #3
    50ec:	b.n	4b68 <__kernel_rem_pio2+0xc0>
    50ee:	vldr	d7, [pc, #40]	; 5118 <__kernel_rem_pio2+0x670>
    50f2:	add.w	lr, sp, #264	; 0x108
    50f6:	b.n	5014 <__kernel_rem_pio2+0x56c>
    50f8:	vldr	d7, [pc, #28]	; 5118 <__kernel_rem_pio2+0x670>
    50fc:	b.n	5064 <__kernel_rem_pio2+0x5bc>
    50fe:	nop
    5100:	.word	0x00000000
    5104:	.word	0x41700000
    5108:	.word	0x00000000
    510c:	.word	0x3e700000
    5110:	.word	0x40000000
    5114:	.word	0x3ff921fb
	...
    5120:	.word	0x20000780
    5124:	.word	0x00000000

00005128 <__kernel_sin>:
    5128:	vmov	r3, s1
    512c:	bic.w	r3, r3, #2147483648	; 0x80000000
    5130:	cmp.w	r3, #1044381696	; 0x3e400000
    5134:	bge.n	5140 <__kernel_sin+0x18>
    5136:	vcvt.s32.f64	s15, d0
    513a:	vmov	r3, s15
    513e:	cbz	r3, 518a <__kernel_sin+0x62>
    5140:	vmul.f64	d7, d0, d0
    5144:	vmul.f64	d4, d0, d7
    5148:	vldr	d5, [pc, #84]	; 51a0 <__kernel_sin+0x78>
    514c:	vldr	d6, [pc, #88]	; 51a8 <__kernel_sin+0x80>
    5150:	vldr	d3, [pc, #92]	; 51b0 <__kernel_sin+0x88>
    5154:	vfma.f64	d6, d7, d5
    5158:	vldr	d5, [pc, #92]	; 51b8 <__kernel_sin+0x90>
    515c:	vfma.f64	d3, d7, d6
    5160:	vldr	d6, [pc, #92]	; 51c0 <__kernel_sin+0x98>
    5164:	vfma.f64	d5, d7, d3
    5168:	vfma.f64	d6, d7, d5
    516c:	cbz	r0, 518c <__kernel_sin+0x64>
    516e:	vnmul.f64	d6, d6, d4
    5172:	vmov.f64	d3, #96	; 0x3f000000  0.5
    5176:	vldr	d5, [pc, #80]	; 51c8 <__kernel_sin+0xa0>
    517a:	vfma.f64	d6, d1, d3
    517e:	vfnms.f64	d1, d7, d6
    5182:	vfma.f64	d1, d4, d5
    5186:	vsub.f64	d0, d0, d1
    518a:	bx	lr
    518c:	vldr	d5, [pc, #64]	; 51d0 <__kernel_sin+0xa8>
    5190:	vfma.f64	d5, d7, d6
    5194:	vfma.f64	d0, d4, d5
    5198:	bx	lr
    519a:	nop
    519c:	nop.w
    51a0:	.word	0x5acfd57c
    51a4:	.word	0x3de5d93a
    51a8:	.word	0x8a2b9ceb
    51ac:	.word	0xbe5ae5e6
    51b0:	.word	0x57b1fe7d
    51b4:	.word	0x3ec71de3
    51b8:	.word	0x19c161d5
    51bc:	.word	0xbf2a01a0
    51c0:	.word	0x1110f8a6
    51c4:	.word	0x3f811111
    51c8:	.word	0x55555549
    51cc:	.word	0x3fc55555
    51d0:	.word	0x55555549
    51d4:	.word	0xbfc55555

000051d8 <__kernel_tan>:
    51d8:	push	{lr}
    51da:	vmov.f64	d7, d0
    51de:	vmov	r3, s15
    51e2:	vpush	{d8}
    51e6:	ldr	r1, [pc, #552]	; (5410 <__kernel_tan+0x238>)
    51e8:	bic.w	r2, r3, #2147483648	; 0x80000000
    51ec:	cmp	r2, r1
    51ee:	sub	sp, #20
    51f0:	bgt.n	5222 <__kernel_tan+0x4a>
    51f2:	vcvt.s32.f64	s13, d0
    51f6:	vmov	r1, s13
    51fa:	cbnz	r1, 524e <__kernel_tan+0x76>
    51fc:	vmov	r3, s0
    5200:	orrs	r2, r3
    5202:	adds	r3, r0, #1
    5204:	orrs	r3, r2
    5206:	beq.w	5376 <__kernel_tan+0x19e>
    520a:	cmp	r0, #1
    520c:	beq.w	5324 <__kernel_tan+0x14c>
    5210:	vmov.f64	d6, #240	; 0xbf800000 -1.0
    5214:	vdiv.f64	d0, d6, d7
    5218:	add	sp, #20
    521a:	vpop	{d8}
    521e:	ldr.w	pc, [sp], #4
    5222:	ldr	r1, [pc, #496]	; (5414 <__kernel_tan+0x23c>)
    5224:	cmp	r2, r1
    5226:	ble.n	524e <__kernel_tan+0x76>
    5228:	vldr	d5, [pc, #356]	; 5390 <__kernel_tan+0x1b8>
    522c:	cmp	r3, #0
    522e:	vldr	d6, [pc, #360]	; 5398 <__kernel_tan+0x1c0>
    5232:	it	lt
    5234:	vneglt.f64	d1, d1
    5238:	vsub.f64	d5, d5, d1
    523c:	vldr	d1, [pc, #352]	; 53a0 <__kernel_tan+0x1c8>
    5240:	it	lt
    5242:	vneglt.f64	d7, d0
    5246:	vsub.f64	d7, d6, d7
    524a:	vadd.f64	d7, d5, d7
    524e:	vldr	d0, [pc, #344]	; 53a8 <__kernel_tan+0x1d0>
    5252:	vmul.f64	d5, d7, d7
    5256:	vmul.f64	d6, d5, d5
    525a:	vldr	d3, [pc, #340]	; 53b0 <__kernel_tan+0x1d8>
    525e:	vmul.f64	d2, d7, d5
    5262:	vfma.f64	d3, d6, d0
    5266:	vldr	d4, [pc, #336]	; 53b8 <__kernel_tan+0x1e0>
    526a:	vldr	d0, [pc, #340]	; 53c0 <__kernel_tan+0x1e8>
    526e:	vfma.f64	d4, d6, d3
    5272:	vldr	d3, [pc, #340]	; 53c8 <__kernel_tan+0x1f0>
    5276:	vfma.f64	d0, d6, d4
    527a:	vldr	d4, [pc, #340]	; 53d0 <__kernel_tan+0x1f8>
    527e:	vfma.f64	d3, d6, d0
    5282:	vldr	d8, [pc, #340]	; 53d8 <__kernel_tan+0x200>
    5286:	vfma.f64	d4, d6, d3
    528a:	vldr	d0, [pc, #340]	; 53e0 <__kernel_tan+0x208>
    528e:	vldr	d3, [pc, #344]	; 53e8 <__kernel_tan+0x210>
    5292:	vfma.f64	d8, d6, d0
    5296:	vldr	d0, [pc, #344]	; 53f0 <__kernel_tan+0x218>
    529a:	vfma.f64	d3, d6, d8
    529e:	vldr	d8, [pc, #344]	; 53f8 <__kernel_tan+0x220>
    52a2:	vfma.f64	d0, d6, d3
    52a6:	ldr	r1, [pc, #364]	; (5414 <__kernel_tan+0x23c>)
    52a8:	vfma.f64	d8, d6, d0
    52ac:	vldr	d3, [pc, #336]	; 5400 <__kernel_tan+0x228>
    52b0:	vldr	d0, [pc, #340]	; 5408 <__kernel_tan+0x230>
    52b4:	vfma.f64	d3, d6, d8
    52b8:	vfma.f64	d4, d5, d3
    52bc:	cmp	r2, r1
    52be:	vmov.f64	d6, d4
    52c2:	vmov.f64	d4, d1
    52c6:	vfma.f64	d4, d2, d6
    52ca:	vfma.f64	d1, d5, d4
    52ce:	vfma.f64	d1, d2, d0
    52d2:	vadd.f64	d6, d7, d1
    52d6:	vstr	d6, [sp]
    52da:	bgt.n	532e <__kernel_tan+0x156>
    52dc:	cmp	r0, #1
    52de:	beq.n	5384 <__kernel_tan+0x1ac>
    52e0:	vmov.f64	d6, #240	; 0xbf800000 -1.0
    52e4:	vldr	d4, [sp]
    52e8:	vdiv.f64	d5, d6, d4
    52ec:	vstr	d5, [sp, #8]
    52f0:	vmov.f64	d5, #112	; 0x3f800000  1.0
    52f4:	ldrd	r0, r1, [sp]
    52f8:	ldrd	r2, r3, [sp, #8]
    52fc:	movs	r0, #0
    52fe:	mov	r2, r0
    5300:	vmov	d0, r2, r3
    5304:	vmov	d6, r0, r1
    5308:	vsub.f64	d4, d6, d7
    530c:	vmov.f64	d7, d5
    5310:	vfma.f64	d7, d6, d0
    5314:	vldr	d6, [sp, #8]
    5318:	vsub.f64	d1, d1, d4
    531c:	vfma.f64	d7, d1, d0
    5320:	vfma.f64	d0, d6, d7
    5324:	add	sp, #20
    5326:	vpop	{d8}
    532a:	ldr.w	pc, [sp], #4
    532e:	asrs	r3, r3, #30
    5330:	vmul.f64	d2, d6, d6
    5334:	and.w	r3, r3, #2
    5338:	vmov	s13, r0
    533c:	vmov.f64	d4, #0	; 0x40000000  2.0
    5340:	rsb	r3, r3, #1
    5344:	vcvt.f64.s32	d0, s13
    5348:	vmov	s13, r3
    534c:	vldr	d5, [sp]
    5350:	vcvt.f64.s32	d6, s13
    5354:	vadd.f64	d3, d5, d0
    5358:	vdiv.f64	d5, d2, d3
    535c:	vsub.f64	d1, d5, d1
    5360:	vsub.f64	d7, d7, d1
    5364:	vfms.f64	d0, d7, d4
    5368:	vmul.f64	d0, d0, d6
    536c:	add	sp, #20
    536e:	vpop	{d8}
    5372:	ldr.w	pc, [sp], #4
    5376:	bl	5418 <fabs>
    537a:	vmov.f64	d7, #112	; 0x3f800000  1.0
    537e:	vdiv.f64	d0, d7, d0
    5382:	b.n	5324 <__kernel_tan+0x14c>
    5384:	vldr	d0, [sp]
    5388:	b.n	5324 <__kernel_tan+0x14c>
    538a:	nop
    538c:	nop.w
    5390:	.word	0x33145c07
    5394:	.word	0x3c81a626
    5398:	.word	0x54442d18
    539c:	.word	0x3fe921fb
	...
    53a8:	.word	0xdb605373
    53ac:	.word	0xbef375cb
    53b0:	.word	0xa03792a6
    53b4:	.word	0x3f147e88
    53b8:	.word	0xf2f26501
    53bc:	.word	0x3f4344d8
    53c0:	.word	0xc9560328
    53c4:	.word	0x3f6d6d22
    53c8:	.word	0x8406d637
    53cc:	.word	0x3f9664f4
    53d0:	.word	0x1110fe7a
    53d4:	.word	0x3fc11111
    53d8:	.word	0x32f0a7e9
    53dc:	.word	0x3f12b80f
    53e0:	.word	0x74bf7ad4
    53e4:	.word	0x3efb2a70
    53e8:	.word	0x1a8d1068
    53ec:	.word	0x3f3026f7
    53f0:	.word	0xfee08315
    53f4:	.word	0x3f57dbc8
    53f8:	.word	0xe96e8493
    53fc:	.word	0x3f8226e3
    5400:	.word	0x1bb341fe
    5404:	.word	0x3faba1ba
    5408:	.word	0x55555563
    540c:	.word	0x3fd55555
    5410:	.word	0x3e2fffff
    5414:	.word	0x3fe59427

00005418 <fabs>:
    5418:	vmov	r2, r3, d0
    541c:	bic.w	r3, r3, #2147483648	; 0x80000000
    5420:	vmov	d0, r2, r3
    5424:	bx	lr
    5426:	nop

00005428 <floor>:
    5428:	push	{r4, r5, r6}
    542a:	sub	sp, #12
    542c:	vstr	d0, [sp]
    5430:	ldr	r1, [sp, #4]
    5432:	ldr	r4, [sp, #0]
    5434:	ubfx	r2, r1, #20, #11
    5438:	subw	r3, r2, #1023	; 0x3ff
    543c:	cmp	r3, #19
    543e:	mov	r5, r1
    5440:	mov	r0, r4
    5442:	bgt.n	5482 <floor+0x5a>
    5444:	cmp	r3, #0
    5446:	blt.n	54d0 <floor+0xa8>
    5448:	ldr	r2, [pc, #236]	; (5538 <floor+0x110>)
    544a:	asrs	r2, r3
    544c:	and.w	r6, r1, r2
    5450:	orrs	r4, r6
    5452:	beq.n	548c <floor+0x64>
    5454:	vldr	d7, [pc, #216]	; 5530 <floor+0x108>
    5458:	vldr	d6, [sp]
    545c:	vadd.f64	d7, d6, d7
    5460:	vcmpe.f64	d7, #0.0
    5464:	vmrs	APSR_nzcv, fpscr
    5468:	ble.n	5474 <floor+0x4c>
    546a:	cmp	r1, #0
    546c:	blt.n	54f6 <floor+0xce>
    546e:	bic.w	r1, r5, r2
    5472:	movs	r0, #0
    5474:	mov	r3, r1
    5476:	mov	r2, r0
    5478:	vmov	d0, r2, r3
    547c:	add	sp, #12
    547e:	pop	{r4, r5, r6}
    5480:	bx	lr
    5482:	cmp	r3, #51	; 0x33
    5484:	ble.n	5496 <floor+0x6e>
    5486:	cmp.w	r3, #1024	; 0x400
    548a:	beq.n	54ec <floor+0xc4>
    548c:	vldr	d0, [sp]
    5490:	add	sp, #12
    5492:	pop	{r4, r5, r6}
    5494:	bx	lr
    5496:	subw	r2, r2, #1043	; 0x413
    549a:	mov.w	r4, #4294967295
    549e:	lsr.w	r2, r4, r2
    54a2:	tst	r0, r2
    54a4:	beq.n	548c <floor+0x64>
    54a6:	vldr	d7, [pc, #136]	; 5530 <floor+0x108>
    54aa:	vldr	d6, [sp]
    54ae:	vadd.f64	d7, d6, d7
    54b2:	vcmpe.f64	d7, #0.0
    54b6:	vmrs	APSR_nzcv, fpscr
    54ba:	ble.n	5474 <floor+0x4c>
    54bc:	cmp	r1, #0
    54be:	blt.n	5502 <floor+0xda>
    54c0:	mov	r1, r5
    54c2:	bic.w	r0, r0, r2
    54c6:	mov	r3, r1
    54c8:	mov	r2, r0
    54ca:	vmov	d0, r2, r3
    54ce:	b.n	547c <floor+0x54>
    54d0:	vldr	d7, [pc, #92]	; 5530 <floor+0x108>
    54d4:	vadd.f64	d7, d0, d7
    54d8:	vcmpe.f64	d7, #0.0
    54dc:	vmrs	APSR_nzcv, fpscr
    54e0:	ble.n	5474 <floor+0x4c>
    54e2:	cmp	r1, #0
    54e4:	blt.n	5518 <floor+0xf0>
    54e6:	movs	r0, #0
    54e8:	mov	r1, r0
    54ea:	b.n	5474 <floor+0x4c>
    54ec:	vldr	d7, [sp]
    54f0:	vadd.f64	d0, d7, d7
    54f4:	b.n	5490 <floor+0x68>
    54f6:	mov.w	r1, #1048576	; 0x100000
    54fa:	asr.w	r3, r1, r3
    54fe:	add	r5, r3
    5500:	b.n	546e <floor+0x46>
    5502:	cmp	r3, #20
    5504:	beq.n	5528 <floor+0x100>
    5506:	movs	r1, #1
    5508:	rsb	r3, r3, #52	; 0x34
    550c:	lsl.w	r3, r1, r3
    5510:	adds	r0, r3, r0
    5512:	it	cs
    5514:	addcs	r5, r5, r1
    5516:	b.n	54c0 <floor+0x98>
    5518:	bic.w	r2, r1, #2147483648	; 0x80000000
    551c:	ldr	r3, [pc, #28]	; (553c <floor+0x114>)
    551e:	orrs	r2, r4
    5520:	it	ne
    5522:	movne	r1, r3
    5524:	movs	r0, #0
    5526:	b.n	5474 <floor+0x4c>
    5528:	adds	r5, #1
    552a:	b.n	54c0 <floor+0x98>
    552c:	nop.w
    5530:	.word	0x8800759c
    5534:	.word	0x7e37e43c
    5538:	.word	0x000fffff
    553c:	.word	0xbff00000

00005540 <scalbn>:
    5540:	push	{r4, lr}
    5542:	vpush	{d8}
    5546:	sub	sp, #8
    5548:	vstr	d0, [sp]
    554c:	ldr	r3, [sp, #4]
    554e:	ldr	r1, [sp, #0]
    5550:	ubfx	r2, r3, #20, #11
    5554:	cbnz	r2, 55a2 <scalbn+0x62>
    5556:	bic.w	r3, r3, #2147483648	; 0x80000000
    555a:	orrs	r3, r1
    555c:	beq.n	55ba <scalbn+0x7a>
    555e:	vldr	d7, [pc, #216]	; 5638 <scalbn+0xf8>
    5562:	ldr	r2, [pc, #244]	; (5658 <scalbn+0x118>)
    5564:	vmul.f64	d7, d0, d7
    5568:	cmp	r0, r2
    556a:	vstr	d7, [sp]
    556e:	ldr	r3, [sp, #4]
    5570:	blt.n	55c6 <scalbn+0x86>
    5572:	ubfx	r2, r3, #20, #11
    5576:	subs	r2, #54	; 0x36
    5578:	adds	r4, r0, r2
    557a:	movw	r2, #2046	; 0x7fe
    557e:	cmp	r4, r2
    5580:	bgt.n	55e4 <scalbn+0xa4>
    5582:	cmp	r4, #0
    5584:	ble.n	55d6 <scalbn+0x96>
    5586:	bic.w	r1, r3, #2139095040	; 0x7f800000
    558a:	ldrd	r2, r3, [sp]
    558e:	bic.w	r1, r1, #7340032	; 0x700000
    5592:	orr.w	r3, r1, r4, lsl #20
    5596:	vmov	d0, r2, r3
    559a:	add	sp, #8
    559c:	vpop	{d8}
    55a0:	pop	{r4, pc}
    55a2:	movw	r1, #2047	; 0x7ff
    55a6:	cmp	r2, r1
    55a8:	bne.n	5578 <scalbn+0x38>
    55aa:	vldr	d7, [sp]
    55ae:	vadd.f64	d0, d7, d7
    55b2:	add	sp, #8
    55b4:	vpop	{d8}
    55b8:	pop	{r4, pc}
    55ba:	vldr	d0, [sp]
    55be:	add	sp, #8
    55c0:	vpop	{d8}
    55c4:	pop	{r4, pc}
    55c6:	vldr	d0, [pc, #120]	; 5640 <scalbn+0x100>
    55ca:	vmul.f64	d0, d7, d0
    55ce:	add	sp, #8
    55d0:	vpop	{d8}
    55d4:	pop	{r4, pc}
    55d6:	cmn.w	r4, #53	; 0x35
    55da:	bge.n	5600 <scalbn+0xc0>
    55dc:	movw	r3, #50000	; 0xc350
    55e0:	cmp	r0, r3
    55e2:	ble.n	5620 <scalbn+0xe0>
    55e4:	vldr	d8, [pc, #96]	; 5648 <scalbn+0x108>
    55e8:	vldr	d1, [sp]
    55ec:	vmov.f64	d0, d8
    55f0:	bl	565c <copysign>
    55f4:	vmul.f64	d0, d0, d8
    55f8:	add	sp, #8
    55fa:	vpop	{d8}
    55fe:	pop	{r4, pc}
    5600:	bic.w	r1, r3, #2139095040	; 0x7f800000
    5604:	ldrd	r2, r3, [sp]
    5608:	bic.w	r1, r1, #7340032	; 0x700000
    560c:	adds	r4, #54	; 0x36
    560e:	orr.w	r3, r1, r4, lsl #20
    5612:	vldr	d0, [pc, #60]	; 5650 <scalbn+0x110>
    5616:	vmov	d7, r2, r3
    561a:	vmul.f64	d0, d7, d0
    561e:	b.n	559a <scalbn+0x5a>
    5620:	vldr	d8, [pc, #28]	; 5640 <scalbn+0x100>
    5624:	vldr	d1, [sp]
    5628:	vmov.f64	d0, d8
    562c:	bl	565c <copysign>
    5630:	vmul.f64	d0, d0, d8
    5634:	b.n	559a <scalbn+0x5a>
    5636:	nop
    5638:	.word	0x00000000
    563c:	.word	0x43500000
    5640:	.word	0xc2f8f359
    5644:	.word	0x01a56e1f
    5648:	.word	0x8800759c
    564c:	.word	0x7e37e43c
    5650:	.word	0x00000000
    5654:	.word	0x3c900000
    5658:	.word	0xffff3cb0

0000565c <copysign>:
    565c:	vmov	r2, r3, d0
    5660:	vmov	r0, s3
    5664:	bic.w	r1, r3, #2147483648	; 0x80000000
    5668:	and.w	r0, r0, #2147483648	; 0x80000000
    566c:	orr.w	r3, r1, r0
    5670:	vmov	d0, r2, r3
    5674:	bx	lr
    5676:	nop

00005678 <__aeabi_atexit>:
    5678:	mov	r3, r1
    567a:	mov	r1, r0
    567c:	mov	r0, r3
    567e:	b.w	5684 <__cxa_atexit>
    5682:	nop

00005684 <__cxa_atexit>:
    5684:	mov	r3, r2
    5686:	mov	r2, r1
    5688:	mov	r1, r0
    568a:	movs	r0, #2
    568c:	b.w	78ec <__register_exitproc>

00005690 <__errno>:
    5690:	ldr	r3, [pc, #4]	; (5698 <__errno+0x8>)
    5692:	ldr	r0, [r3, #0]
    5694:	bx	lr
    5696:	nop
    5698:	.word	0x20000f98

0000569c <__libc_init_array>:
    569c:	push	{r4, r5, r6, lr}
    569e:	ldr	r6, [pc, #60]	; (56dc <__libc_init_array+0x40>)
    56a0:	ldr	r5, [pc, #60]	; (56e0 <__libc_init_array+0x44>)
    56a2:	subs	r6, r6, r5
    56a4:	asrs	r6, r6, #2
    56a6:	it	ne
    56a8:	movne	r4, #0
    56aa:	beq.n	56b8 <__libc_init_array+0x1c>
    56ac:	adds	r4, #1
    56ae:	ldr.w	r3, [r5], #4
    56b2:	blx	r3
    56b4:	cmp	r6, r4
    56b6:	bne.n	56ac <__libc_init_array+0x10>
    56b8:	ldr	r6, [pc, #40]	; (56e4 <__libc_init_array+0x48>)
    56ba:	ldr	r5, [pc, #44]	; (56e8 <__libc_init_array+0x4c>)
    56bc:	subs	r6, r6, r5
    56be:	bl	9510 <___init_veneer>
    56c2:	asrs	r6, r6, #2
    56c4:	it	ne
    56c6:	movne	r4, #0
    56c8:	beq.n	56d8 <__libc_init_array+0x3c>
    56ca:	adds	r4, #1
    56cc:	ldr.w	r3, [r5], #4
    56d0:	blx	r3
    56d2:	cmp	r6, r4
    56d4:	bne.n	56ca <__libc_init_array+0x2e>
    56d6:	pop	{r4, r5, r6, pc}
    56d8:	pop	{r4, r5, r6, pc}
    56da:	nop
    56dc:	.word	0x60001be0
    56e0:	.word	0x60001be0
    56e4:	.word	0x60001bf4
    56e8:	.word	0x60001be0

000056ec <malloc>:
    56ec:	ldr	r3, [pc, #8]	; (56f8 <malloc+0xc>)
    56ee:	mov	r1, r0
    56f0:	ldr	r0, [r3, #0]
    56f2:	b.w	56fc <_malloc_r>
    56f6:	nop
    56f8:	.word	0x20000f98

000056fc <_malloc_r>:
    56fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5700:	add.w	r5, r1, #11
    5704:	cmp	r5, #22
    5706:	sub	sp, #12
    5708:	mov	r6, r0
    570a:	bls.w	584c <_malloc_r+0x150>
    570e:	bics.w	r5, r5, #7
    5712:	bmi.w	5894 <_malloc_r+0x198>
    5716:	cmp	r1, r5
    5718:	bhi.w	5894 <_malloc_r+0x198>
    571c:	bl	5dfc <__malloc_lock>
    5720:	cmp.w	r5, #504	; 0x1f8
    5724:	bcc.w	5c60 <_malloc_r+0x564>
    5728:	lsrs	r3, r5, #9
    572a:	beq.w	58a2 <_malloc_r+0x1a6>
    572e:	cmp	r3, #4
    5730:	bhi.w	5a3a <_malloc_r+0x33e>
    5734:	lsrs	r0, r5, #6
    5736:	add.w	lr, r0, #57	; 0x39
    573a:	mov.w	r3, lr, lsl #1
    573e:	adds	r0, #56	; 0x38
    5740:	ldr	r7, [pc, #784]	; (5a54 <_malloc_r+0x358>)
    5742:	add.w	r3, r7, r3, lsl #2
    5746:	sub.w	r1, r3, #8
    574a:	ldr	r4, [r3, #4]
    574c:	cmp	r1, r4
    574e:	bne.n	5760 <_malloc_r+0x64>
    5750:	b.n	58ac <_malloc_r+0x1b0>
    5752:	cmp	r2, #0
    5754:	bge.w	58b0 <_malloc_r+0x1b4>
    5758:	ldr	r4, [r4, #12]
    575a:	cmp	r1, r4
    575c:	beq.w	58ac <_malloc_r+0x1b0>
    5760:	ldr	r3, [r4, #4]
    5762:	bic.w	r3, r3, #3
    5766:	subs	r2, r3, r5
    5768:	cmp	r2, #15
    576a:	ble.n	5752 <_malloc_r+0x56>
    576c:	ldr	r1, [pc, #740]	; (5a54 <_malloc_r+0x358>)
    576e:	ldr	r4, [r7, #16]
    5770:	add.w	lr, r1, #8
    5774:	cmp	r4, lr
    5776:	beq.w	5ae0 <_malloc_r+0x3e4>
    577a:	ldr	r3, [r4, #4]
    577c:	bic.w	r3, r3, #3
    5780:	subs	r2, r3, r5
    5782:	cmp	r2, #15
    5784:	bgt.w	5aba <_malloc_r+0x3be>
    5788:	cmp	r2, #0
    578a:	str.w	lr, [r1, #20]
    578e:	str.w	lr, [r1, #16]
    5792:	bge.w	58d2 <_malloc_r+0x1d6>
    5796:	cmp.w	r3, #512	; 0x200
    579a:	bcs.w	5a6c <_malloc_r+0x370>
    579e:	lsrs	r3, r3, #3
    57a0:	add.w	ip, r3, #1
    57a4:	movs	r2, #1
    57a6:	asrs	r3, r3, #2
    57a8:	lsl.w	r3, r2, r3
    57ac:	ldr	r2, [r1, #4]
    57ae:	ldr.w	r8, [r1, ip, lsl #3]
    57b2:	str.w	r8, [r4, #8]
    57b6:	add.w	r9, r1, ip, lsl #3
    57ba:	orrs	r2, r3
    57bc:	sub.w	r3, r9, #8
    57c0:	str	r3, [r4, #12]
    57c2:	str	r2, [r1, #4]
    57c4:	str.w	r4, [r1, ip, lsl #3]
    57c8:	str.w	r4, [r8, #12]
    57cc:	asrs	r3, r0, #2
    57ce:	movs	r4, #1
    57d0:	lsls	r4, r3
    57d2:	cmp	r4, r2
    57d4:	bhi.w	58ec <_malloc_r+0x1f0>
    57d8:	tst	r4, r2
    57da:	bne.n	57ea <_malloc_r+0xee>
    57dc:	bic.w	r0, r0, #3
    57e0:	lsls	r4, r4, #1
    57e2:	tst	r4, r2
    57e4:	add.w	r0, r0, #4
    57e8:	beq.n	57e0 <_malloc_r+0xe4>
    57ea:	add.w	r9, r7, r0, lsl #3
    57ee:	mov	ip, r9
    57f0:	mov	r8, r0
    57f2:	ldr.w	r1, [ip, #12]
    57f6:	cmp	ip, r1
    57f8:	bne.n	580a <_malloc_r+0x10e>
    57fa:	b.n	5ae4 <_malloc_r+0x3e8>
    57fc:	cmp	r2, #0
    57fe:	bge.w	5b04 <_malloc_r+0x408>
    5802:	ldr	r1, [r1, #12]
    5804:	cmp	ip, r1
    5806:	beq.w	5ae4 <_malloc_r+0x3e8>
    580a:	ldr	r3, [r1, #4]
    580c:	bic.w	r3, r3, #3
    5810:	subs	r2, r3, r5
    5812:	cmp	r2, #15
    5814:	ble.n	57fc <_malloc_r+0x100>
    5816:	mov	r4, r1
    5818:	ldr.w	ip, [r1, #12]
    581c:	ldr.w	r8, [r4, #8]!
    5820:	adds	r3, r1, r5
    5822:	orr.w	r5, r5, #1
    5826:	str	r5, [r1, #4]
    5828:	orr.w	r1, r2, #1
    582c:	str.w	ip, [r8, #12]
    5830:	mov	r0, r6
    5832:	str.w	r8, [ip, #8]
    5836:	str	r3, [r7, #20]
    5838:	str	r3, [r7, #16]
    583a:	str.w	lr, [r3, #12]
    583e:	str.w	lr, [r3, #8]
    5842:	str	r1, [r3, #4]
    5844:	str	r2, [r3, r2]
    5846:	bl	5e00 <__malloc_unlock>
    584a:	b.n	588c <_malloc_r+0x190>
    584c:	cmp	r1, #16
    584e:	bhi.n	5894 <_malloc_r+0x198>
    5850:	bl	5dfc <__malloc_lock>
    5854:	movs	r5, #16
    5856:	movs	r3, #6
    5858:	movs	r0, #2
    585a:	ldr	r7, [pc, #504]	; (5a54 <_malloc_r+0x358>)
    585c:	add.w	r3, r7, r3, lsl #2
    5860:	sub.w	r2, r3, #8
    5864:	ldr	r4, [r3, #4]
    5866:	cmp	r4, r2
    5868:	beq.w	5af6 <_malloc_r+0x3fa>
    586c:	ldr	r3, [r4, #4]
    586e:	ldr	r1, [r4, #12]
    5870:	ldr	r5, [r4, #8]
    5872:	bic.w	r3, r3, #3
    5876:	add	r3, r4
    5878:	mov	r0, r6
    587a:	ldr	r2, [r3, #4]
    587c:	str	r1, [r5, #12]
    587e:	orr.w	r2, r2, #1
    5882:	str	r5, [r1, #8]
    5884:	str	r2, [r3, #4]
    5886:	bl	5e00 <__malloc_unlock>
    588a:	adds	r4, #8
    588c:	mov	r0, r4
    588e:	add	sp, #12
    5890:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5894:	movs	r4, #0
    5896:	movs	r3, #12
    5898:	mov	r0, r4
    589a:	str	r3, [r6, #0]
    589c:	add	sp, #12
    589e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58a2:	movs	r3, #128	; 0x80
    58a4:	mov.w	lr, #64	; 0x40
    58a8:	movs	r0, #63	; 0x3f
    58aa:	b.n	5740 <_malloc_r+0x44>
    58ac:	mov	r0, lr
    58ae:	b.n	576c <_malloc_r+0x70>
    58b0:	add	r3, r4
    58b2:	ldr	r1, [r4, #12]
    58b4:	ldr	r2, [r3, #4]
    58b6:	ldr	r5, [r4, #8]
    58b8:	orr.w	r2, r2, #1
    58bc:	str	r1, [r5, #12]
    58be:	mov	r0, r6
    58c0:	str	r5, [r1, #8]
    58c2:	str	r2, [r3, #4]
    58c4:	bl	5e00 <__malloc_unlock>
    58c8:	adds	r4, #8
    58ca:	mov	r0, r4
    58cc:	add	sp, #12
    58ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58d2:	add	r3, r4
    58d4:	mov	r0, r6
    58d6:	ldr	r2, [r3, #4]
    58d8:	orr.w	r2, r2, #1
    58dc:	str	r2, [r3, #4]
    58de:	bl	5e00 <__malloc_unlock>
    58e2:	adds	r4, #8
    58e4:	mov	r0, r4
    58e6:	add	sp, #12
    58e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58ec:	ldr	r4, [r7, #8]
    58ee:	ldr	r3, [r4, #4]
    58f0:	bic.w	r8, r3, #3
    58f4:	cmp	r8, r5
    58f6:	bcc.n	5902 <_malloc_r+0x206>
    58f8:	rsb	r3, r5, r8
    58fc:	cmp	r3, #15
    58fe:	bgt.w	5a1a <_malloc_r+0x31e>
    5902:	ldr	r3, [pc, #340]	; (5a58 <_malloc_r+0x35c>)
    5904:	ldr.w	r9, [pc, #352]	; 5a68 <_malloc_r+0x36c>
    5908:	ldr	r2, [r3, #0]
    590a:	ldr.w	r3, [r9]
    590e:	adds	r3, #1
    5910:	add	r2, r5
    5912:	add.w	sl, r4, r8
    5916:	beq.w	5bda <_malloc_r+0x4de>
    591a:	add.w	r2, r2, #4096	; 0x1000
    591e:	adds	r2, #15
    5920:	bic.w	r2, r2, #4080	; 0xff0
    5924:	bic.w	r2, r2, #15
    5928:	mov	r1, r2
    592a:	mov	r0, r6
    592c:	str	r2, [sp, #4]
    592e:	bl	61e4 <_sbrk_r>
    5932:	cmp.w	r0, #4294967295
    5936:	mov	fp, r0
    5938:	ldr	r2, [sp, #4]
    593a:	beq.w	5bee <_malloc_r+0x4f2>
    593e:	cmp	sl, r0
    5940:	bhi.w	5b3c <_malloc_r+0x440>
    5944:	ldr	r3, [pc, #276]	; (5a5c <_malloc_r+0x360>)
    5946:	ldr	r1, [r3, #0]
    5948:	cmp	sl, fp
    594a:	add	r1, r2
    594c:	str	r1, [r3, #0]
    594e:	beq.w	5bf8 <_malloc_r+0x4fc>
    5952:	ldr.w	r0, [r9]
    5956:	ldr.w	lr, [pc, #272]	; 5a68 <_malloc_r+0x36c>
    595a:	adds	r0, #1
    595c:	ittet	ne
    595e:	rsbne	sl, sl, fp
    5962:	addne	r1, sl
    5964:	streq.w	fp, [lr]
    5968:	strne	r1, [r3, #0]
    596a:	ands.w	r1, fp, #7
    596e:	beq.w	5ba0 <_malloc_r+0x4a4>
    5972:	rsb	r0, r1, #8
    5976:	rsb	r1, r1, #4096	; 0x1000
    597a:	add	fp, r0
    597c:	adds	r1, #8
    597e:	add	r2, fp
    5980:	ubfx	r2, r2, #0, #12
    5984:	rsb	r9, r2, r1
    5988:	mov	r1, r9
    598a:	mov	r0, r6
    598c:	str	r3, [sp, #4]
    598e:	bl	61e4 <_sbrk_r>
    5992:	adds	r3, r0, #1
    5994:	ldr	r3, [sp, #4]
    5996:	beq.w	5c18 <_malloc_r+0x51c>
    599a:	rsb	r2, fp, r0
    599e:	add	r2, r9
    59a0:	orr.w	r2, r2, #1
    59a4:	ldr	r1, [r3, #0]
    59a6:	str.w	fp, [r7, #8]
    59aa:	add	r1, r9
    59ac:	cmp	r4, r7
    59ae:	str.w	r2, [fp, #4]
    59b2:	str	r1, [r3, #0]
    59b4:	ldr.w	r9, [pc, #164]	; 5a5c <_malloc_r+0x360>
    59b8:	beq.n	59e8 <_malloc_r+0x2ec>
    59ba:	cmp.w	r8, #15
    59be:	bls.w	5bbc <_malloc_r+0x4c0>
    59c2:	ldr	r2, [r4, #4]
    59c4:	sub.w	r3, r8, #12
    59c8:	bic.w	r3, r3, #7
    59cc:	adds	r0, r4, r3
    59ce:	and.w	r2, r2, #1
    59d2:	mov.w	lr, #5
    59d6:	orrs	r2, r3
    59d8:	cmp	r3, #15
    59da:	str	r2, [r4, #4]
    59dc:	str.w	lr, [r0, #4]
    59e0:	str.w	lr, [r0, #8]
    59e4:	bhi.w	5c20 <_malloc_r+0x524>
    59e8:	ldr	r3, [pc, #116]	; (5a60 <_malloc_r+0x364>)
    59ea:	ldr	r4, [r7, #8]
    59ec:	ldr	r2, [r3, #0]
    59ee:	cmp	r1, r2
    59f0:	it	hi
    59f2:	strhi	r1, [r3, #0]
    59f4:	ldr	r3, [pc, #108]	; (5a64 <_malloc_r+0x368>)
    59f6:	ldr	r2, [r3, #0]
    59f8:	cmp	r1, r2
    59fa:	ldr	r2, [r4, #4]
    59fc:	it	hi
    59fe:	strhi	r1, [r3, #0]
    5a00:	bic.w	r2, r2, #3
    5a04:	cmp	r5, r2
    5a06:	sub.w	r3, r2, r5
    5a0a:	bhi.n	5a10 <_malloc_r+0x314>
    5a0c:	cmp	r3, #15
    5a0e:	bgt.n	5a1a <_malloc_r+0x31e>
    5a10:	mov	r0, r6
    5a12:	bl	5e00 <__malloc_unlock>
    5a16:	movs	r4, #0
    5a18:	b.n	588c <_malloc_r+0x190>
    5a1a:	adds	r2, r4, r5
    5a1c:	orr.w	r3, r3, #1
    5a20:	orr.w	r5, r5, #1
    5a24:	str	r5, [r4, #4]
    5a26:	mov	r0, r6
    5a28:	str	r2, [r7, #8]
    5a2a:	str	r3, [r2, #4]
    5a2c:	bl	5e00 <__malloc_unlock>
    5a30:	adds	r4, #8
    5a32:	mov	r0, r4
    5a34:	add	sp, #12
    5a36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a3a:	cmp	r3, #20
    5a3c:	bls.n	5b22 <_malloc_r+0x426>
    5a3e:	cmp	r3, #84	; 0x54
    5a40:	bhi.w	5b8c <_malloc_r+0x490>
    5a44:	lsrs	r0, r5, #12
    5a46:	add.w	lr, r0, #111	; 0x6f
    5a4a:	mov.w	r3, lr, lsl #1
    5a4e:	adds	r0, #110	; 0x6e
    5a50:	b.n	5740 <_malloc_r+0x44>
    5a52:	nop
    5a54:	.word	0x20001108
    5a58:	.word	0x20001b54
    5a5c:	.word	0x20001b58
    5a60:	.word	0x20001b50
    5a64:	.word	0x20001b4c
    5a68:	.word	0x20001514
    5a6c:	lsrs	r2, r3, #9
    5a6e:	cmp	r2, #4
    5a70:	bls.n	5b30 <_malloc_r+0x434>
    5a72:	cmp	r2, #20
    5a74:	bhi.w	5bde <_malloc_r+0x4e2>
    5a78:	add.w	r1, r2, #92	; 0x5c
    5a7c:	lsls	r1, r1, #1
    5a7e:	adds	r2, #91	; 0x5b
    5a80:	add.w	ip, r7, r1, lsl #2
    5a84:	ldr.w	r1, [r7, r1, lsl #2]
    5a88:	ldr.w	r8, [pc, #476]	; 5c68 <_malloc_r+0x56c>
    5a8c:	sub.w	ip, ip, #8
    5a90:	cmp	ip, r1
    5a92:	beq.w	5ba6 <_malloc_r+0x4aa>
    5a96:	ldr	r2, [r1, #4]
    5a98:	bic.w	r2, r2, #3
    5a9c:	cmp	r3, r2
    5a9e:	bcs.n	5aa6 <_malloc_r+0x3aa>
    5aa0:	ldr	r1, [r1, #8]
    5aa2:	cmp	ip, r1
    5aa4:	bne.n	5a96 <_malloc_r+0x39a>
    5aa6:	ldr.w	ip, [r1, #12]
    5aaa:	ldr	r2, [r7, #4]
    5aac:	str.w	ip, [r4, #12]
    5ab0:	str	r1, [r4, #8]
    5ab2:	str.w	r4, [ip, #8]
    5ab6:	str	r4, [r1, #12]
    5ab8:	b.n	57cc <_malloc_r+0xd0>
    5aba:	adds	r3, r4, r5
    5abc:	orr.w	r7, r2, #1
    5ac0:	orr.w	r5, r5, #1
    5ac4:	str	r5, [r4, #4]
    5ac6:	mov	r0, r6
    5ac8:	str	r3, [r1, #20]
    5aca:	str	r3, [r1, #16]
    5acc:	str.w	lr, [r3, #12]
    5ad0:	str.w	lr, [r3, #8]
    5ad4:	str	r7, [r3, #4]
    5ad6:	str	r2, [r3, r2]
    5ad8:	adds	r4, #8
    5ada:	bl	5e00 <__malloc_unlock>
    5ade:	b.n	588c <_malloc_r+0x190>
    5ae0:	ldr	r2, [r1, #4]
    5ae2:	b.n	57cc <_malloc_r+0xd0>
    5ae4:	add.w	r8, r8, #1
    5ae8:	tst.w	r8, #3
    5aec:	add.w	ip, ip, #8
    5af0:	bne.w	57f2 <_malloc_r+0xf6>
    5af4:	b.n	5b58 <_malloc_r+0x45c>
    5af6:	ldr	r4, [r3, #12]
    5af8:	cmp	r3, r4
    5afa:	it	eq
    5afc:	addeq	r0, #2
    5afe:	beq.w	576c <_malloc_r+0x70>
    5b02:	b.n	586c <_malloc_r+0x170>
    5b04:	add	r3, r1
    5b06:	mov	r4, r1
    5b08:	ldr	r2, [r3, #4]
    5b0a:	ldr	r1, [r1, #12]
    5b0c:	ldr.w	r5, [r4, #8]!
    5b10:	orr.w	r2, r2, #1
    5b14:	str	r2, [r3, #4]
    5b16:	mov	r0, r6
    5b18:	str	r1, [r5, #12]
    5b1a:	str	r5, [r1, #8]
    5b1c:	bl	5e00 <__malloc_unlock>
    5b20:	b.n	588c <_malloc_r+0x190>
    5b22:	add.w	lr, r3, #92	; 0x5c
    5b26:	add.w	r0, r3, #91	; 0x5b
    5b2a:	mov.w	r3, lr, lsl #1
    5b2e:	b.n	5740 <_malloc_r+0x44>
    5b30:	lsrs	r2, r3, #6
    5b32:	add.w	r1, r2, #57	; 0x39
    5b36:	lsls	r1, r1, #1
    5b38:	adds	r2, #56	; 0x38
    5b3a:	b.n	5a80 <_malloc_r+0x384>
    5b3c:	cmp	r4, r7
    5b3e:	ldr	r3, [pc, #296]	; (5c68 <_malloc_r+0x56c>)
    5b40:	beq.w	5944 <_malloc_r+0x248>
    5b44:	ldr	r4, [r3, #8]
    5b46:	ldr	r2, [r4, #4]
    5b48:	bic.w	r2, r2, #3
    5b4c:	b.n	5a04 <_malloc_r+0x308>
    5b4e:	ldr.w	r3, [r9], #-8
    5b52:	cmp	r9, r3
    5b54:	bne.w	5c5c <_malloc_r+0x560>
    5b58:	tst.w	r0, #3
    5b5c:	add.w	r0, r0, #4294967295
    5b60:	bne.n	5b4e <_malloc_r+0x452>
    5b62:	ldr	r3, [r7, #4]
    5b64:	bic.w	r3, r3, r4
    5b68:	str	r3, [r7, #4]
    5b6a:	lsls	r4, r4, #1
    5b6c:	cmp	r4, r3
    5b6e:	bhi.w	58ec <_malloc_r+0x1f0>
    5b72:	cmp	r4, #0
    5b74:	beq.w	58ec <_malloc_r+0x1f0>
    5b78:	tst	r4, r3
    5b7a:	mov	r0, r8
    5b7c:	bne.w	57ea <_malloc_r+0xee>
    5b80:	lsls	r4, r4, #1
    5b82:	tst	r4, r3
    5b84:	add.w	r0, r0, #4
    5b88:	beq.n	5b80 <_malloc_r+0x484>
    5b8a:	b.n	57ea <_malloc_r+0xee>
    5b8c:	cmp.w	r3, #340	; 0x154
    5b90:	bhi.n	5bc4 <_malloc_r+0x4c8>
    5b92:	lsrs	r0, r5, #15
    5b94:	add.w	lr, r0, #120	; 0x78
    5b98:	mov.w	r3, lr, lsl #1
    5b9c:	adds	r0, #119	; 0x77
    5b9e:	b.n	5740 <_malloc_r+0x44>
    5ba0:	mov.w	r1, #4096	; 0x1000
    5ba4:	b.n	597e <_malloc_r+0x282>
    5ba6:	movs	r1, #1
    5ba8:	ldr.w	r3, [r8, #4]
    5bac:	asrs	r2, r2, #2
    5bae:	lsl.w	r2, r1, r2
    5bb2:	orrs	r2, r3
    5bb4:	str.w	r2, [r8, #4]
    5bb8:	mov	r1, ip
    5bba:	b.n	5aac <_malloc_r+0x3b0>
    5bbc:	movs	r3, #1
    5bbe:	str.w	r3, [fp, #4]
    5bc2:	b.n	5a10 <_malloc_r+0x314>
    5bc4:	movw	r2, #1364	; 0x554
    5bc8:	cmp	r3, r2
    5bca:	bhi.n	5c0e <_malloc_r+0x512>
    5bcc:	lsrs	r0, r5, #18
    5bce:	add.w	lr, r0, #125	; 0x7d
    5bd2:	mov.w	r3, lr, lsl #1
    5bd6:	adds	r0, #124	; 0x7c
    5bd8:	b.n	5740 <_malloc_r+0x44>
    5bda:	adds	r2, #16
    5bdc:	b.n	5928 <_malloc_r+0x22c>
    5bde:	cmp	r2, #84	; 0x54
    5be0:	bhi.n	5c30 <_malloc_r+0x534>
    5be2:	lsrs	r2, r3, #12
    5be4:	add.w	r1, r2, #111	; 0x6f
    5be8:	lsls	r1, r1, #1
    5bea:	adds	r2, #110	; 0x6e
    5bec:	b.n	5a80 <_malloc_r+0x384>
    5bee:	ldr	r4, [r7, #8]
    5bf0:	ldr	r2, [r4, #4]
    5bf2:	bic.w	r2, r2, #3
    5bf6:	b.n	5a04 <_malloc_r+0x308>
    5bf8:	ubfx	r0, sl, #0, #12
    5bfc:	cmp	r0, #0
    5bfe:	bne.w	5952 <_malloc_r+0x256>
    5c02:	add	r2, r8
    5c04:	ldr	r3, [r7, #8]
    5c06:	orr.w	r2, r2, #1
    5c0a:	str	r2, [r3, #4]
    5c0c:	b.n	59e8 <_malloc_r+0x2ec>
    5c0e:	movs	r3, #254	; 0xfe
    5c10:	mov.w	lr, #127	; 0x7f
    5c14:	movs	r0, #126	; 0x7e
    5c16:	b.n	5740 <_malloc_r+0x44>
    5c18:	movs	r2, #1
    5c1a:	mov.w	r9, #0
    5c1e:	b.n	59a4 <_malloc_r+0x2a8>
    5c20:	add.w	r1, r4, #8
    5c24:	mov	r0, r6
    5c26:	bl	87d8 <_free_r>
    5c2a:	ldr.w	r1, [r9]
    5c2e:	b.n	59e8 <_malloc_r+0x2ec>
    5c30:	cmp.w	r2, #340	; 0x154
    5c34:	bhi.n	5c42 <_malloc_r+0x546>
    5c36:	lsrs	r2, r3, #15
    5c38:	add.w	r1, r2, #120	; 0x78
    5c3c:	lsls	r1, r1, #1
    5c3e:	adds	r2, #119	; 0x77
    5c40:	b.n	5a80 <_malloc_r+0x384>
    5c42:	movw	r1, #1364	; 0x554
    5c46:	cmp	r2, r1
    5c48:	bhi.n	5c56 <_malloc_r+0x55a>
    5c4a:	lsrs	r2, r3, #18
    5c4c:	add.w	r1, r2, #125	; 0x7d
    5c50:	lsls	r1, r1, #1
    5c52:	adds	r2, #124	; 0x7c
    5c54:	b.n	5a80 <_malloc_r+0x384>
    5c56:	movs	r1, #254	; 0xfe
    5c58:	movs	r2, #126	; 0x7e
    5c5a:	b.n	5a80 <_malloc_r+0x384>
    5c5c:	ldr	r3, [r7, #4]
    5c5e:	b.n	5b6a <_malloc_r+0x46e>
    5c60:	lsrs	r0, r5, #3
    5c62:	adds	r3, r0, #1
    5c64:	lsls	r3, r3, #1
    5c66:	b.n	585a <_malloc_r+0x15e>
    5c68:	.word	0x20001108

00005c6c <__ascii_mbtowc>:
    5c6c:	sub	sp, #8
    5c6e:	cbz	r1, 5c84 <__ascii_mbtowc+0x18>
    5c70:	cbz	r2, 5c8a <__ascii_mbtowc+0x1e>
    5c72:	cbz	r3, 5c90 <__ascii_mbtowc+0x24>
    5c74:	ldrb	r3, [r2, #0]
    5c76:	str	r3, [r1, #0]
    5c78:	ldrb	r2, [r2, #0]
    5c7a:	adds	r0, r2, #0
    5c7c:	it	ne
    5c7e:	movne	r0, #1
    5c80:	add	sp, #8
    5c82:	bx	lr
    5c84:	add	r1, sp, #4
    5c86:	cmp	r2, #0
    5c88:	bne.n	5c72 <__ascii_mbtowc+0x6>
    5c8a:	mov	r0, r2
    5c8c:	add	sp, #8
    5c8e:	bx	lr
    5c90:	mvn.w	r0, #1
    5c94:	b.n	5c80 <__ascii_mbtowc+0x14>
    5c96:	nop

00005c98 <memmove>:
    5c98:	cmp	r0, r1
    5c9a:	push	{r4, r5, r6, r7, lr}
    5c9c:	bls.n	5cba <memmove+0x22>
    5c9e:	adds	r3, r1, r2
    5ca0:	cmp	r0, r3
    5ca2:	bcs.n	5cba <memmove+0x22>
    5ca4:	adds	r1, r0, r2
    5ca6:	cmp	r2, #0
    5ca8:	beq.n	5d4e <memmove+0xb6>
    5caa:	subs	r2, r3, r2
    5cac:	ldrb.w	r4, [r3, #-1]!
    5cb0:	strb.w	r4, [r1, #-1]!
    5cb4:	cmp	r3, r2
    5cb6:	bne.n	5cac <memmove+0x14>
    5cb8:	pop	{r4, r5, r6, r7, pc}
    5cba:	cmp	r2, #15
    5cbc:	bls.n	5d50 <memmove+0xb8>
    5cbe:	orr.w	r3, r1, r0
    5cc2:	lsls	r3, r3, #30
    5cc4:	bne.n	5d54 <memmove+0xbc>
    5cc6:	add.w	r4, r0, #16
    5cca:	add.w	r3, r1, #16
    5cce:	mov	r5, r2
    5cd0:	ldr.w	r6, [r3, #-16]
    5cd4:	str.w	r6, [r4, #-16]
    5cd8:	ldr.w	r6, [r3, #-12]
    5cdc:	str.w	r6, [r4, #-12]
    5ce0:	ldr.w	r6, [r3, #-8]
    5ce4:	str.w	r6, [r4, #-8]
    5ce8:	subs	r5, #16
    5cea:	ldr.w	r6, [r3, #-4]
    5cee:	str.w	r6, [r4, #-4]
    5cf2:	cmp	r5, #15
    5cf4:	add.w	r3, r3, #16
    5cf8:	add.w	r4, r4, #16
    5cfc:	bhi.n	5cd0 <memmove+0x38>
    5cfe:	sub.w	r3, r2, #16
    5d02:	bic.w	r3, r3, #15
    5d06:	and.w	lr, r2, #15
    5d0a:	adds	r3, #16
    5d0c:	cmp.w	lr, #3
    5d10:	add	r1, r3
    5d12:	add	r3, r0
    5d14:	bls.n	5d5a <memmove+0xc2>
    5d16:	subs	r6, r3, #4
    5d18:	mov	r5, r1
    5d1a:	mov	r4, lr
    5d1c:	subs	r4, #4
    5d1e:	ldr.w	r7, [r5], #4
    5d22:	str.w	r7, [r6, #4]!
    5d26:	cmp	r4, #3
    5d28:	bhi.n	5d1c <memmove+0x84>
    5d2a:	sub.w	r4, lr, #4
    5d2e:	bic.w	r4, r4, #3
    5d32:	adds	r4, #4
    5d34:	add	r3, r4
    5d36:	add	r1, r4
    5d38:	and.w	r2, r2, #3
    5d3c:	cbz	r2, 5d58 <memmove+0xc0>
    5d3e:	subs	r3, #1
    5d40:	add	r2, r1
    5d42:	ldrb.w	r4, [r1], #1
    5d46:	strb.w	r4, [r3, #1]!
    5d4a:	cmp	r2, r1
    5d4c:	bne.n	5d42 <memmove+0xaa>
    5d4e:	pop	{r4, r5, r6, r7, pc}
    5d50:	mov	r3, r0
    5d52:	b.n	5d3c <memmove+0xa4>
    5d54:	mov	r3, r0
    5d56:	b.n	5d3e <memmove+0xa6>
    5d58:	pop	{r4, r5, r6, r7, pc}
    5d5a:	mov	r2, lr
    5d5c:	b.n	5d3c <memmove+0xa4>
    5d5e:	nop

00005d60 <memset>:
    5d60:	push	{r4, r5, r6}
    5d62:	lsls	r4, r0, #30
    5d64:	beq.n	5df4 <memset+0x94>
    5d66:	subs	r4, r2, #1
    5d68:	cmp	r2, #0
    5d6a:	beq.n	5df0 <memset+0x90>
    5d6c:	uxtb	r5, r1
    5d6e:	mov	r3, r0
    5d70:	b.n	5d78 <memset+0x18>
    5d72:	subs	r2, r4, #1
    5d74:	cbz	r4, 5df0 <memset+0x90>
    5d76:	mov	r4, r2
    5d78:	strb.w	r5, [r3], #1
    5d7c:	lsls	r2, r3, #30
    5d7e:	bne.n	5d72 <memset+0x12>
    5d80:	cmp	r4, #3
    5d82:	bls.n	5de2 <memset+0x82>
    5d84:	uxtb	r5, r1
    5d86:	orr.w	r5, r5, r5, lsl #8
    5d8a:	cmp	r4, #15
    5d8c:	orr.w	r5, r5, r5, lsl #16
    5d90:	bls.n	5dc6 <memset+0x66>
    5d92:	add.w	r2, r3, #16
    5d96:	mov	r6, r4
    5d98:	subs	r6, #16
    5d9a:	cmp	r6, #15
    5d9c:	str.w	r5, [r2, #-16]
    5da0:	str.w	r5, [r2, #-12]
    5da4:	str.w	r5, [r2, #-8]
    5da8:	str.w	r5, [r2, #-4]
    5dac:	add.w	r2, r2, #16
    5db0:	bhi.n	5d98 <memset+0x38>
    5db2:	sub.w	r2, r4, #16
    5db6:	bic.w	r2, r2, #15
    5dba:	and.w	r4, r4, #15
    5dbe:	adds	r2, #16
    5dc0:	cmp	r4, #3
    5dc2:	add	r3, r2
    5dc4:	bls.n	5de2 <memset+0x82>
    5dc6:	mov	r6, r3
    5dc8:	mov	r2, r4
    5dca:	subs	r2, #4
    5dcc:	cmp	r2, #3
    5dce:	str.w	r5, [r6], #4
    5dd2:	bhi.n	5dca <memset+0x6a>
    5dd4:	subs	r2, r4, #4
    5dd6:	bic.w	r2, r2, #3
    5dda:	adds	r2, #4
    5ddc:	add	r3, r2
    5dde:	and.w	r4, r4, #3
    5de2:	cbz	r4, 5df0 <memset+0x90>
    5de4:	uxtb	r1, r1
    5de6:	add	r4, r3
    5de8:	strb.w	r1, [r3], #1
    5dec:	cmp	r3, r4
    5dee:	bne.n	5de8 <memset+0x88>
    5df0:	pop	{r4, r5, r6}
    5df2:	bx	lr
    5df4:	mov	r4, r2
    5df6:	mov	r3, r0
    5df8:	b.n	5d80 <memset+0x20>
    5dfa:	nop

00005dfc <__malloc_lock>:
    5dfc:	bx	lr
    5dfe:	nop

00005e00 <__malloc_unlock>:
    5e00:	bx	lr
    5e02:	nop

00005e04 <_realloc_r>:
    5e04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e08:	mov	r7, r2
    5e0a:	sub	sp, #12
    5e0c:	cmp	r1, #0
    5e0e:	beq.w	5f94 <_realloc_r+0x190>
    5e12:	mov	r6, r1
    5e14:	mov	r9, r0
    5e16:	add.w	r5, r7, #11
    5e1a:	bl	5dfc <__malloc_lock>
    5e1e:	ldr.w	lr, [r6, #-4]
    5e22:	cmp	r5, #22
    5e24:	bic.w	r4, lr, #3
    5e28:	sub.w	r8, r6, #8
    5e2c:	bhi.n	5eb0 <_realloc_r+0xac>
    5e2e:	movs	r2, #16
    5e30:	mov	r5, r2
    5e32:	cmp	r7, r5
    5e34:	bhi.n	5eba <_realloc_r+0xb6>
    5e36:	cmp	r4, r2
    5e38:	bge.n	5f26 <_realloc_r+0x122>
    5e3a:	ldr	r3, [pc, #804]	; (6160 <_realloc_r+0x35c>)
    5e3c:	ldr	r1, [r3, #8]
    5e3e:	add.w	r0, r8, r4
    5e42:	cmp	r0, r1
    5e44:	ldr	r1, [r0, #4]
    5e46:	beq.w	5ffc <_realloc_r+0x1f8>
    5e4a:	bic.w	r3, r1, #1
    5e4e:	add	r3, r0
    5e50:	ldr	r3, [r3, #4]
    5e52:	lsls	r3, r3, #31
    5e54:	bpl.n	5f52 <_realloc_r+0x14e>
    5e56:	tst.w	lr, #1
    5e5a:	beq.n	5ec8 <_realloc_r+0xc4>
    5e5c:	mov	r1, r7
    5e5e:	mov	r0, r9
    5e60:	bl	56fc <_malloc_r>
    5e64:	mov	r7, r0
    5e66:	cbz	r0, 5ea2 <_realloc_r+0x9e>
    5e68:	ldr.w	r3, [r6, #-4]
    5e6c:	bic.w	r3, r3, #1
    5e70:	add	r3, r8
    5e72:	sub.w	r2, r0, #8
    5e76:	cmp	r2, r3
    5e78:	beq.w	6104 <_realloc_r+0x300>
    5e7c:	subs	r2, r4, #4
    5e7e:	cmp	r2, #36	; 0x24
    5e80:	bhi.w	60e6 <_realloc_r+0x2e2>
    5e84:	cmp	r2, #19
    5e86:	bhi.w	6092 <_realloc_r+0x28e>
    5e8a:	mov	r3, r0
    5e8c:	mov	r2, r6
    5e8e:	ldr	r1, [r2, #0]
    5e90:	str	r1, [r3, #0]
    5e92:	ldr	r1, [r2, #4]
    5e94:	str	r1, [r3, #4]
    5e96:	ldr	r2, [r2, #8]
    5e98:	str	r2, [r3, #8]
    5e9a:	mov	r1, r6
    5e9c:	mov	r0, r9
    5e9e:	bl	87d8 <_free_r>
    5ea2:	mov	r0, r9
    5ea4:	bl	5e00 <__malloc_unlock>
    5ea8:	mov	r0, r7
    5eaa:	add	sp, #12
    5eac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5eb0:	bic.w	r5, r5, #7
    5eb4:	cmp	r5, #0
    5eb6:	mov	r2, r5
    5eb8:	bge.n	5e32 <_realloc_r+0x2e>
    5eba:	movs	r3, #12
    5ebc:	movs	r0, #0
    5ebe:	str.w	r3, [r9]
    5ec2:	add	sp, #12
    5ec4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ec8:	ldr.w	r3, [r6, #-8]
    5ecc:	rsb	sl, r3, r8
    5ed0:	ldr.w	r3, [sl, #4]
    5ed4:	bic.w	ip, r3, #3
    5ed8:	add.w	r3, r4, ip
    5edc:	cmp	r3, r2
    5ede:	blt.n	5e5c <_realloc_r+0x58>
    5ee0:	mov	r7, sl
    5ee2:	ldr.w	r1, [sl, #12]
    5ee6:	ldr.w	r0, [r7, #8]!
    5eea:	subs	r2, r4, #4
    5eec:	cmp	r2, #36	; 0x24
    5eee:	str	r1, [r0, #12]
    5ef0:	str	r0, [r1, #8]
    5ef2:	bhi.w	6124 <_realloc_r+0x320>
    5ef6:	cmp	r2, #19
    5ef8:	bls.w	6120 <_realloc_r+0x31c>
    5efc:	ldr	r1, [r6, #0]
    5efe:	str.w	r1, [sl, #8]
    5f02:	ldr	r1, [r6, #4]
    5f04:	str.w	r1, [sl, #12]
    5f08:	cmp	r2, #27
    5f0a:	bhi.w	6164 <_realloc_r+0x360>
    5f0e:	adds	r6, #8
    5f10:	add.w	r2, sl, #16
    5f14:	ldr	r1, [r6, #0]
    5f16:	str	r1, [r2, #0]
    5f18:	ldr	r1, [r6, #4]
    5f1a:	str	r1, [r2, #4]
    5f1c:	ldr	r1, [r6, #8]
    5f1e:	str	r1, [r2, #8]
    5f20:	mov	r6, r7
    5f22:	mov	r4, r3
    5f24:	mov	r8, sl
    5f26:	subs	r3, r4, r5
    5f28:	cmp	r3, #15
    5f2a:	bhi.n	5f68 <_realloc_r+0x164>
    5f2c:	ldr.w	r3, [r8, #4]
    5f30:	and.w	r3, r3, #1
    5f34:	orrs	r3, r4
    5f36:	add	r4, r8
    5f38:	str.w	r3, [r8, #4]
    5f3c:	ldr	r3, [r4, #4]
    5f3e:	orr.w	r3, r3, #1
    5f42:	str	r3, [r4, #4]
    5f44:	mov	r0, r9
    5f46:	bl	5e00 <__malloc_unlock>
    5f4a:	mov	r0, r6
    5f4c:	add	sp, #12
    5f4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f52:	bic.w	r1, r1, #3
    5f56:	add	r1, r4
    5f58:	cmp	r1, r2
    5f5a:	blt.n	5fa0 <_realloc_r+0x19c>
    5f5c:	ldr	r3, [r0, #12]
    5f5e:	ldr	r2, [r0, #8]
    5f60:	mov	r4, r1
    5f62:	str	r3, [r2, #12]
    5f64:	str	r2, [r3, #8]
    5f66:	b.n	5f26 <_realloc_r+0x122>
    5f68:	ldr.w	r2, [r8, #4]
    5f6c:	add.w	r1, r8, r5
    5f70:	and.w	r2, r2, #1
    5f74:	orrs	r5, r2
    5f76:	orr.w	r2, r3, #1
    5f7a:	add	r3, r1
    5f7c:	str.w	r5, [r8, #4]
    5f80:	str	r2, [r1, #4]
    5f82:	ldr	r2, [r3, #4]
    5f84:	orr.w	r2, r2, #1
    5f88:	adds	r1, #8
    5f8a:	str	r2, [r3, #4]
    5f8c:	mov	r0, r9
    5f8e:	bl	87d8 <_free_r>
    5f92:	b.n	5f44 <_realloc_r+0x140>
    5f94:	mov	r1, r2
    5f96:	add	sp, #12
    5f98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f9c:	b.w	56fc <_malloc_r>
    5fa0:	tst.w	lr, #1
    5fa4:	bne.w	5e5c <_realloc_r+0x58>
    5fa8:	ldr.w	r3, [r6, #-8]
    5fac:	rsb	sl, r3, r8
    5fb0:	ldr.w	r3, [sl, #4]
    5fb4:	bic.w	ip, r3, #3
    5fb8:	add.w	lr, r1, ip
    5fbc:	cmp	lr, r2
    5fbe:	blt.n	5ed8 <_realloc_r+0xd4>
    5fc0:	ldr	r3, [r0, #12]
    5fc2:	ldr	r2, [r0, #8]
    5fc4:	mov	r7, sl
    5fc6:	str	r3, [r2, #12]
    5fc8:	str	r2, [r3, #8]
    5fca:	ldr.w	r1, [r7, #8]!
    5fce:	ldr.w	r3, [sl, #12]
    5fd2:	str	r3, [r1, #12]
    5fd4:	subs	r2, r4, #4
    5fd6:	cmp	r2, #36	; 0x24
    5fd8:	str	r1, [r3, #8]
    5fda:	bhi.w	6110 <_realloc_r+0x30c>
    5fde:	cmp	r2, #19
    5fe0:	bls.n	60a8 <_realloc_r+0x2a4>
    5fe2:	ldr	r3, [r6, #0]
    5fe4:	str.w	r3, [sl, #8]
    5fe8:	ldr	r3, [r6, #4]
    5fea:	str.w	r3, [sl, #12]
    5fee:	cmp	r2, #27
    5ff0:	bhi.w	6134 <_realloc_r+0x330>
    5ff4:	adds	r6, #8
    5ff6:	add.w	r3, sl, #16
    5ffa:	b.n	60aa <_realloc_r+0x2a6>
    5ffc:	bic.w	fp, r1, #3
    6000:	add	fp, r4
    6002:	add.w	r0, r5, #16
    6006:	cmp	fp, r0
    6008:	bge.n	60be <_realloc_r+0x2ba>
    600a:	tst.w	lr, #1
    600e:	bne.w	5e5c <_realloc_r+0x58>
    6012:	ldr.w	r1, [r6, #-8]
    6016:	rsb	sl, r1, r8
    601a:	ldr.w	r1, [sl, #4]
    601e:	bic.w	ip, r1, #3
    6022:	add	fp, ip
    6024:	cmp	r0, fp
    6026:	bgt.w	5ed8 <_realloc_r+0xd4>
    602a:	mov	r7, sl
    602c:	ldr.w	r1, [sl, #12]
    6030:	ldr.w	r0, [r7, #8]!
    6034:	subs	r2, r4, #4
    6036:	cmp	r2, #36	; 0x24
    6038:	str	r1, [r0, #12]
    603a:	str	r0, [r1, #8]
    603c:	bhi.w	61a8 <_realloc_r+0x3a4>
    6040:	cmp	r2, #19
    6042:	bls.w	6190 <_realloc_r+0x38c>
    6046:	ldr	r1, [r6, #0]
    6048:	str.w	r1, [sl, #8]
    604c:	ldr	r1, [r6, #4]
    604e:	str.w	r1, [sl, #12]
    6052:	cmp	r2, #27
    6054:	bhi.w	61b6 <_realloc_r+0x3b2>
    6058:	adds	r6, #8
    605a:	add.w	r2, sl, #16
    605e:	ldr	r1, [r6, #0]
    6060:	str	r1, [r2, #0]
    6062:	ldr	r1, [r6, #4]
    6064:	str	r1, [r2, #4]
    6066:	ldr	r1, [r6, #8]
    6068:	str	r1, [r2, #8]
    606a:	add.w	r1, sl, r5
    606e:	rsb	r2, r5, fp
    6072:	orr.w	r2, r2, #1
    6076:	str	r1, [r3, #8]
    6078:	str	r2, [r1, #4]
    607a:	ldr.w	r3, [sl, #4]
    607e:	and.w	r3, r3, #1
    6082:	orrs	r5, r3
    6084:	mov	r0, r9
    6086:	str.w	r5, [sl, #4]
    608a:	bl	5e00 <__malloc_unlock>
    608e:	mov	r0, r7
    6090:	b.n	5f4c <_realloc_r+0x148>
    6092:	ldr	r3, [r6, #0]
    6094:	str	r3, [r0, #0]
    6096:	ldr	r3, [r6, #4]
    6098:	str	r3, [r0, #4]
    609a:	cmp	r2, #27
    609c:	bhi.n	60ee <_realloc_r+0x2ea>
    609e:	add.w	r3, r0, #8
    60a2:	add.w	r2, r6, #8
    60a6:	b.n	5e8e <_realloc_r+0x8a>
    60a8:	mov	r3, r7
    60aa:	ldr	r2, [r6, #0]
    60ac:	str	r2, [r3, #0]
    60ae:	ldr	r2, [r6, #4]
    60b0:	str	r2, [r3, #4]
    60b2:	ldr	r2, [r6, #8]
    60b4:	str	r2, [r3, #8]
    60b6:	mov	r6, r7
    60b8:	mov	r4, lr
    60ba:	mov	r8, sl
    60bc:	b.n	5f26 <_realloc_r+0x122>
    60be:	add.w	r1, r8, r5
    60c2:	rsb	fp, r5, fp
    60c6:	orr.w	r2, fp, #1
    60ca:	str	r1, [r3, #8]
    60cc:	str	r2, [r1, #4]
    60ce:	ldr.w	r3, [r6, #-4]
    60d2:	and.w	r3, r3, #1
    60d6:	orrs	r5, r3
    60d8:	mov	r0, r9
    60da:	str.w	r5, [r6, #-4]
    60de:	bl	5e00 <__malloc_unlock>
    60e2:	mov	r0, r6
    60e4:	b.n	5f4c <_realloc_r+0x148>
    60e6:	mov	r1, r6
    60e8:	bl	5c98 <memmove>
    60ec:	b.n	5e9a <_realloc_r+0x96>
    60ee:	ldr	r3, [r6, #8]
    60f0:	str	r3, [r0, #8]
    60f2:	ldr	r3, [r6, #12]
    60f4:	str	r3, [r0, #12]
    60f6:	cmp	r2, #36	; 0x24
    60f8:	beq.n	614c <_realloc_r+0x348>
    60fa:	add.w	r3, r0, #16
    60fe:	add.w	r2, r6, #16
    6102:	b.n	5e8e <_realloc_r+0x8a>
    6104:	ldr.w	r3, [r0, #-4]
    6108:	bic.w	r3, r3, #3
    610c:	add	r4, r3
    610e:	b.n	5f26 <_realloc_r+0x122>
    6110:	mov	r1, r6
    6112:	mov	r0, r7
    6114:	mov	r4, lr
    6116:	mov	r8, sl
    6118:	bl	5c98 <memmove>
    611c:	mov	r6, r7
    611e:	b.n	5f26 <_realloc_r+0x122>
    6120:	mov	r2, r7
    6122:	b.n	5f14 <_realloc_r+0x110>
    6124:	mov	r1, r6
    6126:	mov	r0, r7
    6128:	mov	r4, r3
    612a:	mov	r8, sl
    612c:	bl	5c98 <memmove>
    6130:	mov	r6, r7
    6132:	b.n	5f26 <_realloc_r+0x122>
    6134:	ldr	r3, [r6, #8]
    6136:	str.w	r3, [sl, #16]
    613a:	ldr	r3, [r6, #12]
    613c:	str.w	r3, [sl, #20]
    6140:	cmp	r2, #36	; 0x24
    6142:	beq.n	617c <_realloc_r+0x378>
    6144:	adds	r6, #16
    6146:	add.w	r3, sl, #24
    614a:	b.n	60aa <_realloc_r+0x2a6>
    614c:	ldr	r3, [r6, #16]
    614e:	str	r3, [r0, #16]
    6150:	ldr	r3, [r6, #20]
    6152:	str	r3, [r0, #20]
    6154:	add.w	r2, r6, #24
    6158:	add.w	r3, r0, #24
    615c:	b.n	5e8e <_realloc_r+0x8a>
    615e:	nop
    6160:	.word	0x20001108
    6164:	ldr	r1, [r6, #8]
    6166:	str.w	r1, [sl, #16]
    616a:	ldr	r1, [r6, #12]
    616c:	str.w	r1, [sl, #20]
    6170:	cmp	r2, #36	; 0x24
    6172:	beq.n	6194 <_realloc_r+0x390>
    6174:	adds	r6, #16
    6176:	add.w	r2, sl, #24
    617a:	b.n	5f14 <_realloc_r+0x110>
    617c:	ldr	r3, [r6, #16]
    617e:	str.w	r3, [sl, #24]
    6182:	ldr	r3, [r6, #20]
    6184:	str.w	r3, [sl, #28]
    6188:	adds	r6, #24
    618a:	add.w	r3, sl, #32
    618e:	b.n	60aa <_realloc_r+0x2a6>
    6190:	mov	r2, r7
    6192:	b.n	605e <_realloc_r+0x25a>
    6194:	ldr	r2, [r6, #16]
    6196:	str.w	r2, [sl, #24]
    619a:	ldr	r2, [r6, #20]
    619c:	str.w	r2, [sl, #28]
    61a0:	adds	r6, #24
    61a2:	add.w	r2, sl, #32
    61a6:	b.n	5f14 <_realloc_r+0x110>
    61a8:	mov	r1, r6
    61aa:	mov	r0, r7
    61ac:	str	r3, [sp, #4]
    61ae:	bl	5c98 <memmove>
    61b2:	ldr	r3, [sp, #4]
    61b4:	b.n	606a <_realloc_r+0x266>
    61b6:	ldr	r1, [r6, #8]
    61b8:	str.w	r1, [sl, #16]
    61bc:	ldr	r1, [r6, #12]
    61be:	str.w	r1, [sl, #20]
    61c2:	cmp	r2, #36	; 0x24
    61c4:	beq.n	61ce <_realloc_r+0x3ca>
    61c6:	adds	r6, #16
    61c8:	add.w	r2, sl, #24
    61cc:	b.n	605e <_realloc_r+0x25a>
    61ce:	ldr	r2, [r6, #16]
    61d0:	str.w	r2, [sl, #24]
    61d4:	ldr	r2, [r6, #20]
    61d6:	str.w	r2, [sl, #28]
    61da:	adds	r6, #24
    61dc:	add.w	r2, sl, #32
    61e0:	b.n	605e <_realloc_r+0x25a>
    61e2:	nop

000061e4 <_sbrk_r>:
    61e4:	push	{r3, r4, r5, lr}
    61e6:	ldr	r4, [pc, #28]	; (6204 <_sbrk_r+0x20>)
    61e8:	movs	r3, #0
    61ea:	mov	r5, r0
    61ec:	mov	r0, r1
    61ee:	str	r3, [r4, #0]
    61f0:	bl	3aa4 <_sbrk>
    61f4:	adds	r3, r0, #1
    61f6:	beq.n	61fa <_sbrk_r+0x16>
    61f8:	pop	{r3, r4, r5, pc}
    61fa:	ldr	r3, [r4, #0]
    61fc:	cmp	r3, #0
    61fe:	beq.n	61f8 <_sbrk_r+0x14>
    6200:	str	r3, [r5, #0]
    6202:	pop	{r3, r4, r5, pc}
    6204:	.word	0x200036c0

00006208 <sprintf>:
    6208:	push	{r1, r2, r3}
    620a:	push	{r4, r5, r6, r7, lr}
    620c:	sub	sp, #112	; 0x70
    620e:	add	r3, sp, #132	; 0x84
    6210:	ldr	r1, [pc, #60]	; (6250 <sprintf+0x48>)
    6212:	ldr.w	r2, [r3], #4
    6216:	str	r3, [sp, #4]
    6218:	mov	r5, r0
    621a:	mvn.w	r4, #2147483648	; 0x80000000
    621e:	ldr	r0, [r1, #0]
    6220:	str	r5, [sp, #8]
    6222:	mov.w	r7, #520	; 0x208
    6226:	movw	r6, #65535	; 0xffff
    622a:	add	r1, sp, #8
    622c:	str	r5, [sp, #24]
    622e:	strh.w	r7, [sp, #20]
    6232:	str	r4, [sp, #16]
    6234:	str	r4, [sp, #28]
    6236:	strh.w	r6, [sp, #22]
    623a:	bl	6360 <_svfprintf_r>
    623e:	ldr	r3, [sp, #8]
    6240:	movs	r2, #0
    6242:	strb	r2, [r3, #0]
    6244:	add	sp, #112	; 0x70
    6246:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    624a:	add	sp, #12
    624c:	bx	lr
    624e:	nop
    6250:	.word	0x20000f98
	...

00006280 <strlen>:
    6280:	pld	[r0]
    6284:	strd	r4, r5, [sp, #-8]!
    6288:	bic.w	r1, r0, #7
    628c:	mvn.w	ip, #0
    6290:	ands.w	r4, r0, #7
    6294:	pld	[r1, #32]
    6298:	bne.w	632e <strlen+0xae>
    629c:	mov.w	r4, #0
    62a0:	mvn.w	r0, #7
    62a4:	ldrd	r2, r3, [r1]
    62a8:	pld	[r1, #64]	; 0x40
    62ac:	add.w	r0, r0, #8
    62b0:	uadd8	r2, r2, ip
    62b4:	sel	r2, r4, ip
    62b8:	uadd8	r3, r3, ip
    62bc:	sel	r3, r2, ip
    62c0:	cbnz	r3, 6316 <strlen+0x96>
    62c2:	ldrd	r2, r3, [r1, #8]
    62c6:	uadd8	r2, r2, ip
    62ca:	add.w	r0, r0, #8
    62ce:	sel	r2, r4, ip
    62d2:	uadd8	r3, r3, ip
    62d6:	sel	r3, r2, ip
    62da:	cbnz	r3, 6316 <strlen+0x96>
    62dc:	ldrd	r2, r3, [r1, #16]
    62e0:	uadd8	r2, r2, ip
    62e4:	add.w	r0, r0, #8
    62e8:	sel	r2, r4, ip
    62ec:	uadd8	r3, r3, ip
    62f0:	sel	r3, r2, ip
    62f4:	cbnz	r3, 6316 <strlen+0x96>
    62f6:	ldrd	r2, r3, [r1, #24]
    62fa:	add.w	r1, r1, #32
    62fe:	uadd8	r2, r2, ip
    6302:	add.w	r0, r0, #8
    6306:	sel	r2, r4, ip
    630a:	uadd8	r3, r3, ip
    630e:	sel	r3, r2, ip
    6312:	cmp	r3, #0
    6314:	beq.n	62a4 <strlen+0x24>
    6316:	cmp	r2, #0
    6318:	itt	eq
    631a:	addeq	r0, #4
    631c:	moveq	r2, r3
    631e:	rev	r2, r2
    6320:	clz	r2, r2
    6324:	ldrd	r4, r5, [sp], #8
    6328:	add.w	r0, r0, r2, lsr #3
    632c:	bx	lr
    632e:	ldrd	r2, r3, [r1]
    6332:	and.w	r5, r4, #3
    6336:	rsb	r0, r4, #0
    633a:	mov.w	r5, r5, lsl #3
    633e:	tst.w	r4, #4
    6342:	pld	[r1, #64]	; 0x40
    6346:	lsl.w	r5, ip, r5
    634a:	orn	r2, r2, r5
    634e:	itt	ne
    6350:	ornne	r3, r3, r5
    6354:	movne	r2, ip
    6356:	mov.w	r4, #0
    635a:	b.n	62b0 <strlen+0x30>
    635c:	movs	r0, r0
	...

00006360 <_svfprintf_r>:
    6360:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6364:	vpush	{d8-d10}
    6368:	sub	sp, #228	; 0xe4
    636a:	mov	r4, r1
    636c:	str	r1, [sp, #12]
    636e:	mov	sl, r2
    6370:	str	r3, [sp, #36]	; 0x24
    6372:	str	r0, [sp, #20]
    6374:	bl	89a8 <_localeconv_r>
    6378:	ldr	r3, [r0, #0]
    637a:	str	r3, [sp, #64]	; 0x40
    637c:	mov	r0, r3
    637e:	bl	6280 <strlen>
    6382:	ldrh	r3, [r4, #12]
    6384:	str	r0, [sp, #60]	; 0x3c
    6386:	lsls	r1, r3, #24
    6388:	bpl.n	6392 <_svfprintf_r+0x32>
    638a:	ldr	r3, [r4, #16]
    638c:	cmp	r3, #0
    638e:	beq.w	748c <_svfprintf_r+0x112c>
    6392:	movs	r3, #0
    6394:	vldr	d8, [pc, #656]	; 6628 <_svfprintf_r+0x2c8>
    6398:	vldr	d9, [pc, #660]	; 6630 <_svfprintf_r+0x2d0>
    639c:	str	r3, [sp, #52]	; 0x34
    639e:	str	r3, [sp, #116]	; 0x74
    63a0:	str	r3, [sp, #112]	; 0x70
    63a2:	str	r3, [sp, #68]	; 0x44
    63a4:	str	r3, [sp, #24]
    63a6:	add	r3, sp, #160	; 0xa0
    63a8:	str	r3, [sp, #108]	; 0x6c
    63aa:	mov	r9, r3
    63ac:	ldrb.w	r3, [sl]
    63b0:	mov	r4, sl
    63b2:	cbz	r3, 63f0 <_svfprintf_r+0x90>
    63b4:	cmp	r3, #37	; 0x25
    63b6:	bne.n	63be <_svfprintf_r+0x5e>
    63b8:	b.n	63f0 <_svfprintf_r+0x90>
    63ba:	cmp	r3, #37	; 0x25
    63bc:	beq.n	63c6 <_svfprintf_r+0x66>
    63be:	ldrb.w	r3, [r4, #1]!
    63c2:	cmp	r3, #0
    63c4:	bne.n	63ba <_svfprintf_r+0x5a>
    63c6:	rsb	r5, sl, r4
    63ca:	cbz	r5, 63f0 <_svfprintf_r+0x90>
    63cc:	ldr	r3, [sp, #112]	; 0x70
    63ce:	ldr	r2, [sp, #116]	; 0x74
    63d0:	str.w	sl, [r9]
    63d4:	adds	r3, #1
    63d6:	add	r2, r5
    63d8:	cmp	r3, #7
    63da:	str.w	r5, [r9, #4]
    63de:	str	r2, [sp, #116]	; 0x74
    63e0:	str	r3, [sp, #112]	; 0x70
    63e2:	bgt.w	652c <_svfprintf_r+0x1cc>
    63e6:	add.w	r9, r9, #8
    63ea:	ldr	r3, [sp, #24]
    63ec:	add	r3, r5
    63ee:	str	r3, [sp, #24]
    63f0:	ldrb	r3, [r4, #0]
    63f2:	cmp	r3, #0
    63f4:	beq.w	653e <_svfprintf_r+0x1de>
    63f8:	movs	r3, #0
    63fa:	mov	r2, r3
    63fc:	strb.w	r3, [sp, #79]	; 0x4f
    6400:	mov	r1, r3
    6402:	str	r3, [sp, #28]
    6404:	mov	fp, r3
    6406:	mov.w	r8, #4294967295
    640a:	ldrb	r3, [r4, #1]
    640c:	add.w	sl, r4, #1
    6410:	mov	r5, r8
    6412:	add.w	sl, sl, #1
    6416:	sub.w	r0, r3, #32
    641a:	cmp	r0, #88	; 0x58
    641c:	bhi.w	6c10 <_svfprintf_r+0x8b0>
    6420:	tbh	[pc, r0, lsl #1]
    6424:	.word	0x03f60363
    6428:	.word	0x036b03f6
    642c:	.word	0x03f603f6
    6430:	.word	0x03f603f6
    6434:	.word	0x03f603f6
    6438:	.word	0x037e0370
    643c:	.word	0x005d03f6
    6440:	.word	0x03f600df
    6444:	.word	0x010c00fb
    6448:	.word	0x010c010c
    644c:	.word	0x010c010c
    6450:	.word	0x010c010c
    6454:	.word	0x010c010c
    6458:	.word	0x03f603f6
    645c:	.word	0x03f603f6
    6460:	.word	0x03f603f6
    6464:	.word	0x03f603f6
    6468:	.word	0x03f603f6
    646c:	.word	0x015e011c
    6470:	.word	0x015e03f6
    6474:	.word	0x03f603f6
    6478:	.word	0x03f603f6
    647c:	.word	0x03f602a1
    6480:	.word	0x02a603f6
    6484:	.word	0x03f603f6
    6488:	.word	0x03f603f6
    648c:	.word	0x02d803f6
    6490:	.word	0x03f603f6
    6494:	.word	0x03f60305
    6498:	.word	0x03f603f6
    649c:	.word	0x03f603f6
    64a0:	.word	0x03f603f6
    64a4:	.word	0x03f603f6
    64a8:	.word	0x034303f6
    64ac:	.word	0x015e0356
    64b0:	.word	0x015e015e
    64b4:	.word	0x0356035e
    64b8:	.word	0x03f603f6
    64bc:	.word	0x03f603a4
    64c0:	.word	0x00a203b1
    64c4:	.word	0x03c30062
    64c8:	.word	0x03c803f6
    64cc:	.word	0x038303f6
    64d0:	.word	0x03f603f6
    64d4:	.short	0x038b
    64d6:	ldr	r0, [sp, #28]
    64d8:	str	r3, [sp, #36]	; 0x24
    64da:	negs	r0, r0
    64dc:	str	r0, [sp, #28]
    64de:	orr.w	fp, fp, #4
    64e2:	ldrb.w	r3, [sl]
    64e6:	b.n	6412 <_svfprintf_r+0xb2>
    64e8:	mov	r8, r5
    64ea:	ldr	r0, [sp, #36]	; 0x24
    64ec:	movs	r1, #0
    64ee:	movs	r3, #48	; 0x30
    64f0:	movs	r2, #120	; 0x78
    64f2:	cmp	r8, r1
    64f4:	strb.w	r3, [sp, #80]	; 0x50
    64f8:	ldr	r4, [r0, #0]
    64fa:	strb.w	r2, [sp, #81]	; 0x51
    64fe:	add.w	r7, r0, #4
    6502:	mov.w	r5, #0
    6506:	strb.w	r1, [sp, #79]	; 0x4f
    650a:	orr.w	r3, fp, #2
    650e:	blt.w	6c4a <_svfprintf_r+0x8ea>
    6512:	bic.w	r3, fp, #128	; 0x80
    6516:	orr.w	fp, r3, #2
    651a:	orrs.w	r3, r4, r5
    651e:	str	r7, [sp, #36]	; 0x24
    6520:	beq.w	6bf6 <_svfprintf_r+0x896>
    6524:	mov	r7, r1
    6526:	str	r2, [sp, #48]	; 0x30
    6528:	ldr	r0, [pc, #268]	; (6638 <_svfprintf_r+0x2d8>)
    652a:	b.n	6a8a <_svfprintf_r+0x72a>
    652c:	add	r2, sp, #108	; 0x6c
    652e:	ldr	r1, [sp, #12]
    6530:	ldr	r0, [sp, #20]
    6532:	bl	9094 <__ssprint_r>
    6536:	cbnz	r0, 654c <_svfprintf_r+0x1ec>
    6538:	add.w	r9, sp, #160	; 0xa0
    653c:	b.n	63ea <_svfprintf_r+0x8a>
    653e:	ldr	r3, [sp, #116]	; 0x74
    6540:	cbz	r3, 654c <_svfprintf_r+0x1ec>
    6542:	ldr	r0, [sp, #20]
    6544:	ldr	r1, [sp, #12]
    6546:	add	r2, sp, #108	; 0x6c
    6548:	bl	9094 <__ssprint_r>
    654c:	ldr	r3, [sp, #12]
    654e:	ldrh	r3, [r3, #12]
    6550:	tst.w	r3, #64	; 0x40
    6554:	ldr	r3, [sp, #24]
    6556:	it	ne
    6558:	movne.w	r3, #4294967295
    655c:	mov	r0, r3
    655e:	add	sp, #228	; 0xe4
    6560:	vpop	{d8-d10}
    6564:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6568:	str	r3, [sp, #48]	; 0x30
    656a:	mov	r8, r5
    656c:	cmp	r2, #0
    656e:	bne.w	78a6 <_svfprintf_r+0x1546>
    6572:	ands.w	r3, fp, #32
    6576:	beq.w	6986 <_svfprintf_r+0x626>
    657a:	ldr	r7, [sp, #36]	; 0x24
    657c:	adds	r7, #7
    657e:	bic.w	r3, r7, #7
    6582:	movs	r7, #0
    6584:	add.w	r2, r3, #8
    6588:	cmp	r8, r7
    658a:	str	r2, [sp, #36]	; 0x24
    658c:	ldrd	r4, r5, [r3]
    6590:	strb.w	r7, [sp, #79]	; 0x4f
    6594:	blt.w	7254 <_svfprintf_r+0xef4>
    6598:	orrs.w	r3, r4, r5
    659c:	bic.w	fp, fp, #128	; 0x80
    65a0:	beq.w	6c3a <_svfprintf_r+0x8da>
    65a4:	add	r6, sp, #160	; 0xa0
    65a6:	lsrs	r2, r4, #3
    65a8:	orr.w	r2, r2, r5, lsl #29
    65ac:	lsrs	r1, r5, #3
    65ae:	and.w	r3, r4, #7
    65b2:	mov	r5, r1
    65b4:	mov	r4, r2
    65b6:	adds	r3, #48	; 0x30
    65b8:	orrs.w	r2, r4, r5
    65bc:	strb.w	r3, [r6, #-1]!
    65c0:	bne.n	65a6 <_svfprintf_r+0x246>
    65c2:	tst.w	fp, #1
    65c6:	beq.w	6a18 <_svfprintf_r+0x6b8>
    65ca:	cmp	r3, #48	; 0x30
    65cc:	beq.w	6a18 <_svfprintf_r+0x6b8>
    65d0:	movs	r2, #48	; 0x30
    65d2:	subs	r3, r6, #1
    65d4:	strb.w	r2, [r6, #-1]
    65d8:	add	r2, sp, #160	; 0xa0
    65da:	subs	r2, r2, r3
    65dc:	str	r2, [sp, #32]
    65de:	mov	r6, r3
    65e0:	b.n	6a1e <_svfprintf_r+0x6be>
    65e2:	ldrb.w	r3, [sl]
    65e6:	cmp	r3, #42	; 0x2a
    65e8:	add.w	r4, sl, #1
    65ec:	beq.w	784e <_svfprintf_r+0x14ee>
    65f0:	sub.w	r0, r3, #48	; 0x30
    65f4:	cmp	r0, #9
    65f6:	it	ls
    65f8:	movls	r5, #0
    65fa:	bhi.w	77a8 <_svfprintf_r+0x1448>
    65fe:	ldrb.w	r3, [r4], #1
    6602:	add.w	r5, r5, r5, lsl #2
    6606:	add.w	r5, r0, r5, lsl #1
    660a:	sub.w	r0, r3, #48	; 0x30
    660e:	cmp	r0, #9
    6610:	bls.n	65fe <_svfprintf_r+0x29e>
    6612:	orr.w	r5, r5, r5, asr #31
    6616:	mov	sl, r4
    6618:	b.n	6416 <_svfprintf_r+0xb6>
    661a:	orr.w	fp, fp, #128	; 0x80
    661e:	ldrb.w	r3, [sl]
    6622:	b.n	6412 <_svfprintf_r+0xb2>
    6624:	nop.w
	...
    6630:	.word	0xffffffff
    6634:	.word	0x7fefffff
    6638:	.word	0x20000800
    663c:	sub.w	r0, r3, #48	; 0x30
    6640:	movs	r3, #0
    6642:	mov	r4, r3
    6644:	ldrb.w	r3, [sl], #1
    6648:	add.w	r4, r4, r4, lsl #2
    664c:	add.w	r4, r0, r4, lsl #1
    6650:	sub.w	r0, r3, #48	; 0x30
    6654:	cmp	r0, #9
    6656:	bls.n	6644 <_svfprintf_r+0x2e4>
    6658:	str	r4, [sp, #28]
    665a:	b.n	6416 <_svfprintf_r+0xb6>
    665c:	str	r3, [sp, #48]	; 0x30
    665e:	mov	r8, r5
    6660:	cmp	r2, #0
    6662:	bne.w	78be <_svfprintf_r+0x155e>
    6666:	orr.w	fp, fp, #16
    666a:	tst.w	fp, #32
    666e:	beq.w	7078 <_svfprintf_r+0xd18>
    6672:	ldr	r7, [sp, #36]	; 0x24
    6674:	adds	r7, #7
    6676:	bic.w	r7, r7, #7
    667a:	ldrd	r2, r3, [r7]
    667e:	add.w	r1, r7, #8
    6682:	str	r1, [sp, #36]	; 0x24
    6684:	mov	r4, r2
    6686:	mov	r5, r3
    6688:	cmp	r2, #0
    668a:	sbcs.w	r3, r3, #0
    668e:	blt.w	7100 <_svfprintf_r+0xda0>
    6692:	cmp.w	r8, #0
    6696:	ldrb.w	r7, [sp, #79]	; 0x4f
    669a:	blt.w	6a08 <_svfprintf_r+0x6a8>
    669e:	orrs.w	r3, r4, r5
    66a2:	bic.w	fp, fp, #128	; 0x80
    66a6:	beq.w	6e96 <_svfprintf_r+0xb36>
    66aa:	cmp	r5, #0
    66ac:	it	eq
    66ae:	cmpeq	r4, #10
    66b0:	bcc.w	6a10 <_svfprintf_r+0x6b0>
    66b4:	add	r6, sp, #160	; 0xa0
    66b6:	mov	r0, r4
    66b8:	mov	r1, r5
    66ba:	movs	r2, #10
    66bc:	movs	r3, #0
    66be:	bl	91f4 <__aeabi_uldivmod>
    66c2:	adds	r2, #48	; 0x30
    66c4:	strb.w	r2, [r6, #-1]!
    66c8:	mov	r0, r4
    66ca:	mov	r1, r5
    66cc:	movs	r3, #0
    66ce:	movs	r2, #10
    66d0:	bl	91f4 <__aeabi_uldivmod>
    66d4:	mov	r4, r0
    66d6:	mov	r5, r1
    66d8:	orrs.w	r3, r4, r5
    66dc:	bne.n	66b6 <_svfprintf_r+0x356>
    66de:	b.n	6a18 <_svfprintf_r+0x6b8>
    66e0:	str	r3, [sp, #48]	; 0x30
    66e2:	mov	r8, r5
    66e4:	cmp	r2, #0
    66e6:	bne.w	78b6 <_svfprintf_r+0x1556>
    66ea:	ldr	r7, [sp, #36]	; 0x24
    66ec:	tst.w	fp, #8
    66f0:	add.w	r7, r7, #7
    66f4:	beq.w	7378 <_svfprintf_r+0x1018>
    66f8:	bic.w	r3, r7, #7
    66fc:	vldr	d8, [r3]
    6700:	add.w	r2, r3, #8
    6704:	str	r2, [sp, #36]	; 0x24
    6706:	vabs.f64	d7, d8
    670a:	vcmp.f64	d7, d9
    670e:	vmrs	APSR_nzcv, fpscr
    6712:	ble.w	728e <_svfprintf_r+0xf2e>
    6716:	vcmpe.f64	d8, #0.0
    671a:	vmrs	APSR_nzcv, fpscr
    671e:	bmi.w	76b6 <_svfprintf_r+0x1356>
    6722:	ldrb.w	r7, [sp, #79]	; 0x4f
    6726:	ldr	r6, [pc, #668]	; (69c4 <_svfprintf_r+0x664>)
    6728:	ldr	r3, [pc, #668]	; (69c8 <_svfprintf_r+0x668>)
    672a:	ldr	r1, [sp, #48]	; 0x30
    672c:	movs	r2, #3
    672e:	mov.w	r8, #0
    6732:	str	r2, [sp, #16]
    6734:	bic.w	fp, fp, #128	; 0x80
    6738:	cmp	r1, #71	; 0x47
    673a:	it	le
    673c:	movle	r6, r3
    673e:	str	r2, [sp, #32]
    6740:	str.w	r8, [sp, #56]	; 0x38
    6744:	cbz	r7, 674c <_svfprintf_r+0x3ec>
    6746:	ldr	r3, [sp, #16]
    6748:	adds	r3, #1
    674a:	str	r3, [sp, #16]
    674c:	ands.w	r3, fp, #2
    6750:	str	r3, [sp, #40]	; 0x28
    6752:	beq.n	675a <_svfprintf_r+0x3fa>
    6754:	ldr	r3, [sp, #16]
    6756:	adds	r3, #2
    6758:	str	r3, [sp, #16]
    675a:	ands.w	r3, fp, #132	; 0x84
    675e:	str	r3, [sp, #44]	; 0x2c
    6760:	bne.w	6c64 <_svfprintf_r+0x904>
    6764:	ldr	r3, [sp, #28]
    6766:	ldr	r2, [sp, #16]
    6768:	subs	r4, r3, r2
    676a:	cmp	r4, #0
    676c:	ble.w	6c64 <_svfprintf_r+0x904>
    6770:	cmp	r4, #16
    6772:	ldr	r1, [sp, #116]	; 0x74
    6774:	ldr	r2, [sp, #112]	; 0x70
    6776:	ldr	r7, [pc, #596]	; (69cc <_svfprintf_r+0x66c>)
    6778:	ble.n	67c2 <_svfprintf_r+0x462>
    677a:	mov	r0, r9
    677c:	movs	r5, #16
    677e:	mov	r9, r8
    6780:	mov	r8, r6
    6782:	ldr	r6, [sp, #20]
    6784:	b.n	6790 <_svfprintf_r+0x430>
    6786:	subs	r4, #16
    6788:	cmp	r4, #16
    678a:	add.w	r0, r0, #8
    678e:	ble.n	67bc <_svfprintf_r+0x45c>
    6790:	adds	r2, #1
    6792:	adds	r1, #16
    6794:	cmp	r2, #7
    6796:	str	r1, [sp, #116]	; 0x74
    6798:	str	r2, [sp, #112]	; 0x70
    679a:	str	r7, [r0, #0]
    679c:	str	r5, [r0, #4]
    679e:	ble.n	6786 <_svfprintf_r+0x426>
    67a0:	add	r2, sp, #108	; 0x6c
    67a2:	ldr	r1, [sp, #12]
    67a4:	mov	r0, r6
    67a6:	bl	9094 <__ssprint_r>
    67aa:	cmp	r0, #0
    67ac:	bne.w	654c <_svfprintf_r+0x1ec>
    67b0:	subs	r4, #16
    67b2:	cmp	r4, #16
    67b4:	ldr	r1, [sp, #116]	; 0x74
    67b6:	ldr	r2, [sp, #112]	; 0x70
    67b8:	add	r0, sp, #160	; 0xa0
    67ba:	bgt.n	6790 <_svfprintf_r+0x430>
    67bc:	mov	r6, r8
    67be:	mov	r8, r9
    67c0:	mov	r9, r0
    67c2:	adds	r2, #1
    67c4:	adds	r3, r4, r1
    67c6:	cmp	r2, #7
    67c8:	str	r3, [sp, #116]	; 0x74
    67ca:	str	r2, [sp, #112]	; 0x70
    67cc:	str.w	r7, [r9]
    67d0:	str.w	r4, [r9, #4]
    67d4:	bgt.w	6f9c <_svfprintf_r+0xc3c>
    67d8:	ldrb.w	r7, [sp, #79]	; 0x4f
    67dc:	add.w	r9, r9, #8
    67e0:	cbz	r7, 6800 <_svfprintf_r+0x4a0>
    67e2:	ldr	r2, [sp, #112]	; 0x70
    67e4:	adds	r2, #1
    67e6:	adds	r3, #1
    67e8:	add.w	r0, sp, #79	; 0x4f
    67ec:	movs	r1, #1
    67ee:	cmp	r2, #7
    67f0:	str	r3, [sp, #116]	; 0x74
    67f2:	str	r2, [sp, #112]	; 0x70
    67f4:	stmia.w	r9, {r0, r1}
    67f8:	bgt.w	6eba <_svfprintf_r+0xb5a>
    67fc:	add.w	r9, r9, #8
    6800:	ldr	r2, [sp, #40]	; 0x28
    6802:	cbz	r2, 6820 <_svfprintf_r+0x4c0>
    6804:	ldr	r2, [sp, #112]	; 0x70
    6806:	adds	r2, #1
    6808:	adds	r3, #2
    680a:	add	r0, sp, #80	; 0x50
    680c:	movs	r1, #2
    680e:	cmp	r2, #7
    6810:	str	r3, [sp, #116]	; 0x74
    6812:	str	r2, [sp, #112]	; 0x70
    6814:	stmia.w	r9, {r0, r1}
    6818:	bgt.w	6ed2 <_svfprintf_r+0xb72>
    681c:	add.w	r9, r9, #8
    6820:	ldr	r2, [sp, #44]	; 0x2c
    6822:	cmp	r2, #128	; 0x80
    6824:	beq.w	6d24 <_svfprintf_r+0x9c4>
    6828:	ldr	r2, [sp, #32]
    682a:	rsb	r4, r2, r8
    682e:	cmp	r4, #0
    6830:	ble.n	689c <_svfprintf_r+0x53c>
    6832:	cmp	r4, #16
    6834:	ldr	r2, [sp, #112]	; 0x70
    6836:	ldr	r7, [pc, #408]	; (69d0 <_svfprintf_r+0x670>)
    6838:	ble.n	6882 <_svfprintf_r+0x522>
    683a:	mov	r1, r9
    683c:	mov.w	r8, #16
    6840:	mov	r9, r6
    6842:	ldr	r5, [sp, #20]
    6844:	ldr	r6, [sp, #12]
    6846:	b.n	6852 <_svfprintf_r+0x4f2>
    6848:	subs	r4, #16
    684a:	cmp	r4, #16
    684c:	add.w	r1, r1, #8
    6850:	ble.n	687e <_svfprintf_r+0x51e>
    6852:	adds	r2, #1
    6854:	adds	r3, #16
    6856:	cmp	r2, #7
    6858:	str	r3, [sp, #116]	; 0x74
    685a:	str	r2, [sp, #112]	; 0x70
    685c:	stmia.w	r1, {r7, r8}
    6860:	ble.n	6848 <_svfprintf_r+0x4e8>
    6862:	add	r2, sp, #108	; 0x6c
    6864:	mov	r1, r6
    6866:	mov	r0, r5
    6868:	bl	9094 <__ssprint_r>
    686c:	cmp	r0, #0
    686e:	bne.w	654c <_svfprintf_r+0x1ec>
    6872:	subs	r4, #16
    6874:	cmp	r4, #16
    6876:	ldr	r3, [sp, #116]	; 0x74
    6878:	ldr	r2, [sp, #112]	; 0x70
    687a:	add	r1, sp, #160	; 0xa0
    687c:	bgt.n	6852 <_svfprintf_r+0x4f2>
    687e:	mov	r6, r9
    6880:	mov	r9, r1
    6882:	adds	r2, #1
    6884:	add	r3, r4
    6886:	cmp	r2, #7
    6888:	str	r3, [sp, #116]	; 0x74
    688a:	str	r2, [sp, #112]	; 0x70
    688c:	str.w	r7, [r9]
    6890:	str.w	r4, [r9, #4]
    6894:	bgt.w	6ea2 <_svfprintf_r+0xb42>
    6898:	add.w	r9, r9, #8
    689c:	tst.w	fp, #256	; 0x100
    68a0:	bne.w	6c68 <_svfprintf_r+0x908>
    68a4:	ldr	r2, [sp, #112]	; 0x70
    68a6:	ldr	r0, [sp, #32]
    68a8:	str.w	r6, [r9]
    68ac:	adds	r2, #1
    68ae:	add	r3, r0
    68b0:	cmp	r2, #7
    68b2:	str	r3, [sp, #116]	; 0x74
    68b4:	str.w	r0, [r9, #4]
    68b8:	str	r2, [sp, #112]	; 0x70
    68ba:	bgt.w	6e42 <_svfprintf_r+0xae2>
    68be:	add.w	r9, r9, #8
    68c2:	tst.w	fp, #4
    68c6:	beq.n	6946 <_svfprintf_r+0x5e6>
    68c8:	ldr	r2, [sp, #28]
    68ca:	ldr	r1, [sp, #16]
    68cc:	subs	r4, r2, r1
    68ce:	cmp	r4, #0
    68d0:	ble.n	6946 <_svfprintf_r+0x5e6>
    68d2:	cmp	r4, #16
    68d4:	ldr	r2, [sp, #112]	; 0x70
    68d6:	ldr	r7, [pc, #244]	; (69cc <_svfprintf_r+0x66c>)
    68d8:	ble.n	6920 <_svfprintf_r+0x5c0>
    68da:	movs	r5, #16
    68dc:	ldr	r6, [sp, #20]
    68de:	ldr.w	r8, [sp, #12]
    68e2:	b.n	68ee <_svfprintf_r+0x58e>
    68e4:	subs	r4, #16
    68e6:	cmp	r4, #16
    68e8:	add.w	r9, r9, #8
    68ec:	ble.n	6920 <_svfprintf_r+0x5c0>
    68ee:	adds	r2, #1
    68f0:	adds	r3, #16
    68f2:	cmp	r2, #7
    68f4:	str	r3, [sp, #116]	; 0x74
    68f6:	str	r2, [sp, #112]	; 0x70
    68f8:	str.w	r7, [r9]
    68fc:	str.w	r5, [r9, #4]
    6900:	ble.n	68e4 <_svfprintf_r+0x584>
    6902:	add	r2, sp, #108	; 0x6c
    6904:	mov	r1, r8
    6906:	mov	r0, r6
    6908:	bl	9094 <__ssprint_r>
    690c:	cmp	r0, #0
    690e:	bne.w	654c <_svfprintf_r+0x1ec>
    6912:	subs	r4, #16
    6914:	cmp	r4, #16
    6916:	ldr	r3, [sp, #116]	; 0x74
    6918:	ldr	r2, [sp, #112]	; 0x70
    691a:	add.w	r9, sp, #160	; 0xa0
    691e:	bgt.n	68ee <_svfprintf_r+0x58e>
    6920:	adds	r2, #1
    6922:	add	r3, r4
    6924:	cmp	r2, #7
    6926:	str	r3, [sp, #116]	; 0x74
    6928:	str	r2, [sp, #112]	; 0x70
    692a:	str.w	r7, [r9]
    692e:	str.w	r4, [r9, #4]
    6932:	ble.n	6946 <_svfprintf_r+0x5e6>
    6934:	add	r2, sp, #108	; 0x6c
    6936:	ldr	r1, [sp, #12]
    6938:	ldr	r0, [sp, #20]
    693a:	bl	9094 <__ssprint_r>
    693e:	cmp	r0, #0
    6940:	bne.w	654c <_svfprintf_r+0x1ec>
    6944:	ldr	r3, [sp, #116]	; 0x74
    6946:	ldr	r2, [sp, #24]
    6948:	ldr	r1, [sp, #28]
    694a:	ldr	r0, [sp, #16]
    694c:	cmp	r1, r0
    694e:	ite	ge
    6950:	addge	r2, r2, r1
    6952:	addlt	r2, r2, r0
    6954:	str	r2, [sp, #24]
    6956:	cmp	r3, #0
    6958:	bne.w	6e5a <_svfprintf_r+0xafa>
    695c:	movs	r3, #0
    695e:	str	r3, [sp, #112]	; 0x70
    6960:	add.w	r9, sp, #160	; 0xa0
    6964:	b.n	63ac <_svfprintf_r+0x4c>
    6966:	orr.w	fp, fp, #8
    696a:	ldrb.w	r3, [sl]
    696e:	b.n	6412 <_svfprintf_r+0xb2>
    6970:	str	r3, [sp, #48]	; 0x30
    6972:	mov	r8, r5
    6974:	cmp	r2, #0
    6976:	bne.w	78ae <_svfprintf_r+0x154e>
    697a:	orr.w	fp, fp, #16
    697e:	ands.w	r3, fp, #32
    6982:	bne.w	657a <_svfprintf_r+0x21a>
    6986:	ands.w	r2, fp, #16
    698a:	bne.w	70b0 <_svfprintf_r+0xd50>
    698e:	ands.w	r3, fp, #64	; 0x40
    6992:	beq.w	70b0 <_svfprintf_r+0xd50>
    6996:	ldr	r1, [sp, #36]	; 0x24
    6998:	strb.w	r2, [sp, #79]	; 0x4f
    699c:	mov	r3, r1
    699e:	cmp.w	r8, #0
    69a2:	add.w	r3, r3, #4
    69a6:	ldrh	r4, [r1, #0]
    69a8:	mov.w	r5, #0
    69ac:	blt.w	7506 <_svfprintf_r+0x11a6>
    69b0:	orrs.w	r1, r4, r5
    69b4:	bic.w	fp, fp, #128	; 0x80
    69b8:	str	r3, [sp, #36]	; 0x24
    69ba:	beq.w	6c3a <_svfprintf_r+0x8da>
    69be:	mov	r7, r2
    69c0:	b.n	65a4 <_svfprintf_r+0x244>
    69c2:	nop
    69c4:	.word	0x200007e0
    69c8:	.word	0x200007dc
    69cc:	.word	0x20000820
    69d0:	.word	0x200007cc
    69d4:	str	r3, [sp, #48]	; 0x30
    69d6:	mov	r8, r5
    69d8:	cmp	r2, #0
    69da:	bne.w	7890 <_svfprintf_r+0x1530>
    69de:	orr.w	fp, fp, #16
    69e2:	ands.w	r3, fp, #32
    69e6:	beq.w	6fb8 <_svfprintf_r+0xc58>
    69ea:	ldr	r7, [sp, #36]	; 0x24
    69ec:	adds	r7, #7
    69ee:	bic.w	r3, r7, #7
    69f2:	movs	r7, #0
    69f4:	add.w	r2, r3, #8
    69f8:	cmp	r8, r7
    69fa:	str	r2, [sp, #36]	; 0x24
    69fc:	ldrd	r4, r5, [r3]
    6a00:	strb.w	r7, [sp, #79]	; 0x4f
    6a04:	bge.w	669e <_svfprintf_r+0x33e>
    6a08:	orrs.w	r3, r4, r5
    6a0c:	bne.w	66aa <_svfprintf_r+0x34a>
    6a10:	add	r6, sp, #224	; 0xe0
    6a12:	adds	r4, #48	; 0x30
    6a14:	strb.w	r4, [r6, #-65]!
    6a18:	add	r3, sp, #160	; 0xa0
    6a1a:	subs	r3, r3, r6
    6a1c:	str	r3, [sp, #32]
    6a1e:	ldr	r3, [sp, #32]
    6a20:	cmp	r3, r8
    6a22:	it	lt
    6a24:	movlt	r3, r8
    6a26:	str	r3, [sp, #16]
    6a28:	movs	r3, #0
    6a2a:	str	r3, [sp, #56]	; 0x38
    6a2c:	b.n	6744 <_svfprintf_r+0x3e4>
    6a2e:	str	r3, [sp, #48]	; 0x30
    6a30:	mov	r8, r5
    6a32:	cmp	r2, #0
    6a34:	bne.w	7888 <_svfprintf_r+0x1528>
    6a38:	tst.w	fp, #32
    6a3c:	ldr	r0, [pc, #776]	; (6d48 <_svfprintf_r+0x9e8>)
    6a3e:	beq.w	6b4e <_svfprintf_r+0x7ee>
    6a42:	ldr	r7, [sp, #36]	; 0x24
    6a44:	adds	r7, #7
    6a46:	bic.w	r3, r7, #7
    6a4a:	ldrd	r4, r5, [r3]
    6a4e:	add.w	r2, r3, #8
    6a52:	str	r2, [sp, #36]	; 0x24
    6a54:	ands.w	r7, fp, #1
    6a58:	beq.w	6eea <_svfprintf_r+0xb8a>
    6a5c:	orrs.w	r3, r4, r5
    6a60:	beq.w	73aa <_svfprintf_r+0x104a>
    6a64:	movs	r7, #0
    6a66:	movs	r3, #48	; 0x30
    6a68:	ldrb.w	r2, [sp, #48]	; 0x30
    6a6c:	strb.w	r3, [sp, #80]	; 0x50
    6a70:	cmp	r8, r7
    6a72:	strb.w	r2, [sp, #81]	; 0x51
    6a76:	strb.w	r7, [sp, #79]	; 0x4f
    6a7a:	orr.w	r3, fp, #2
    6a7e:	blt.w	76b0 <_svfprintf_r+0x1350>
    6a82:	bic.w	r3, fp, #128	; 0x80
    6a86:	orr.w	fp, r3, #2
    6a8a:	add	r6, sp, #160	; 0xa0
    6a8c:	lsrs	r3, r4, #4
    6a8e:	and.w	r1, r4, #15
    6a92:	orr.w	r3, r3, r5, lsl #28
    6a96:	lsrs	r2, r5, #4
    6a98:	mov	r4, r3
    6a9a:	mov	r5, r2
    6a9c:	ldrb	r3, [r0, r1]
    6a9e:	strb.w	r3, [r6, #-1]!
    6aa2:	orrs.w	r3, r4, r5
    6aa6:	bne.n	6a8c <_svfprintf_r+0x72c>
    6aa8:	b.n	6a18 <_svfprintf_r+0x6b8>
    6aaa:	ldr	r1, [sp, #36]	; 0x24
    6aac:	str	r3, [sp, #48]	; 0x30
    6aae:	ldr	r2, [r1, #0]
    6ab0:	strb.w	r2, [sp, #120]	; 0x78
    6ab4:	movs	r3, #0
    6ab6:	mov	r2, r1
    6ab8:	mov	r7, r3
    6aba:	strb.w	r3, [sp, #79]	; 0x4f
    6abe:	adds	r2, #4
    6ac0:	movs	r3, #1
    6ac2:	str	r3, [sp, #16]
    6ac4:	mov	r8, r7
    6ac6:	str	r7, [sp, #56]	; 0x38
    6ac8:	str	r2, [sp, #36]	; 0x24
    6aca:	str	r3, [sp, #32]
    6acc:	add	r6, sp, #120	; 0x78
    6ace:	b.n	674c <_svfprintf_r+0x3ec>
    6ad0:	str	r3, [sp, #48]	; 0x30
    6ad2:	mov	r8, r5
    6ad4:	cmp	r2, #0
    6ad6:	beq.w	666a <_svfprintf_r+0x30a>
    6ada:	strb.w	r1, [sp, #79]	; 0x4f
    6ade:	b.n	666a <_svfprintf_r+0x30a>
    6ae0:	orr.w	fp, fp, #64	; 0x40
    6ae4:	ldrb.w	r3, [sl]
    6ae8:	b.n	6412 <_svfprintf_r+0xb2>
    6aea:	ldrb.w	r3, [sl]
    6aee:	cmp	r1, #0
    6af0:	bne.w	6412 <_svfprintf_r+0xb2>
    6af4:	movs	r2, #1
    6af6:	movs	r1, #32
    6af8:	b.n	6412 <_svfprintf_r+0xb2>
    6afa:	orr.w	fp, fp, #1
    6afe:	ldrb.w	r3, [sl]
    6b02:	b.n	6412 <_svfprintf_r+0xb2>
    6b04:	ldr	r4, [sp, #36]	; 0x24
    6b06:	ldr	r3, [r4, #0]
    6b08:	str	r3, [sp, #28]
    6b0a:	mov	r0, r3
    6b0c:	cmp	r0, #0
    6b0e:	mov	r3, r4
    6b10:	add.w	r3, r3, #4
    6b14:	blt.w	64d6 <_svfprintf_r+0x176>
    6b18:	str	r3, [sp, #36]	; 0x24
    6b1a:	ldrb.w	r3, [sl]
    6b1e:	b.n	6412 <_svfprintf_r+0xb2>
    6b20:	ldrb.w	r3, [sl]
    6b24:	movs	r2, #1
    6b26:	movs	r1, #43	; 0x2b
    6b28:	b.n	6412 <_svfprintf_r+0xb2>
    6b2a:	str	r3, [sp, #48]	; 0x30
    6b2c:	mov	r8, r5
    6b2e:	cmp	r2, #0
    6b30:	beq.w	69e2 <_svfprintf_r+0x682>
    6b34:	strb.w	r1, [sp, #79]	; 0x4f
    6b38:	b.n	69e2 <_svfprintf_r+0x682>
    6b3a:	str	r3, [sp, #48]	; 0x30
    6b3c:	mov	r8, r5
    6b3e:	cmp	r2, #0
    6b40:	bne.w	7898 <_svfprintf_r+0x1538>
    6b44:	tst.w	fp, #32
    6b48:	ldr	r0, [pc, #512]	; (6d4c <_svfprintf_r+0x9ec>)
    6b4a:	bne.w	6a42 <_svfprintf_r+0x6e2>
    6b4e:	ldr	r2, [sp, #36]	; 0x24
    6b50:	tst.w	fp, #16
    6b54:	mov	r3, r2
    6b56:	bne.w	70dc <_svfprintf_r+0xd7c>
    6b5a:	tst.w	fp, #64	; 0x40
    6b5e:	beq.w	70dc <_svfprintf_r+0xd7c>
    6b62:	adds	r3, #4
    6b64:	ldrh	r4, [r2, #0]
    6b66:	str	r3, [sp, #36]	; 0x24
    6b68:	movs	r5, #0
    6b6a:	b.n	6a54 <_svfprintf_r+0x6f4>
    6b6c:	ldrb.w	r3, [sl]
    6b70:	cmp	r3, #108	; 0x6c
    6b72:	ittte	eq
    6b74:	ldrbeq.w	r3, [sl, #1]
    6b78:	orreq.w	fp, fp, #32
    6b7c:	addeq.w	sl, sl, #1
    6b80:	orrne.w	fp, fp, #16
    6b84:	b.n	6412 <_svfprintf_r+0xb2>
    6b86:	cmp	r2, #0
    6b88:	bne.w	786a <_svfprintf_r+0x150a>
    6b8c:	tst.w	fp, #32
    6b90:	beq.w	7260 <_svfprintf_r+0xf00>
    6b94:	ldr	r2, [sp, #36]	; 0x24
    6b96:	ldr	r1, [sp, #24]
    6b98:	ldr	r3, [r2, #0]
    6b9a:	asrs	r5, r1, #31
    6b9c:	mov	r0, r1
    6b9e:	adds	r2, #4
    6ba0:	mov	r1, r5
    6ba2:	str	r2, [sp, #36]	; 0x24
    6ba4:	strd	r0, r1, [r3]
    6ba8:	b.n	63ac <_svfprintf_r+0x4c>
    6baa:	orr.w	fp, fp, #32
    6bae:	ldrb.w	r3, [sl]
    6bb2:	b.n	6412 <_svfprintf_r+0xb2>
    6bb4:	ldr	r2, [sp, #36]	; 0x24
    6bb6:	str	r3, [sp, #48]	; 0x30
    6bb8:	ldr	r6, [r2, #0]
    6bba:	movs	r4, #0
    6bbc:	strb.w	r4, [sp, #79]	; 0x4f
    6bc0:	adds	r7, r2, #4
    6bc2:	cmp	r6, #0
    6bc4:	beq.w	7692 <_svfprintf_r+0x1332>
    6bc8:	cmp	r5, #0
    6bca:	blt.w	7512 <_svfprintf_r+0x11b2>
    6bce:	mov	r2, r5
    6bd0:	mov	r1, r4
    6bd2:	mov	r0, r6
    6bd4:	bl	89d0 <memchr>
    6bd8:	cmp	r0, #0
    6bda:	beq.w	7776 <_svfprintf_r+0x1416>
    6bde:	subs	r3, r0, r6
    6be0:	str	r3, [sp, #32]
    6be2:	mov	r8, r4
    6be4:	bic.w	r3, r3, r3, asr #31
    6be8:	str	r7, [sp, #36]	; 0x24
    6bea:	str	r3, [sp, #16]
    6bec:	str.w	r8, [sp, #56]	; 0x38
    6bf0:	ldrb.w	r7, [sp, #79]	; 0x4f
    6bf4:	b.n	6744 <_svfprintf_r+0x3e4>
    6bf6:	ldr	r0, [pc, #340]	; (6d4c <_svfprintf_r+0x9ec>)
    6bf8:	str	r2, [sp, #48]	; 0x30
    6bfa:	cmp.w	r8, #0
    6bfe:	bne.w	6f0a <_svfprintf_r+0xbaa>
    6c02:	mov	r7, r8
    6c04:	mov.w	r8, #0
    6c08:	str.w	r8, [sp, #32]
    6c0c:	add	r6, sp, #160	; 0xa0
    6c0e:	b.n	6a1e <_svfprintf_r+0x6be>
    6c10:	str	r3, [sp, #48]	; 0x30
    6c12:	cmp	r2, #0
    6c14:	bne.w	7872 <_svfprintf_r+0x1512>
    6c18:	ldr	r2, [sp, #48]	; 0x30
    6c1a:	cmp	r2, #0
    6c1c:	beq.w	653e <_svfprintf_r+0x1de>
    6c20:	movs	r3, #0
    6c22:	movs	r1, #1
    6c24:	mov	r7, r3
    6c26:	str	r1, [sp, #16]
    6c28:	strb.w	r2, [sp, #120]	; 0x78
    6c2c:	strb.w	r3, [sp, #79]	; 0x4f
    6c30:	mov	r8, r3
    6c32:	str	r3, [sp, #56]	; 0x38
    6c34:	str	r1, [sp, #32]
    6c36:	add	r6, sp, #120	; 0x78
    6c38:	b.n	674c <_svfprintf_r+0x3ec>
    6c3a:	cmp.w	r8, #0
    6c3e:	beq.w	7758 <_svfprintf_r+0x13f8>
    6c42:	movs	r7, #0
    6c44:	movs	r4, #0
    6c46:	movs	r5, #0
    6c48:	b.n	65a4 <_svfprintf_r+0x244>
    6c4a:	ldr	r0, [pc, #256]	; (6d4c <_svfprintf_r+0x9ec>)
    6c4c:	str	r2, [sp, #48]	; 0x30
    6c4e:	mov	fp, r3
    6c50:	orrs.w	r3, r4, r5
    6c54:	str	r7, [sp, #36]	; 0x24
    6c56:	mov.w	r7, #0
    6c5a:	bne.w	6a8a <_svfprintf_r+0x72a>
    6c5e:	movs	r4, #0
    6c60:	movs	r5, #0
    6c62:	b.n	6a8a <_svfprintf_r+0x72a>
    6c64:	ldr	r3, [sp, #116]	; 0x74
    6c66:	b.n	67e0 <_svfprintf_r+0x480>
    6c68:	ldr	r2, [sp, #48]	; 0x30
    6c6a:	cmp	r2, #101	; 0x65
    6c6c:	ble.w	6db2 <_svfprintf_r+0xa52>
    6c70:	vcmp.f64	d8, #0.0
    6c74:	vmrs	APSR_nzcv, fpscr
    6c78:	bne.w	6f0e <_svfprintf_r+0xbae>
    6c7c:	ldr	r2, [sp, #112]	; 0x70
    6c7e:	ldr	r1, [pc, #208]	; (6d50 <_svfprintf_r+0x9f0>)
    6c80:	str.w	r1, [r9]
    6c84:	adds	r2, #1
    6c86:	adds	r3, #1
    6c88:	movs	r1, #1
    6c8a:	cmp	r2, #7
    6c8c:	str	r3, [sp, #116]	; 0x74
    6c8e:	str	r2, [sp, #112]	; 0x70
    6c90:	str.w	r1, [r9, #4]
    6c94:	bgt.w	73bc <_svfprintf_r+0x105c>
    6c98:	add.w	r9, r9, #8
    6c9c:	ldr	r2, [sp, #84]	; 0x54
    6c9e:	ldr	r1, [sp, #52]	; 0x34
    6ca0:	cmp	r2, r1
    6ca2:	blt.n	6cac <_svfprintf_r+0x94c>
    6ca4:	tst.w	fp, #1
    6ca8:	beq.w	68c2 <_svfprintf_r+0x562>
    6cac:	ldr	r2, [sp, #112]	; 0x70
    6cae:	ldr	r0, [sp, #60]	; 0x3c
    6cb0:	ldr	r1, [sp, #64]	; 0x40
    6cb2:	str.w	r1, [r9]
    6cb6:	adds	r2, #1
    6cb8:	add	r3, r0
    6cba:	cmp	r2, #7
    6cbc:	str	r3, [sp, #116]	; 0x74
    6cbe:	str.w	r0, [r9, #4]
    6cc2:	str	r2, [sp, #112]	; 0x70
    6cc4:	bgt.w	7474 <_svfprintf_r+0x1114>
    6cc8:	add.w	r9, r9, #8
    6ccc:	ldr	r2, [sp, #52]	; 0x34
    6cce:	subs	r4, r2, #1
    6cd0:	cmp	r4, #0
    6cd2:	ble.w	68c2 <_svfprintf_r+0x562>
    6cd6:	cmp	r4, #16
    6cd8:	ldr	r2, [sp, #112]	; 0x70
    6cda:	ldr	r7, [pc, #120]	; (6d54 <_svfprintf_r+0x9f4>)
    6cdc:	ble.w	7098 <_svfprintf_r+0xd38>
    6ce0:	movs	r5, #16
    6ce2:	ldr	r6, [sp, #20]
    6ce4:	ldr.w	r8, [sp, #12]
    6ce8:	b.n	6cf6 <_svfprintf_r+0x996>
    6cea:	add.w	r9, r9, #8
    6cee:	subs	r4, #16
    6cf0:	cmp	r4, #16
    6cf2:	ble.w	7098 <_svfprintf_r+0xd38>
    6cf6:	adds	r2, #1
    6cf8:	adds	r3, #16
    6cfa:	cmp	r2, #7
    6cfc:	str	r3, [sp, #116]	; 0x74
    6cfe:	str	r2, [sp, #112]	; 0x70
    6d00:	str.w	r7, [r9]
    6d04:	str.w	r5, [r9, #4]
    6d08:	ble.n	6cea <_svfprintf_r+0x98a>
    6d0a:	add	r2, sp, #108	; 0x6c
    6d0c:	mov	r1, r8
    6d0e:	mov	r0, r6
    6d10:	bl	9094 <__ssprint_r>
    6d14:	cmp	r0, #0
    6d16:	bne.w	654c <_svfprintf_r+0x1ec>
    6d1a:	ldr	r3, [sp, #116]	; 0x74
    6d1c:	ldr	r2, [sp, #112]	; 0x70
    6d1e:	add.w	r9, sp, #160	; 0xa0
    6d22:	b.n	6cee <_svfprintf_r+0x98e>
    6d24:	ldr	r2, [sp, #28]
    6d26:	ldr	r1, [sp, #16]
    6d28:	subs	r4, r2, r1
    6d2a:	cmp	r4, #0
    6d2c:	ble.w	6828 <_svfprintf_r+0x4c8>
    6d30:	cmp	r4, #16
    6d32:	ldr	r2, [sp, #112]	; 0x70
    6d34:	ldr	r7, [pc, #28]	; (6d54 <_svfprintf_r+0x9f4>)
    6d36:	ble.n	6d96 <_svfprintf_r+0xa36>
    6d38:	mov	r1, r9
    6d3a:	movs	r5, #16
    6d3c:	mov	r9, r8
    6d3e:	mov	r0, r3
    6d40:	mov	r8, r6
    6d42:	ldr	r6, [sp, #20]
    6d44:	b.n	6d62 <_svfprintf_r+0xa02>
    6d46:	nop
    6d48:	.word	0x200007ec
    6d4c:	.word	0x20000800
    6d50:	.word	0x2000081c
    6d54:	.word	0x200007cc
    6d58:	subs	r4, #16
    6d5a:	cmp	r4, #16
    6d5c:	add.w	r1, r1, #8
    6d60:	ble.n	6d8e <_svfprintf_r+0xa2e>
    6d62:	adds	r2, #1
    6d64:	adds	r0, #16
    6d66:	cmp	r2, #7
    6d68:	str	r0, [sp, #116]	; 0x74
    6d6a:	str	r2, [sp, #112]	; 0x70
    6d6c:	str	r7, [r1, #0]
    6d6e:	str	r5, [r1, #4]
    6d70:	ble.n	6d58 <_svfprintf_r+0x9f8>
    6d72:	add	r2, sp, #108	; 0x6c
    6d74:	ldr	r1, [sp, #12]
    6d76:	mov	r0, r6
    6d78:	bl	9094 <__ssprint_r>
    6d7c:	cmp	r0, #0
    6d7e:	bne.w	654c <_svfprintf_r+0x1ec>
    6d82:	subs	r4, #16
    6d84:	cmp	r4, #16
    6d86:	ldr	r0, [sp, #116]	; 0x74
    6d88:	ldr	r2, [sp, #112]	; 0x70
    6d8a:	add	r1, sp, #160	; 0xa0
    6d8c:	bgt.n	6d62 <_svfprintf_r+0xa02>
    6d8e:	mov	r6, r8
    6d90:	mov	r3, r0
    6d92:	mov	r8, r9
    6d94:	mov	r9, r1
    6d96:	adds	r2, #1
    6d98:	add	r3, r4
    6d9a:	cmp	r2, #7
    6d9c:	str	r3, [sp, #116]	; 0x74
    6d9e:	str	r2, [sp, #112]	; 0x70
    6da0:	str.w	r7, [r9]
    6da4:	str.w	r4, [r9, #4]
    6da8:	bgt.w	7238 <_svfprintf_r+0xed8>
    6dac:	add.w	r9, r9, #8
    6db0:	b.n	6828 <_svfprintf_r+0x4c8>
    6db2:	ldr	r2, [sp, #52]	; 0x34
    6db4:	str.w	r6, [r9]
    6db8:	cmp	r2, #1
    6dba:	ldr	r2, [sp, #112]	; 0x70
    6dbc:	add.w	r3, r3, #1
    6dc0:	add.w	r2, r2, #1
    6dc4:	mov.w	r1, #1
    6dc8:	str	r3, [sp, #116]	; 0x74
    6dca:	str	r2, [sp, #112]	; 0x70
    6dcc:	str.w	r1, [r9, #4]
    6dd0:	ble.w	71f4 <_svfprintf_r+0xe94>
    6dd4:	cmp	r2, #7
    6dd6:	bgt.w	7204 <_svfprintf_r+0xea4>
    6dda:	add.w	r9, r9, #8
    6dde:	ldr	r0, [sp, #60]	; 0x3c
    6de0:	ldr	r1, [sp, #64]	; 0x40
    6de2:	str.w	r1, [r9]
    6de6:	adds	r2, #1
    6de8:	add	r3, r0
    6dea:	cmp	r2, #7
    6dec:	str	r3, [sp, #116]	; 0x74
    6dee:	str	r2, [sp, #112]	; 0x70
    6df0:	str.w	r0, [r9, #4]
    6df4:	bgt.w	721e <_svfprintf_r+0xebe>
    6df8:	add.w	r9, r9, #8
    6dfc:	vcmp.f64	d8, #0.0
    6e00:	vmrs	APSR_nzcv, fpscr
    6e04:	ldr	r1, [sp, #52]	; 0x34
    6e06:	beq.w	6ff4 <_svfprintf_r+0xc94>
    6e0a:	subs	r1, #1
    6e0c:	adds	r2, #1
    6e0e:	adds	r6, #1
    6e10:	add	r3, r1
    6e12:	cmp	r2, #7
    6e14:	str.w	r6, [r9]
    6e18:	str	r2, [sp, #112]	; 0x70
    6e1a:	str	r3, [sp, #116]	; 0x74
    6e1c:	str.w	r1, [r9, #4]
    6e20:	bgt.w	705e <_svfprintf_r+0xcfe>
    6e24:	add.w	r9, r9, #8
    6e28:	ldr	r0, [sp, #68]	; 0x44
    6e2a:	str.w	r0, [r9, #4]
    6e2e:	adds	r2, #1
    6e30:	add	r3, r0
    6e32:	add	r1, sp, #92	; 0x5c
    6e34:	cmp	r2, #7
    6e36:	str	r3, [sp, #116]	; 0x74
    6e38:	str	r2, [sp, #112]	; 0x70
    6e3a:	str.w	r1, [r9]
    6e3e:	ble.w	68be <_svfprintf_r+0x55e>
    6e42:	add	r2, sp, #108	; 0x6c
    6e44:	ldr	r1, [sp, #12]
    6e46:	ldr	r0, [sp, #20]
    6e48:	bl	9094 <__ssprint_r>
    6e4c:	cmp	r0, #0
    6e4e:	bne.w	654c <_svfprintf_r+0x1ec>
    6e52:	ldr	r3, [sp, #116]	; 0x74
    6e54:	add.w	r9, sp, #160	; 0xa0
    6e58:	b.n	68c2 <_svfprintf_r+0x562>
    6e5a:	add	r2, sp, #108	; 0x6c
    6e5c:	ldr	r1, [sp, #12]
    6e5e:	ldr	r0, [sp, #20]
    6e60:	bl	9094 <__ssprint_r>
    6e64:	cmp	r0, #0
    6e66:	beq.w	695c <_svfprintf_r+0x5fc>
    6e6a:	b.w	654c <_svfprintf_r+0x1ec>
    6e6e:	ldr	r1, [sp, #36]	; 0x24
    6e70:	cmp.w	r8, #0
    6e74:	ldr	r4, [r1, #0]
    6e76:	strb.w	r3, [sp, #79]	; 0x4f
    6e7a:	add.w	r7, r1, #4
    6e7e:	mov.w	r5, #0
    6e82:	blt.w	7568 <_svfprintf_r+0x1208>
    6e86:	orrs.w	r2, r4, r5
    6e8a:	str	r7, [sp, #36]	; 0x24
    6e8c:	bic.w	fp, fp, #128	; 0x80
    6e90:	mov	r7, r3
    6e92:	bne.w	66aa <_svfprintf_r+0x34a>
    6e96:	cmp.w	r8, #0
    6e9a:	beq.w	6c04 <_svfprintf_r+0x8a4>
    6e9e:	movs	r4, #0
    6ea0:	b.n	6a10 <_svfprintf_r+0x6b0>
    6ea2:	add	r2, sp, #108	; 0x6c
    6ea4:	ldr	r1, [sp, #12]
    6ea6:	ldr	r0, [sp, #20]
    6ea8:	bl	9094 <__ssprint_r>
    6eac:	cmp	r0, #0
    6eae:	bne.w	654c <_svfprintf_r+0x1ec>
    6eb2:	ldr	r3, [sp, #116]	; 0x74
    6eb4:	add.w	r9, sp, #160	; 0xa0
    6eb8:	b.n	689c <_svfprintf_r+0x53c>
    6eba:	add	r2, sp, #108	; 0x6c
    6ebc:	ldr	r1, [sp, #12]
    6ebe:	ldr	r0, [sp, #20]
    6ec0:	bl	9094 <__ssprint_r>
    6ec4:	cmp	r0, #0
    6ec6:	bne.w	654c <_svfprintf_r+0x1ec>
    6eca:	ldr	r3, [sp, #116]	; 0x74
    6ecc:	add.w	r9, sp, #160	; 0xa0
    6ed0:	b.n	6800 <_svfprintf_r+0x4a0>
    6ed2:	add	r2, sp, #108	; 0x6c
    6ed4:	ldr	r1, [sp, #12]
    6ed6:	ldr	r0, [sp, #20]
    6ed8:	bl	9094 <__ssprint_r>
    6edc:	cmp	r0, #0
    6ede:	bne.w	654c <_svfprintf_r+0x1ec>
    6ee2:	ldr	r3, [sp, #116]	; 0x74
    6ee4:	add.w	r9, sp, #160	; 0xa0
    6ee8:	b.n	6820 <_svfprintf_r+0x4c0>
    6eea:	cmp.w	r8, #0
    6eee:	strb.w	r7, [sp, #79]	; 0x4f
    6ef2:	blt.w	73d4 <_svfprintf_r+0x1074>
    6ef6:	orrs.w	r3, r4, r5
    6efa:	bic.w	fp, fp, #128	; 0x80
    6efe:	bne.w	6a8a <_svfprintf_r+0x72a>
    6f02:	cmp.w	r8, #0
    6f06:	beq.w	6c02 <_svfprintf_r+0x8a2>
    6f0a:	movs	r7, #0
    6f0c:	b.n	6c5e <_svfprintf_r+0x8fe>
    6f0e:	ldr	r4, [sp, #84]	; 0x54
    6f10:	cmp	r4, #0
    6f12:	ble.w	73d8 <_svfprintf_r+0x1078>
    6f16:	ldr	r2, [sp, #56]	; 0x38
    6f18:	ldr	r1, [sp, #52]	; 0x34
    6f1a:	cmp	r2, r1
    6f1c:	it	ge
    6f1e:	movge	r2, r1
    6f20:	cmp	r2, #0
    6f22:	mov	r4, r2
    6f24:	ble.n	6f42 <_svfprintf_r+0xbe2>
    6f26:	ldr	r2, [sp, #112]	; 0x70
    6f28:	str.w	r6, [r9]
    6f2c:	adds	r2, #1
    6f2e:	add	r3, r4
    6f30:	cmp	r2, #7
    6f32:	str	r3, [sp, #116]	; 0x74
    6f34:	str.w	r4, [r9, #4]
    6f38:	str	r2, [sp, #112]	; 0x70
    6f3a:	bgt.w	7622 <_svfprintf_r+0x12c2>
    6f3e:	add.w	r9, r9, #8
    6f42:	ldr	r2, [sp, #56]	; 0x38
    6f44:	cmp	r4, #0
    6f46:	it	ge
    6f48:	subge	r2, r2, r4
    6f4a:	cmp	r2, #0
    6f4c:	mov	r4, r2
    6f4e:	ble.w	7134 <_svfprintf_r+0xdd4>
    6f52:	cmp	r4, #16
    6f54:	ldr	r2, [sp, #112]	; 0x70
    6f56:	ldr	r7, [pc, #772]	; (725c <_svfprintf_r+0xefc>)
    6f58:	ble.w	738e <_svfprintf_r+0x102e>
    6f5c:	mov	r1, r9
    6f5e:	movs	r5, #16
    6f60:	mov	r9, r6
    6f62:	ldr.w	r8, [sp, #20]
    6f66:	ldr	r6, [sp, #12]
    6f68:	b.n	6f74 <_svfprintf_r+0xc14>
    6f6a:	adds	r1, #8
    6f6c:	subs	r4, #16
    6f6e:	cmp	r4, #16
    6f70:	ble.w	738a <_svfprintf_r+0x102a>
    6f74:	adds	r2, #1
    6f76:	adds	r3, #16
    6f78:	cmp	r2, #7
    6f7a:	str	r3, [sp, #116]	; 0x74
    6f7c:	str	r2, [sp, #112]	; 0x70
    6f7e:	str	r7, [r1, #0]
    6f80:	str	r5, [r1, #4]
    6f82:	ble.n	6f6a <_svfprintf_r+0xc0a>
    6f84:	add	r2, sp, #108	; 0x6c
    6f86:	mov	r1, r6
    6f88:	mov	r0, r8
    6f8a:	bl	9094 <__ssprint_r>
    6f8e:	cmp	r0, #0
    6f90:	bne.w	654c <_svfprintf_r+0x1ec>
    6f94:	ldr	r3, [sp, #116]	; 0x74
    6f96:	ldr	r2, [sp, #112]	; 0x70
    6f98:	add	r1, sp, #160	; 0xa0
    6f9a:	b.n	6f6c <_svfprintf_r+0xc0c>
    6f9c:	add	r2, sp, #108	; 0x6c
    6f9e:	ldr	r1, [sp, #12]
    6fa0:	ldr	r0, [sp, #20]
    6fa2:	bl	9094 <__ssprint_r>
    6fa6:	cmp	r0, #0
    6fa8:	bne.w	654c <_svfprintf_r+0x1ec>
    6fac:	ldrb.w	r7, [sp, #79]	; 0x4f
    6fb0:	ldr	r3, [sp, #116]	; 0x74
    6fb2:	add.w	r9, sp, #160	; 0xa0
    6fb6:	b.n	67e0 <_svfprintf_r+0x480>
    6fb8:	ands.w	r2, fp, #16
    6fbc:	bne.w	6e6e <_svfprintf_r+0xb0e>
    6fc0:	ands.w	r3, fp, #64	; 0x40
    6fc4:	beq.w	6e6e <_svfprintf_r+0xb0e>
    6fc8:	ldr	r1, [sp, #36]	; 0x24
    6fca:	strb.w	r2, [sp, #79]	; 0x4f
    6fce:	mov	r3, r1
    6fd0:	cmp.w	r8, #0
    6fd4:	add.w	r3, r3, #4
    6fd8:	ldrh	r4, [r1, #0]
    6fda:	mov.w	r5, #0
    6fde:	blt.w	750a <_svfprintf_r+0x11aa>
    6fe2:	orrs.w	r1, r4, r5
    6fe6:	bic.w	fp, fp, #128	; 0x80
    6fea:	str	r3, [sp, #36]	; 0x24
    6fec:	mov	r7, r2
    6fee:	bne.w	66aa <_svfprintf_r+0x34a>
    6ff2:	b.n	6e96 <_svfprintf_r+0xb36>
    6ff4:	subs	r4, r1, #1
    6ff6:	cmp	r4, #0
    6ff8:	ble.w	6e28 <_svfprintf_r+0xac8>
    6ffc:	cmp	r4, #16
    6ffe:	ldr	r7, [pc, #604]	; (725c <_svfprintf_r+0xefc>)
    7000:	ble.n	7048 <_svfprintf_r+0xce8>
    7002:	movs	r5, #16
    7004:	ldr	r6, [sp, #20]
    7006:	ldr.w	r8, [sp, #12]
    700a:	b.n	7016 <_svfprintf_r+0xcb6>
    700c:	subs	r4, #16
    700e:	cmp	r4, #16
    7010:	add.w	r9, r9, #8
    7014:	ble.n	7048 <_svfprintf_r+0xce8>
    7016:	adds	r2, #1
    7018:	adds	r3, #16
    701a:	cmp	r2, #7
    701c:	str	r3, [sp, #116]	; 0x74
    701e:	str	r2, [sp, #112]	; 0x70
    7020:	str.w	r7, [r9]
    7024:	str.w	r5, [r9, #4]
    7028:	ble.n	700c <_svfprintf_r+0xcac>
    702a:	add	r2, sp, #108	; 0x6c
    702c:	mov	r1, r8
    702e:	mov	r0, r6
    7030:	bl	9094 <__ssprint_r>
    7034:	cmp	r0, #0
    7036:	bne.w	654c <_svfprintf_r+0x1ec>
    703a:	subs	r4, #16
    703c:	cmp	r4, #16
    703e:	ldr	r3, [sp, #116]	; 0x74
    7040:	ldr	r2, [sp, #112]	; 0x70
    7042:	add.w	r9, sp, #160	; 0xa0
    7046:	bgt.n	7016 <_svfprintf_r+0xcb6>
    7048:	adds	r2, #1
    704a:	add	r3, r4
    704c:	cmp	r2, #7
    704e:	str	r3, [sp, #116]	; 0x74
    7050:	str	r2, [sp, #112]	; 0x70
    7052:	str.w	r7, [r9]
    7056:	str.w	r4, [r9, #4]
    705a:	ble.w	6e24 <_svfprintf_r+0xac4>
    705e:	add	r2, sp, #108	; 0x6c
    7060:	ldr	r1, [sp, #12]
    7062:	ldr	r0, [sp, #20]
    7064:	bl	9094 <__ssprint_r>
    7068:	cmp	r0, #0
    706a:	bne.w	654c <_svfprintf_r+0x1ec>
    706e:	ldr	r3, [sp, #116]	; 0x74
    7070:	ldr	r2, [sp, #112]	; 0x70
    7072:	add.w	r9, sp, #160	; 0xa0
    7076:	b.n	6e28 <_svfprintf_r+0xac8>
    7078:	tst.w	fp, #16
    707c:	bne.n	70e6 <_svfprintf_r+0xd86>
    707e:	tst.w	fp, #64	; 0x40
    7082:	beq.n	70e6 <_svfprintf_r+0xd86>
    7084:	ldr	r1, [sp, #36]	; 0x24
    7086:	ldrsh.w	r4, [r1]
    708a:	adds	r1, #4
    708c:	asrs	r5, r4, #31
    708e:	mov	r2, r4
    7090:	mov	r3, r5
    7092:	str	r1, [sp, #36]	; 0x24
    7094:	b.w	6688 <_svfprintf_r+0x328>
    7098:	adds	r2, #1
    709a:	add	r3, r4
    709c:	cmp	r2, #7
    709e:	str	r3, [sp, #116]	; 0x74
    70a0:	str	r2, [sp, #112]	; 0x70
    70a2:	str.w	r7, [r9]
    70a6:	str.w	r4, [r9, #4]
    70aa:	ble.w	68be <_svfprintf_r+0x55e>
    70ae:	b.n	6e42 <_svfprintf_r+0xae2>
    70b0:	ldr	r1, [sp, #36]	; 0x24
    70b2:	cmp.w	r8, #0
    70b6:	ldr	r4, [r1, #0]
    70b8:	strb.w	r3, [sp, #79]	; 0x4f
    70bc:	add.w	r7, r1, #4
    70c0:	mov.w	r5, #0
    70c4:	blt.w	7252 <_svfprintf_r+0xef2>
    70c8:	orrs.w	r2, r4, r5
    70cc:	bic.w	fp, fp, #128	; 0x80
    70d0:	str	r7, [sp, #36]	; 0x24
    70d2:	beq.w	6c3a <_svfprintf_r+0x8da>
    70d6:	mov	r7, r3
    70d8:	b.w	65a4 <_svfprintf_r+0x244>
    70dc:	ldr	r4, [r3, #0]
    70de:	adds	r3, #4
    70e0:	str	r3, [sp, #36]	; 0x24
    70e2:	movs	r5, #0
    70e4:	b.n	6a54 <_svfprintf_r+0x6f4>
    70e6:	ldr	r2, [sp, #36]	; 0x24
    70e8:	ldr	r4, [r2, #0]
    70ea:	mov	r3, r2
    70ec:	adds	r3, #4
    70ee:	asrs	r5, r4, #31
    70f0:	mov	r2, r4
    70f2:	str	r3, [sp, #36]	; 0x24
    70f4:	cmp	r2, #0
    70f6:	mov	r3, r5
    70f8:	sbcs.w	r3, r3, #0
    70fc:	bge.w	6692 <_svfprintf_r+0x332>
    7100:	negs	r4, r4
    7102:	mov.w	r7, #45	; 0x2d
    7106:	sbc.w	r5, r5, r5, lsl #1
    710a:	cmp.w	r8, #0
    710e:	strb.w	r7, [sp, #79]	; 0x4f
    7112:	blt.w	66aa <_svfprintf_r+0x34a>
    7116:	bic.w	fp, fp, #128	; 0x80
    711a:	b.w	66aa <_svfprintf_r+0x34a>
    711e:	add	r2, sp, #108	; 0x6c
    7120:	ldr	r1, [sp, #12]
    7122:	ldr	r0, [sp, #20]
    7124:	bl	9094 <__ssprint_r>
    7128:	cmp	r0, #0
    712a:	bne.w	654c <_svfprintf_r+0x1ec>
    712e:	ldr	r3, [sp, #116]	; 0x74
    7130:	add.w	r9, sp, #160	; 0xa0
    7134:	ldr	r1, [sp, #56]	; 0x38
    7136:	ldr	r2, [sp, #84]	; 0x54
    7138:	add	r1, r6
    713a:	mov	r5, r1
    713c:	ldr	r1, [sp, #52]	; 0x34
    713e:	cmp	r2, r1
    7140:	blt.n	71d2 <_svfprintf_r+0xe72>
    7142:	tst.w	fp, #1
    7146:	bne.n	71d2 <_svfprintf_r+0xe72>
    7148:	ldr	r0, [sp, #52]	; 0x34
    714a:	add	r6, r0
    714c:	subs	r4, r6, r5
    714e:	subs	r2, r0, r2
    7150:	cmp	r4, r2
    7152:	it	ge
    7154:	movge	r4, r2
    7156:	cmp	r4, #0
    7158:	mov	r6, r4
    715a:	ble.n	7178 <_svfprintf_r+0xe18>
    715c:	ldr	r1, [sp, #112]	; 0x70
    715e:	str.w	r5, [r9]
    7162:	adds	r1, #1
    7164:	add	r3, r4
    7166:	cmp	r1, #7
    7168:	str	r3, [sp, #116]	; 0x74
    716a:	str.w	r4, [r9, #4]
    716e:	str	r1, [sp, #112]	; 0x70
    7170:	bgt.w	7674 <_svfprintf_r+0x1314>
    7174:	add.w	r9, r9, #8
    7178:	cmp	r6, #0
    717a:	ite	ge
    717c:	subge	r4, r2, r6
    717e:	movlt	r4, r2
    7180:	cmp	r4, #0
    7182:	ble.w	68c2 <_svfprintf_r+0x562>
    7186:	cmp	r4, #16
    7188:	ldr	r2, [sp, #112]	; 0x70
    718a:	ldr	r7, [pc, #208]	; (725c <_svfprintf_r+0xefc>)
    718c:	ble.n	7098 <_svfprintf_r+0xd38>
    718e:	movs	r5, #16
    7190:	ldr	r6, [sp, #20]
    7192:	ldr.w	r8, [sp, #12]
    7196:	b.n	71a4 <_svfprintf_r+0xe44>
    7198:	add.w	r9, r9, #8
    719c:	subs	r4, #16
    719e:	cmp	r4, #16
    71a0:	ble.w	7098 <_svfprintf_r+0xd38>
    71a4:	adds	r2, #1
    71a6:	adds	r3, #16
    71a8:	cmp	r2, #7
    71aa:	str	r3, [sp, #116]	; 0x74
    71ac:	str	r2, [sp, #112]	; 0x70
    71ae:	str.w	r7, [r9]
    71b2:	str.w	r5, [r9, #4]
    71b6:	ble.n	7198 <_svfprintf_r+0xe38>
    71b8:	add	r2, sp, #108	; 0x6c
    71ba:	mov	r1, r8
    71bc:	mov	r0, r6
    71be:	bl	9094 <__ssprint_r>
    71c2:	cmp	r0, #0
    71c4:	bne.w	654c <_svfprintf_r+0x1ec>
    71c8:	ldr	r3, [sp, #116]	; 0x74
    71ca:	ldr	r2, [sp, #112]	; 0x70
    71cc:	add.w	r9, sp, #160	; 0xa0
    71d0:	b.n	719c <_svfprintf_r+0xe3c>
    71d2:	ldr	r1, [sp, #112]	; 0x70
    71d4:	ldr	r4, [sp, #60]	; 0x3c
    71d6:	ldr	r0, [sp, #64]	; 0x40
    71d8:	str.w	r0, [r9]
    71dc:	adds	r1, #1
    71de:	add	r3, r4
    71e0:	cmp	r1, #7
    71e2:	str	r3, [sp, #116]	; 0x74
    71e4:	str.w	r4, [r9, #4]
    71e8:	str	r1, [sp, #112]	; 0x70
    71ea:	bgt.w	763a <_svfprintf_r+0x12da>
    71ee:	add.w	r9, r9, #8
    71f2:	b.n	7148 <_svfprintf_r+0xde8>
    71f4:	tst.w	fp, #1
    71f8:	bne.w	6dd4 <_svfprintf_r+0xa74>
    71fc:	cmp	r2, #7
    71fe:	ble.w	6e24 <_svfprintf_r+0xac4>
    7202:	b.n	705e <_svfprintf_r+0xcfe>
    7204:	add	r2, sp, #108	; 0x6c
    7206:	ldr	r1, [sp, #12]
    7208:	ldr	r0, [sp, #20]
    720a:	bl	9094 <__ssprint_r>
    720e:	cmp	r0, #0
    7210:	bne.w	654c <_svfprintf_r+0x1ec>
    7214:	ldr	r3, [sp, #116]	; 0x74
    7216:	ldr	r2, [sp, #112]	; 0x70
    7218:	add.w	r9, sp, #160	; 0xa0
    721c:	b.n	6dde <_svfprintf_r+0xa7e>
    721e:	add	r2, sp, #108	; 0x6c
    7220:	ldr	r1, [sp, #12]
    7222:	ldr	r0, [sp, #20]
    7224:	bl	9094 <__ssprint_r>
    7228:	cmp	r0, #0
    722a:	bne.w	654c <_svfprintf_r+0x1ec>
    722e:	ldr	r3, [sp, #116]	; 0x74
    7230:	ldr	r2, [sp, #112]	; 0x70
    7232:	add.w	r9, sp, #160	; 0xa0
    7236:	b.n	6dfc <_svfprintf_r+0xa9c>
    7238:	add	r2, sp, #108	; 0x6c
    723a:	ldr	r1, [sp, #12]
    723c:	ldr	r0, [sp, #20]
    723e:	bl	9094 <__ssprint_r>
    7242:	cmp	r0, #0
    7244:	bne.w	654c <_svfprintf_r+0x1ec>
    7248:	ldr	r3, [sp, #116]	; 0x74
    724a:	add.w	r9, sp, #160	; 0xa0
    724e:	b.w	6828 <_svfprintf_r+0x4c8>
    7252:	str	r7, [sp, #36]	; 0x24
    7254:	movs	r7, #0
    7256:	b.w	65a4 <_svfprintf_r+0x244>
    725a:	nop
    725c:	.word	0x200007cc
    7260:	tst.w	fp, #16
    7264:	bne.n	727e <_svfprintf_r+0xf1e>
    7266:	tst.w	fp, #64	; 0x40
    726a:	beq.n	727e <_svfprintf_r+0xf1e>
    726c:	ldr	r2, [sp, #36]	; 0x24
    726e:	ldr	r3, [r2, #0]
    7270:	adds	r2, #4
    7272:	str	r2, [sp, #36]	; 0x24
    7274:	ldrh.w	r2, [sp, #24]
    7278:	strh	r2, [r3, #0]
    727a:	b.w	63ac <_svfprintf_r+0x4c>
    727e:	ldr	r2, [sp, #36]	; 0x24
    7280:	ldr	r3, [r2, #0]
    7282:	adds	r2, #4
    7284:	str	r2, [sp, #36]	; 0x24
    7286:	ldr	r2, [sp, #24]
    7288:	str	r2, [r3, #0]
    728a:	b.w	63ac <_svfprintf_r+0x4c>
    728e:	vcmp.f64	d8, d8
    7292:	vmrs	APSR_nzcv, fpscr
    7296:	bvs.w	77d6 <_svfprintf_r+0x1476>
    729a:	ldr	r3, [sp, #48]	; 0x30
    729c:	cmp.w	r8, #4294967295
    72a0:	bic.w	r5, r3, #32
    72a4:	beq.w	76f2 <_svfprintf_r+0x1392>
    72a8:	cmp	r5, #71	; 0x47
    72aa:	beq.w	74fa <_svfprintf_r+0x119a>
    72ae:	orr.w	r3, fp, #256	; 0x100
    72b2:	str	r3, [sp, #40]	; 0x28
    72b4:	vmov	r3, s17
    72b8:	cmp	r3, #0
    72ba:	blt.w	76f8 <_svfprintf_r+0x1398>
    72be:	vmov.f64	d10, d8
    72c2:	movs	r7, #0
    72c4:	ldr	r3, [sp, #48]	; 0x30
    72c6:	cmp	r3, #102	; 0x66
    72c8:	beq.w	76d0 <_svfprintf_r+0x1370>
    72cc:	cmp	r3, #70	; 0x46
    72ce:	beq.w	74aa <_svfprintf_r+0x114a>
    72d2:	vmov.f64	d0, d10
    72d6:	cmp	r5, #69	; 0x45
    72d8:	ite	eq
    72da:	addeq.w	r4, r8, #1
    72de:	movne	r4, r8
    72e0:	add	r2, sp, #100	; 0x64
    72e2:	add	r3, sp, #88	; 0x58
    72e4:	str	r2, [sp, #4]
    72e6:	str	r3, [sp, #0]
    72e8:	mov	r2, r4
    72ea:	add	r3, sp, #84	; 0x54
    72ec:	movs	r1, #2
    72ee:	ldr	r0, [sp, #20]
    72f0:	bl	7ab8 <_dtoa_r>
    72f4:	ldr	r3, [sp, #48]	; 0x30
    72f6:	cmp	r3, #103	; 0x67
    72f8:	mov	r6, r0
    72fa:	bne.w	771a <_svfprintf_r+0x13ba>
    72fe:	tst.w	fp, #1
    7302:	beq.w	77d2 <_svfprintf_r+0x1472>
    7306:	adds	r1, r6, r4
    7308:	vcmp.f64	d10, #0.0
    730c:	vmrs	APSR_nzcv, fpscr
    7310:	beq.w	761e <_svfprintf_r+0x12be>
    7314:	ldr	r3, [sp, #100]	; 0x64
    7316:	cmp	r1, r3
    7318:	bls.n	7328 <_svfprintf_r+0xfc8>
    731a:	movs	r0, #48	; 0x30
    731c:	adds	r2, r3, #1
    731e:	str	r2, [sp, #100]	; 0x64
    7320:	strb	r0, [r3, #0]
    7322:	ldr	r3, [sp, #100]	; 0x64
    7324:	cmp	r1, r3
    7326:	bhi.n	731c <_svfprintf_r+0xfbc>
    7328:	subs	r3, r3, r6
    732a:	cmp	r5, #71	; 0x47
    732c:	str	r3, [sp, #52]	; 0x34
    732e:	beq.w	7570 <_svfprintf_r+0x1210>
    7332:	ldr	r3, [sp, #48]	; 0x30
    7334:	cmp	r3, #101	; 0x65
    7336:	ble.w	7738 <_svfprintf_r+0x13d8>
    733a:	ldr	r3, [sp, #48]	; 0x30
    733c:	cmp	r3, #102	; 0x66
    733e:	ldr	r3, [sp, #84]	; 0x54
    7340:	beq.w	773c <_svfprintf_r+0x13dc>
    7344:	str	r3, [sp, #56]	; 0x38
    7346:	ldr	r2, [sp, #56]	; 0x38
    7348:	ldr	r1, [sp, #52]	; 0x34
    734a:	cmp	r2, r1
    734c:	blt.w	7700 <_svfprintf_r+0x13a0>
    7350:	tst.w	fp, #1
    7354:	bne.w	77c0 <_svfprintf_r+0x1460>
    7358:	bic.w	r3, r2, r2, asr #31
    735c:	str	r2, [sp, #32]
    735e:	movs	r2, #103	; 0x67
    7360:	str	r2, [sp, #48]	; 0x30
    7362:	cmp	r7, #0
    7364:	bne.w	7554 <_svfprintf_r+0x11f4>
    7368:	mov	r8, r7
    736a:	str	r3, [sp, #16]
    736c:	ldr.w	fp, [sp, #40]	; 0x28
    7370:	ldrb.w	r7, [sp, #79]	; 0x4f
    7374:	b.w	6744 <_svfprintf_r+0x3e4>
    7378:	bic.w	r7, r7, #7
    737c:	add.w	r3, r7, #8
    7380:	vldr	d8, [r7]
    7384:	str	r3, [sp, #36]	; 0x24
    7386:	b.w	6706 <_svfprintf_r+0x3a6>
    738a:	mov	r6, r9
    738c:	mov	r9, r1
    738e:	adds	r2, #1
    7390:	add	r3, r4
    7392:	cmp	r2, #7
    7394:	str	r3, [sp, #116]	; 0x74
    7396:	str	r2, [sp, #112]	; 0x70
    7398:	str.w	r7, [r9]
    739c:	str.w	r4, [r9, #4]
    73a0:	bgt.w	711e <_svfprintf_r+0xdbe>
    73a4:	add.w	r9, r9, #8
    73a8:	b.n	7134 <_svfprintf_r+0xdd4>
    73aa:	movs	r7, #0
    73ac:	cmp	r8, r7
    73ae:	strb.w	r7, [sp, #79]	; 0x4f
    73b2:	blt.w	6c5e <_svfprintf_r+0x8fe>
    73b6:	bic.w	fp, fp, #128	; 0x80
    73ba:	b.n	6bfa <_svfprintf_r+0x89a>
    73bc:	add	r2, sp, #108	; 0x6c
    73be:	ldr	r1, [sp, #12]
    73c0:	ldr	r0, [sp, #20]
    73c2:	bl	9094 <__ssprint_r>
    73c6:	cmp	r0, #0
    73c8:	bne.w	654c <_svfprintf_r+0x1ec>
    73cc:	ldr	r3, [sp, #116]	; 0x74
    73ce:	add.w	r9, sp, #160	; 0xa0
    73d2:	b.n	6c9c <_svfprintf_r+0x93c>
    73d4:	ldr	r7, [sp, #36]	; 0x24
    73d6:	b.n	6c50 <_svfprintf_r+0x8f0>
    73d8:	ldr	r2, [sp, #112]	; 0x70
    73da:	ldr	r1, [pc, #740]	; (76c0 <_svfprintf_r+0x1360>)
    73dc:	str.w	r1, [r9]
    73e0:	adds	r2, #1
    73e2:	adds	r3, #1
    73e4:	movs	r1, #1
    73e6:	cmp	r2, #7
    73e8:	str	r3, [sp, #116]	; 0x74
    73ea:	str	r2, [sp, #112]	; 0x70
    73ec:	str.w	r1, [r9, #4]
    73f0:	bgt.n	74e0 <_svfprintf_r+0x1180>
    73f2:	add.w	r9, r9, #8
    73f6:	cbnz	r4, 7404 <_svfprintf_r+0x10a4>
    73f8:	ldr	r2, [sp, #52]	; 0x34
    73fa:	cbnz	r2, 7404 <_svfprintf_r+0x10a4>
    73fc:	tst.w	fp, #1
    7400:	beq.w	68c2 <_svfprintf_r+0x562>
    7404:	ldr	r2, [sp, #112]	; 0x70
    7406:	ldr	r0, [sp, #60]	; 0x3c
    7408:	ldr	r1, [sp, #64]	; 0x40
    740a:	str.w	r1, [r9]
    740e:	adds	r2, #1
    7410:	add	r3, r0
    7412:	cmp	r2, #7
    7414:	str	r3, [sp, #116]	; 0x74
    7416:	str.w	r0, [r9, #4]
    741a:	str	r2, [sp, #112]	; 0x70
    741c:	bgt.w	778c <_svfprintf_r+0x142c>
    7420:	add.w	r9, r9, #8
    7424:	negs	r4, r4
    7426:	cmp	r4, #0
    7428:	ble.w	753a <_svfprintf_r+0x11da>
    742c:	cmp	r4, #16
    742e:	ldr	r7, [pc, #660]	; (76c4 <_svfprintf_r+0x1364>)
    7430:	ble.w	7658 <_svfprintf_r+0x12f8>
    7434:	mov	r1, r9
    7436:	movs	r5, #16
    7438:	mov	r9, r6
    743a:	ldr.w	r8, [sp, #20]
    743e:	ldr	r6, [sp, #12]
    7440:	b.n	744c <_svfprintf_r+0x10ec>
    7442:	adds	r1, #8
    7444:	subs	r4, #16
    7446:	cmp	r4, #16
    7448:	ble.w	7654 <_svfprintf_r+0x12f4>
    744c:	adds	r2, #1
    744e:	adds	r3, #16
    7450:	cmp	r2, #7
    7452:	str	r3, [sp, #116]	; 0x74
    7454:	str	r2, [sp, #112]	; 0x70
    7456:	str	r7, [r1, #0]
    7458:	str	r5, [r1, #4]
    745a:	ble.n	7442 <_svfprintf_r+0x10e2>
    745c:	add	r2, sp, #108	; 0x6c
    745e:	mov	r1, r6
    7460:	mov	r0, r8
    7462:	bl	9094 <__ssprint_r>
    7466:	cmp	r0, #0
    7468:	bne.w	654c <_svfprintf_r+0x1ec>
    746c:	ldr	r3, [sp, #116]	; 0x74
    746e:	ldr	r2, [sp, #112]	; 0x70
    7470:	add	r1, sp, #160	; 0xa0
    7472:	b.n	7444 <_svfprintf_r+0x10e4>
    7474:	add	r2, sp, #108	; 0x6c
    7476:	ldr	r1, [sp, #12]
    7478:	ldr	r0, [sp, #20]
    747a:	bl	9094 <__ssprint_r>
    747e:	cmp	r0, #0
    7480:	bne.w	654c <_svfprintf_r+0x1ec>
    7484:	ldr	r3, [sp, #116]	; 0x74
    7486:	add.w	r9, sp, #160	; 0xa0
    748a:	b.n	6ccc <_svfprintf_r+0x96c>
    748c:	movs	r1, #64	; 0x40
    748e:	ldr	r0, [sp, #20]
    7490:	bl	56fc <_malloc_r>
    7494:	ldr	r2, [sp, #12]
    7496:	str	r0, [r2, #0]
    7498:	str	r0, [r2, #16]
    749a:	cmp	r0, #0
    749c:	beq.w	787a <_svfprintf_r+0x151a>
    74a0:	ldr	r2, [sp, #12]
    74a2:	movs	r3, #64	; 0x40
    74a4:	str	r3, [r2, #20]
    74a6:	b.w	6392 <_svfprintf_r+0x32>
    74aa:	add	r2, sp, #100	; 0x64
    74ac:	add	r3, sp, #88	; 0x58
    74ae:	str	r2, [sp, #4]
    74b0:	str	r3, [sp, #0]
    74b2:	mov	r2, r8
    74b4:	add	r3, sp, #84	; 0x54
    74b6:	movs	r1, #3
    74b8:	vmov.f64	d0, d10
    74bc:	ldr	r0, [sp, #20]
    74be:	bl	7ab8 <_dtoa_r>
    74c2:	mov	r4, r8
    74c4:	mov	r6, r0
    74c6:	ldr	r3, [sp, #48]	; 0x30
    74c8:	cmp	r3, #70	; 0x46
    74ca:	add.w	r1, r6, r4
    74ce:	bne.w	7308 <_svfprintf_r+0xfa8>
    74d2:	ldrb	r3, [r6, #0]
    74d4:	cmp	r3, #48	; 0x30
    74d6:	beq.w	77f4 <_svfprintf_r+0x1494>
    74da:	ldr	r4, [sp, #84]	; 0x54
    74dc:	add	r1, r4
    74de:	b.n	7308 <_svfprintf_r+0xfa8>
    74e0:	add	r2, sp, #108	; 0x6c
    74e2:	ldr	r1, [sp, #12]
    74e4:	ldr	r0, [sp, #20]
    74e6:	bl	9094 <__ssprint_r>
    74ea:	cmp	r0, #0
    74ec:	bne.w	654c <_svfprintf_r+0x1ec>
    74f0:	ldr	r4, [sp, #84]	; 0x54
    74f2:	ldr	r3, [sp, #116]	; 0x74
    74f4:	add.w	r9, sp, #160	; 0xa0
    74f8:	b.n	73f6 <_svfprintf_r+0x1096>
    74fa:	cmp.w	r8, #0
    74fe:	it	eq
    7500:	moveq.w	r8, #1
    7504:	b.n	72ae <_svfprintf_r+0xf4e>
    7506:	str	r3, [sp, #36]	; 0x24
    7508:	b.n	7254 <_svfprintf_r+0xef4>
    750a:	str	r3, [sp, #36]	; 0x24
    750c:	mov	r7, r2
    750e:	b.w	6a08 <_svfprintf_r+0x6a8>
    7512:	mov	r0, r6
    7514:	bl	6280 <strlen>
    7518:	mov	r8, r4
    751a:	mov	r3, r0
    751c:	str	r0, [sp, #32]
    751e:	b.w	6be4 <_svfprintf_r+0x884>
    7522:	add	r2, sp, #108	; 0x6c
    7524:	ldr	r1, [sp, #12]
    7526:	ldr	r0, [sp, #20]
    7528:	bl	9094 <__ssprint_r>
    752c:	cmp	r0, #0
    752e:	bne.w	654c <_svfprintf_r+0x1ec>
    7532:	ldr	r3, [sp, #116]	; 0x74
    7534:	ldr	r2, [sp, #112]	; 0x70
    7536:	add.w	r9, sp, #160	; 0xa0
    753a:	ldr	r0, [sp, #52]	; 0x34
    753c:	str.w	r6, [r9]
    7540:	adds	r2, #1
    7542:	add	r3, r0
    7544:	cmp	r2, #7
    7546:	str	r3, [sp, #116]	; 0x74
    7548:	str	r2, [sp, #112]	; 0x70
    754a:	str.w	r0, [r9, #4]
    754e:	ble.w	68be <_svfprintf_r+0x55e>
    7552:	b.n	6e42 <_svfprintf_r+0xae2>
    7554:	movs	r7, #45	; 0x2d
    7556:	str	r3, [sp, #16]
    7558:	ldr.w	fp, [sp, #40]	; 0x28
    755c:	strb.w	r7, [sp, #79]	; 0x4f
    7560:	mov.w	r8, #0
    7564:	b.w	6746 <_svfprintf_r+0x3e6>
    7568:	str	r7, [sp, #36]	; 0x24
    756a:	mov	r7, r3
    756c:	b.w	6a08 <_svfprintf_r+0x6a8>
    7570:	ldr	r3, [sp, #84]	; 0x54
    7572:	adds	r2, r3, #3
    7574:	blt.n	757c <_svfprintf_r+0x121c>
    7576:	cmp	r8, r3
    7578:	bge.w	7344 <_svfprintf_r+0xfe4>
    757c:	ldr	r2, [sp, #48]	; 0x30
    757e:	subs	r2, #2
    7580:	str	r2, [sp, #48]	; 0x30
    7582:	subs	r3, #1
    7584:	cmp	r3, #0
    7586:	ldrb.w	r2, [sp, #48]	; 0x30
    758a:	str	r3, [sp, #84]	; 0x54
    758c:	it	lt
    758e:	neglt	r3, r3
    7590:	strb.w	r2, [sp, #92]	; 0x5c
    7594:	ite	lt
    7596:	movlt	r2, #45	; 0x2d
    7598:	movge	r2, #43	; 0x2b
    759a:	cmp	r3, #9
    759c:	strb.w	r2, [sp, #93]	; 0x5d
    75a0:	ble.w	77b0 <_svfprintf_r+0x1450>
    75a4:	add.w	r0, sp, #107	; 0x6b
    75a8:	mov	r4, r0
    75aa:	ldr	r2, [pc, #284]	; (76c8 <_svfprintf_r+0x1368>)
    75ac:	smull	r2, r1, r2, r3
    75b0:	asrs	r2, r3, #31
    75b2:	rsb	r2, r2, r1, asr #2
    75b6:	add.w	r1, r2, r2, lsl #2
    75ba:	sub.w	r3, r3, r1, lsl #1
    75be:	add.w	r1, r3, #48	; 0x30
    75c2:	cmp	r2, #9
    75c4:	mov	r3, r2
    75c6:	strb.w	r1, [r4, #-1]!
    75ca:	bgt.n	75aa <_svfprintf_r+0x124a>
    75cc:	mov	r1, r4
    75ce:	adds	r3, #48	; 0x30
    75d0:	uxtb	r2, r3
    75d2:	strb.w	r2, [r1, #-1]!
    75d6:	cmp	r0, r1
    75d8:	bls.w	78a0 <_svfprintf_r+0x1540>
    75dc:	add.w	r1, sp, #94	; 0x5e
    75e0:	mov	r3, r4
    75e2:	b.n	75e8 <_svfprintf_r+0x1288>
    75e4:	ldrb.w	r2, [r3], #1
    75e8:	strb.w	r2, [r1], #1
    75ec:	cmp	r0, r3
    75ee:	bne.n	75e4 <_svfprintf_r+0x1284>
    75f0:	adds	r3, r0, #1
    75f2:	subs	r3, r3, r4
    75f4:	add.w	r2, sp, #94	; 0x5e
    75f8:	add	r3, r2
    75fa:	add	r2, sp, #92	; 0x5c
    75fc:	subs	r3, r3, r2
    75fe:	ldr	r2, [sp, #52]	; 0x34
    7600:	str	r3, [sp, #68]	; 0x44
    7602:	cmp	r2, #1
    7604:	add	r3, r2
    7606:	str	r3, [sp, #32]
    7608:	ble.w	780a <_svfprintf_r+0x14aa>
    760c:	ldr	r3, [sp, #32]
    760e:	ldr	r2, [sp, #60]	; 0x3c
    7610:	add	r3, r2
    7612:	movs	r2, #0
    7614:	str	r3, [sp, #32]
    7616:	str	r2, [sp, #56]	; 0x38
    7618:	bic.w	r3, r3, r3, asr #31
    761c:	b.n	7362 <_svfprintf_r+0x1002>
    761e:	mov	r3, r1
    7620:	b.n	7328 <_svfprintf_r+0xfc8>
    7622:	add	r2, sp, #108	; 0x6c
    7624:	ldr	r1, [sp, #12]
    7626:	ldr	r0, [sp, #20]
    7628:	bl	9094 <__ssprint_r>
    762c:	cmp	r0, #0
    762e:	bne.w	654c <_svfprintf_r+0x1ec>
    7632:	ldr	r3, [sp, #116]	; 0x74
    7634:	add.w	r9, sp, #160	; 0xa0
    7638:	b.n	6f42 <_svfprintf_r+0xbe2>
    763a:	add	r2, sp, #108	; 0x6c
    763c:	ldr	r1, [sp, #12]
    763e:	ldr	r0, [sp, #20]
    7640:	bl	9094 <__ssprint_r>
    7644:	cmp	r0, #0
    7646:	bne.w	654c <_svfprintf_r+0x1ec>
    764a:	ldr	r2, [sp, #84]	; 0x54
    764c:	ldr	r3, [sp, #116]	; 0x74
    764e:	add.w	r9, sp, #160	; 0xa0
    7652:	b.n	7148 <_svfprintf_r+0xde8>
    7654:	mov	r6, r9
    7656:	mov	r9, r1
    7658:	adds	r2, #1
    765a:	add	r3, r4
    765c:	cmp	r2, #7
    765e:	str	r3, [sp, #116]	; 0x74
    7660:	str	r2, [sp, #112]	; 0x70
    7662:	str.w	r7, [r9]
    7666:	str.w	r4, [r9, #4]
    766a:	bgt.w	7522 <_svfprintf_r+0x11c2>
    766e:	add.w	r9, r9, #8
    7672:	b.n	753a <_svfprintf_r+0x11da>
    7674:	add	r2, sp, #108	; 0x6c
    7676:	ldr	r1, [sp, #12]
    7678:	ldr	r0, [sp, #20]
    767a:	bl	9094 <__ssprint_r>
    767e:	cmp	r0, #0
    7680:	bne.w	654c <_svfprintf_r+0x1ec>
    7684:	ldr	r2, [sp, #84]	; 0x54
    7686:	ldr	r1, [sp, #52]	; 0x34
    7688:	ldr	r3, [sp, #116]	; 0x74
    768a:	subs	r2, r1, r2
    768c:	add.w	r9, sp, #160	; 0xa0
    7690:	b.n	7178 <_svfprintf_r+0xe18>
    7692:	cmp	r5, #6
    7694:	mov	r3, r5
    7696:	it	cs
    7698:	movcs	r3, #6
    769a:	str	r3, [sp, #32]
    769c:	bic.w	r3, r3, r3, asr #31
    76a0:	mov	r8, r6
    76a2:	str	r7, [sp, #36]	; 0x24
    76a4:	str	r6, [sp, #56]	; 0x38
    76a6:	mov	r7, r6
    76a8:	str	r3, [sp, #16]
    76aa:	ldr	r6, [pc, #32]	; (76cc <_svfprintf_r+0x136c>)
    76ac:	b.w	6744 <_svfprintf_r+0x3e4>
    76b0:	mov	fp, r3
    76b2:	b.w	6a8a <_svfprintf_r+0x72a>
    76b6:	movs	r7, #45	; 0x2d
    76b8:	strb.w	r7, [sp, #79]	; 0x4f
    76bc:	b.w	6726 <_svfprintf_r+0x3c6>
    76c0:	.word	0x2000081c
    76c4:	.word	0x200007cc
    76c8:	.word	0x66666667
    76cc:	.word	0x20000814
    76d0:	add	r2, sp, #100	; 0x64
    76d2:	add	r3, sp, #88	; 0x58
    76d4:	str	r2, [sp, #4]
    76d6:	str	r3, [sp, #0]
    76d8:	movs	r1, #3
    76da:	add	r3, sp, #84	; 0x54
    76dc:	mov	r2, r8
    76de:	vmov.f64	d0, d10
    76e2:	ldr	r0, [sp, #20]
    76e4:	bl	7ab8 <_dtoa_r>
    76e8:	mov	r4, r8
    76ea:	mov	r6, r0
    76ec:	add.w	r1, r0, r8
    76f0:	b.n	74d2 <_svfprintf_r+0x1172>
    76f2:	mov.w	r8, #6
    76f6:	b.n	72ae <_svfprintf_r+0xf4e>
    76f8:	vneg.f64	d10, d8
    76fc:	movs	r7, #45	; 0x2d
    76fe:	b.n	72c4 <_svfprintf_r+0xf64>
    7700:	ldr	r2, [sp, #60]	; 0x3c
    7702:	ldr	r3, [sp, #52]	; 0x34
    7704:	add	r3, r2
    7706:	ldr	r2, [sp, #56]	; 0x38
    7708:	str	r3, [sp, #32]
    770a:	cmp	r2, #0
    770c:	ble.w	781c <_svfprintf_r+0x14bc>
    7710:	movs	r2, #103	; 0x67
    7712:	bic.w	r3, r3, r3, asr #31
    7716:	str	r2, [sp, #48]	; 0x30
    7718:	b.n	7362 <_svfprintf_r+0x1002>
    771a:	ldr	r3, [sp, #48]	; 0x30
    771c:	cmp	r3, #71	; 0x47
    771e:	bne.w	7306 <_svfprintf_r+0xfa6>
    7722:	tst.w	fp, #1
    7726:	bne.w	74c6 <_svfprintf_r+0x1166>
    772a:	ldr	r3, [sp, #100]	; 0x64
    772c:	cmp	r5, #71	; 0x47
    772e:	sub.w	r3, r3, r6
    7732:	str	r3, [sp, #52]	; 0x34
    7734:	beq.w	7570 <_svfprintf_r+0x1210>
    7738:	ldr	r3, [sp, #84]	; 0x54
    773a:	b.n	7582 <_svfprintf_r+0x1222>
    773c:	cmp	r3, #0
    773e:	mov	r2, r3
    7740:	str	r3, [sp, #56]	; 0x38
    7742:	ble.n	782c <_svfprintf_r+0x14cc>
    7744:	cmp.w	r8, #0
    7748:	bne.n	77e2 <_svfprintf_r+0x1482>
    774a:	tst.w	fp, #1
    774e:	bne.n	77e2 <_svfprintf_r+0x1482>
    7750:	bic.w	r3, r3, r3, asr #31
    7754:	str	r2, [sp, #32]
    7756:	b.n	7362 <_svfprintf_r+0x1002>
    7758:	tst.w	fp, #1
    775c:	mov	r7, r8
    775e:	beq.n	776c <_svfprintf_r+0x140c>
    7760:	add	r6, sp, #224	; 0xe0
    7762:	movs	r3, #48	; 0x30
    7764:	strb.w	r3, [r6, #-65]!
    7768:	b.w	6a18 <_svfprintf_r+0x6b8>
    776c:	str.w	r8, [sp, #32]
    7770:	add	r6, sp, #160	; 0xa0
    7772:	b.w	6a1e <_svfprintf_r+0x6be>
    7776:	bic.w	r3, r5, r5, asr #31
    777a:	str	r7, [sp, #36]	; 0x24
    777c:	str	r3, [sp, #16]
    777e:	str	r5, [sp, #32]
    7780:	mov	r8, r0
    7782:	str	r0, [sp, #56]	; 0x38
    7784:	ldrb.w	r7, [sp, #79]	; 0x4f
    7788:	b.w	6744 <_svfprintf_r+0x3e4>
    778c:	add	r2, sp, #108	; 0x6c
    778e:	ldr	r1, [sp, #12]
    7790:	ldr	r0, [sp, #20]
    7792:	bl	9094 <__ssprint_r>
    7796:	cmp	r0, #0
    7798:	bne.w	654c <_svfprintf_r+0x1ec>
    779c:	ldr	r4, [sp, #84]	; 0x54
    779e:	ldr	r3, [sp, #116]	; 0x74
    77a0:	ldr	r2, [sp, #112]	; 0x70
    77a2:	add.w	r9, sp, #160	; 0xa0
    77a6:	b.n	7424 <_svfprintf_r+0x10c4>
    77a8:	mov	sl, r4
    77aa:	movs	r5, #0
    77ac:	b.w	6416 <_svfprintf_r+0xb6>
    77b0:	adds	r3, #48	; 0x30
    77b2:	movs	r2, #48	; 0x30
    77b4:	strb.w	r3, [sp, #95]	; 0x5f
    77b8:	strb.w	r2, [sp, #94]	; 0x5e
    77bc:	add	r3, sp, #96	; 0x60
    77be:	b.n	75fa <_svfprintf_r+0x129a>
    77c0:	ldr	r2, [sp, #60]	; 0x3c
    77c2:	ldr	r3, [sp, #56]	; 0x38
    77c4:	add	r3, r2
    77c6:	movs	r2, #103	; 0x67
    77c8:	str	r3, [sp, #32]
    77ca:	str	r2, [sp, #48]	; 0x30
    77cc:	bic.w	r3, r3, r3, asr #31
    77d0:	b.n	7362 <_svfprintf_r+0x1002>
    77d2:	ldr	r3, [sp, #100]	; 0x64
    77d4:	b.n	7328 <_svfprintf_r+0xfc8>
    77d6:	ldr	r6, [pc, #240]	; (78c8 <_svfprintf_r+0x1568>)
    77d8:	ldr	r3, [pc, #240]	; (78cc <_svfprintf_r+0x156c>)
    77da:	ldrb.w	r7, [sp, #79]	; 0x4f
    77de:	b.w	672a <_svfprintf_r+0x3ca>
    77e2:	ldr	r3, [sp, #56]	; 0x38
    77e4:	ldr	r2, [sp, #60]	; 0x3c
    77e6:	adds	r5, r3, r2
    77e8:	add.w	r3, r5, r8
    77ec:	str	r3, [sp, #32]
    77ee:	bic.w	r3, r3, r3, asr #31
    77f2:	b.n	7362 <_svfprintf_r+0x1002>
    77f4:	vcmp.f64	d10, #0.0
    77f8:	vmrs	APSR_nzcv, fpscr
    77fc:	beq.w	74da <_svfprintf_r+0x117a>
    7800:	rsb	r4, r4, #1
    7804:	str	r4, [sp, #84]	; 0x54
    7806:	add	r1, r4
    7808:	b.n	7308 <_svfprintf_r+0xfa8>
    780a:	ands.w	r3, fp, #1
    780e:	bne.w	760c <_svfprintf_r+0x12ac>
    7812:	str	r3, [sp, #56]	; 0x38
    7814:	ldr	r3, [sp, #32]
    7816:	bic.w	r3, r3, r3, asr #31
    781a:	b.n	7362 <_svfprintf_r+0x1002>
    781c:	ldr	r3, [sp, #56]	; 0x38
    781e:	ldr	r2, [sp, #32]
    7820:	rsb	r3, r3, #1
    7824:	add	r2, r3
    7826:	mov	r3, r2
    7828:	str	r2, [sp, #32]
    782a:	b.n	7710 <_svfprintf_r+0x13b0>
    782c:	cmp.w	r8, #0
    7830:	bne.n	7838 <_svfprintf_r+0x14d8>
    7832:	tst.w	fp, #1
    7836:	beq.n	7848 <_svfprintf_r+0x14e8>
    7838:	ldr	r3, [sp, #60]	; 0x3c
    783a:	adds	r5, r3, #1
    783c:	add.w	r3, r5, r8
    7840:	str	r3, [sp, #32]
    7842:	bic.w	r3, r3, r3, asr #31
    7846:	b.n	7362 <_svfprintf_r+0x1002>
    7848:	movs	r3, #1
    784a:	str	r3, [sp, #32]
    784c:	b.n	7362 <_svfprintf_r+0x1002>
    784e:	ldr	r0, [sp, #36]	; 0x24
    7850:	ldrb.w	r3, [sl, #1]
    7854:	ldr	r5, [r0, #0]
    7856:	adds	r0, #4
    7858:	cmp	r5, #0
    785a:	str	r0, [sp, #36]	; 0x24
    785c:	mov	sl, r4
    785e:	bge.w	6412 <_svfprintf_r+0xb2>
    7862:	mov.w	r5, #4294967295
    7866:	b.w	6412 <_svfprintf_r+0xb2>
    786a:	strb.w	r1, [sp, #79]	; 0x4f
    786e:	b.w	6b8c <_svfprintf_r+0x82c>
    7872:	strb.w	r1, [sp, #79]	; 0x4f
    7876:	b.w	6c18 <_svfprintf_r+0x8b8>
    787a:	ldr	r2, [sp, #20]
    787c:	movs	r3, #12
    787e:	str	r3, [r2, #0]
    7880:	mov.w	r0, #4294967295
    7884:	b.w	655e <_svfprintf_r+0x1fe>
    7888:	strb.w	r1, [sp, #79]	; 0x4f
    788c:	b.w	6a38 <_svfprintf_r+0x6d8>
    7890:	strb.w	r1, [sp, #79]	; 0x4f
    7894:	b.w	69de <_svfprintf_r+0x67e>
    7898:	strb.w	r1, [sp, #79]	; 0x4f
    789c:	b.w	6b44 <_svfprintf_r+0x7e4>
    78a0:	add.w	r3, sp, #94	; 0x5e
    78a4:	b.n	75fa <_svfprintf_r+0x129a>
    78a6:	strb.w	r1, [sp, #79]	; 0x4f
    78aa:	b.w	6572 <_svfprintf_r+0x212>
    78ae:	strb.w	r1, [sp, #79]	; 0x4f
    78b2:	b.w	697a <_svfprintf_r+0x61a>
    78b6:	strb.w	r1, [sp, #79]	; 0x4f
    78ba:	b.w	66ea <_svfprintf_r+0x38a>
    78be:	strb.w	r1, [sp, #79]	; 0x4f
    78c2:	b.w	6666 <_svfprintf_r+0x306>
    78c6:	nop
    78c8:	.word	0x200007e8
    78cc:	.word	0x200007e4

000078d0 <__ascii_wctomb>:
    78d0:	cbz	r1, 78dc <__ascii_wctomb+0xc>
    78d2:	cmp	r2, #255	; 0xff
    78d4:	bhi.n	78e0 <__ascii_wctomb+0x10>
    78d6:	strb	r2, [r1, #0]
    78d8:	movs	r0, #1
    78da:	bx	lr
    78dc:	mov	r0, r1
    78de:	bx	lr
    78e0:	movs	r3, #138	; 0x8a
    78e2:	str	r3, [r0, #0]
    78e4:	mov.w	r0, #4294967295
    78e8:	bx	lr
    78ea:	nop

000078ec <__register_exitproc>:
    78ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78f0:	ldr	r4, [pc, #148]	; (7988 <__register_exitproc+0x9c>)
    78f2:	ldr	r5, [r4, #0]
    78f4:	ldr.w	r4, [r5, #328]	; 0x148
    78f8:	mov	r6, r0
    78fa:	mov	r8, r1
    78fc:	mov	sl, r2
    78fe:	mov	r9, r3
    7900:	cbz	r4, 7974 <__register_exitproc+0x88>
    7902:	ldr	r0, [r4, #4]
    7904:	cmp	r0, #31
    7906:	bgt.n	7938 <__register_exitproc+0x4c>
    7908:	adds	r3, r0, #1
    790a:	cbz	r6, 792a <__register_exitproc+0x3e>
    790c:	add.w	r5, r4, r0, lsl #2
    7910:	movs	r2, #1
    7912:	str.w	sl, [r5, #136]	; 0x88
    7916:	ldr.w	r1, [r4, #392]	; 0x188
    791a:	lsls	r2, r0
    791c:	orrs	r1, r2
    791e:	cmp	r6, #2
    7920:	str.w	r1, [r4, #392]	; 0x188
    7924:	str.w	r9, [r5, #264]	; 0x108
    7928:	beq.n	7968 <__register_exitproc+0x7c>
    792a:	adds	r0, #2
    792c:	str	r3, [r4, #4]
    792e:	str.w	r8, [r4, r0, lsl #2]
    7932:	movs	r0, #0
    7934:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7938:	ldr	r3, [pc, #80]	; (798c <__register_exitproc+0xa0>)
    793a:	cbz	r3, 797e <__register_exitproc+0x92>
    793c:	mov.w	r0, #400	; 0x190
    7940:	bl	56ec <malloc>
    7944:	mov	r4, r0
    7946:	cbz	r0, 797e <__register_exitproc+0x92>
    7948:	ldr.w	r3, [r5, #328]	; 0x148
    794c:	movs	r7, #0
    794e:	stmia.w	r0, {r3, r7}
    7952:	str.w	r4, [r5, #328]	; 0x148
    7956:	mov	r0, r7
    7958:	movs	r3, #1
    795a:	str.w	r7, [r4, #392]	; 0x188
    795e:	str.w	r7, [r4, #396]	; 0x18c
    7962:	cmp	r6, #0
    7964:	beq.n	792a <__register_exitproc+0x3e>
    7966:	b.n	790c <__register_exitproc+0x20>
    7968:	ldr.w	r1, [r4, #396]	; 0x18c
    796c:	orrs	r2, r1
    796e:	str.w	r2, [r4, #396]	; 0x18c
    7972:	b.n	792a <__register_exitproc+0x3e>
    7974:	add.w	r4, r5, #332	; 0x14c
    7978:	str.w	r4, [r5, #328]	; 0x148
    797c:	b.n	7902 <__register_exitproc+0x16>
    797e:	mov.w	r0, #4294967295
    7982:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7986:	nop
    7988:	.word	0x200007b8
    798c:	.word	0x000056ed

00007990 <quorem>:
    7990:	ldr	r2, [r0, #16]
    7992:	ldr	r3, [r1, #16]
    7994:	cmp	r3, r2
    7996:	bgt.w	7ab4 <quorem+0x124>
    799a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    799e:	add.w	r8, r3, #4294967295
    79a2:	add.w	r7, r1, #20
    79a6:	add.w	fp, r0, #20
    79aa:	ldr.w	r2, [r7, r8, lsl #2]
    79ae:	ldr.w	r3, [fp, r8, lsl #2]
    79b2:	mov.w	r4, r8, lsl #2
    79b6:	sub	sp, #12
    79b8:	adds	r2, #1
    79ba:	udiv	r9, r3, r2
    79be:	add.w	r3, fp, r4
    79c2:	str	r4, [sp, #0]
    79c4:	add.w	sl, r7, r4
    79c8:	str	r3, [sp, #4]
    79ca:	cmp.w	r9, #0
    79ce:	beq.n	7a44 <quorem+0xb4>
    79d0:	movs	r5, #0
    79d2:	mov	ip, r7
    79d4:	mov	lr, fp
    79d6:	mov	r3, r5
    79d8:	ldr.w	r6, [ip], #4
    79dc:	ldr.w	r2, [lr]
    79e0:	uxth	r4, r6
    79e2:	mla	r5, r9, r4, r5
    79e6:	lsrs	r6, r6, #16
    79e8:	lsrs	r4, r5, #16
    79ea:	mla	r4, r9, r6, r4
    79ee:	uxth	r5, r5
    79f0:	subs	r3, r3, r5
    79f2:	uxth	r6, r4
    79f4:	uxtah	r3, r3, r2
    79f8:	rsb	r6, r6, r2, lsr #16
    79fc:	add.w	r6, r6, r3, asr #16
    7a00:	uxth	r3, r3
    7a02:	orr.w	r3, r3, r6, lsl #16
    7a06:	cmp	sl, ip
    7a08:	str.w	r3, [lr], #4
    7a0c:	mov.w	r5, r4, lsr #16
    7a10:	mov.w	r3, r6, asr #16
    7a14:	bcs.n	79d8 <quorem+0x48>
    7a16:	ldr	r3, [sp, #0]
    7a18:	ldr.w	r3, [fp, r3]
    7a1c:	cbnz	r3, 7a44 <quorem+0xb4>
    7a1e:	ldr	r4, [sp, #4]
    7a20:	subs	r3, r4, #4
    7a22:	cmp	fp, r3
    7a24:	bcs.n	7a40 <quorem+0xb0>
    7a26:	ldr.w	r3, [r4, #-4]
    7a2a:	cbnz	r3, 7a40 <quorem+0xb0>
    7a2c:	sub.w	r3, r4, #8
    7a30:	b.n	7a38 <quorem+0xa8>
    7a32:	ldr	r2, [r3, #0]
    7a34:	subs	r3, #4
    7a36:	cbnz	r2, 7a40 <quorem+0xb0>
    7a38:	cmp	fp, r3
    7a3a:	add.w	r8, r8, #4294967295
    7a3e:	bcc.n	7a32 <quorem+0xa2>
    7a40:	str.w	r8, [r0, #16]
    7a44:	mov	r4, r0
    7a46:	bl	8e80 <__mcmp>
    7a4a:	cmp	r0, #0
    7a4c:	blt.n	7aac <quorem+0x11c>
    7a4e:	add.w	r9, r9, #1
    7a52:	mov	r5, fp
    7a54:	movs	r3, #0
    7a56:	ldr.w	r1, [r7], #4
    7a5a:	ldr	r0, [r5, #0]
    7a5c:	uxth	r2, r1
    7a5e:	subs	r2, r3, r2
    7a60:	lsrs	r1, r1, #16
    7a62:	uxtah	r2, r2, r0
    7a66:	rsb	r3, r1, r0, lsr #16
    7a6a:	add.w	r3, r3, r2, asr #16
    7a6e:	uxth	r1, r2
    7a70:	orr.w	r1, r1, r3, lsl #16
    7a74:	cmp	sl, r7
    7a76:	str.w	r1, [r5], #4
    7a7a:	mov.w	r3, r3, asr #16
    7a7e:	bcs.n	7a56 <quorem+0xc6>
    7a80:	ldr.w	r2, [fp, r8, lsl #2]
    7a84:	add.w	r3, fp, r8, lsl #2
    7a88:	cbnz	r2, 7aac <quorem+0x11c>
    7a8a:	subs	r2, r3, #4
    7a8c:	cmp	fp, r2
    7a8e:	bcs.n	7aa8 <quorem+0x118>
    7a90:	ldr.w	r2, [r3, #-4]
    7a94:	cbnz	r2, 7aa8 <quorem+0x118>
    7a96:	subs	r3, #8
    7a98:	b.n	7aa0 <quorem+0x110>
    7a9a:	ldr	r2, [r3, #0]
    7a9c:	subs	r3, #4
    7a9e:	cbnz	r2, 7aa8 <quorem+0x118>
    7aa0:	cmp	fp, r3
    7aa2:	add.w	r8, r8, #4294967295
    7aa6:	bcc.n	7a9a <quorem+0x10a>
    7aa8:	str.w	r8, [r4, #16]
    7aac:	mov	r0, r9
    7aae:	add	sp, #12
    7ab0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ab4:	movs	r0, #0
    7ab6:	bx	lr

00007ab8 <_dtoa_r>:
    7ab8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7abc:	vmov	r6, r7, d0
    7ac0:	sub	sp, #76	; 0x4c
    7ac2:	ldr	r5, [r0, #64]	; 0x40
    7ac4:	str	r1, [sp, #4]
    7ac6:	mov	r4, r0
    7ac8:	mov	r8, r2
    7aca:	str	r3, [sp, #16]
    7acc:	vmov	sl, s0
    7ad0:	mov	fp, r7
    7ad2:	cbz	r5, 7ae8 <_dtoa_r+0x30>
    7ad4:	ldr	r2, [r0, #68]	; 0x44
    7ad6:	str	r2, [r5, #4]
    7ad8:	movs	r3, #1
    7ada:	lsls	r3, r2
    7adc:	str	r3, [r5, #8]
    7ade:	mov	r1, r5
    7ae0:	bl	8abc <_Bfree>
    7ae4:	movs	r3, #0
    7ae6:	str	r3, [r4, #64]	; 0x40
    7ae8:	cmp.w	fp, #0
    7aec:	mov	r6, fp
    7aee:	blt.n	7b5a <_dtoa_r+0xa2>
    7af0:	ldr	r2, [sp, #112]	; 0x70
    7af2:	movs	r3, #0
    7af4:	str	r3, [r2, #0]
    7af6:	ldr	r3, [pc, #784]	; (7e08 <_dtoa_r+0x350>)
    7af8:	mov	r2, r3
    7afa:	ands	r3, r6
    7afc:	cmp	r3, r2
    7afe:	beq.n	7b2c <_dtoa_r+0x74>
    7b00:	vmov	d7, sl, fp
    7b04:	vcmp.f64	d7, #0.0
    7b08:	vmrs	APSR_nzcv, fpscr
    7b0c:	strd	sl, fp, [sp, #8]
    7b10:	bne.n	7b68 <_dtoa_r+0xb0>
    7b12:	ldr	r2, [sp, #16]
    7b14:	movs	r3, #1
    7b16:	str	r3, [r2, #0]
    7b18:	ldr	r3, [sp, #116]	; 0x74
    7b1a:	cmp	r3, #0
    7b1c:	beq.w	7c8e <_dtoa_r+0x1d6>
    7b20:	ldr	r0, [pc, #744]	; (7e0c <_dtoa_r+0x354>)
    7b22:	str	r0, [r3, #0]
    7b24:	subs	r0, #1
    7b26:	add	sp, #76	; 0x4c
    7b28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b2c:	ldr	r2, [sp, #16]
    7b2e:	movw	r3, #9999	; 0x270f
    7b32:	str	r3, [r2, #0]
    7b34:	cmp.w	sl, #0
    7b38:	beq.w	7c60 <_dtoa_r+0x1a8>
    7b3c:	ldr	r0, [pc, #720]	; (7e10 <_dtoa_r+0x358>)
    7b3e:	ldr	r3, [sp, #116]	; 0x74
    7b40:	cmp	r3, #0
    7b42:	beq.n	7b26 <_dtoa_r+0x6e>
    7b44:	ldrb	r3, [r0, #3]
    7b46:	cmp	r3, #0
    7b48:	beq.w	7c92 <_dtoa_r+0x1da>
    7b4c:	add.w	r3, r0, #8
    7b50:	ldr	r2, [sp, #116]	; 0x74
    7b52:	str	r3, [r2, #0]
    7b54:	add	sp, #76	; 0x4c
    7b56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b5a:	ldr	r2, [sp, #112]	; 0x70
    7b5c:	movs	r3, #1
    7b5e:	bic.w	r6, fp, #2147483648	; 0x80000000
    7b62:	str	r3, [r2, #0]
    7b64:	mov	fp, r6
    7b66:	b.n	7af6 <_dtoa_r+0x3e>
    7b68:	add	r1, sp, #68	; 0x44
    7b6a:	add	r2, sp, #64	; 0x40
    7b6c:	vldr	d0, [sp, #8]
    7b70:	mov	r0, r4
    7b72:	bl	8fd8 <__d2b>
    7b76:	lsrs	r1, r6, #20
    7b78:	str	r0, [sp, #28]
    7b7a:	bne.n	7c72 <_dtoa_r+0x1ba>
    7b7c:	ldr	r0, [sp, #64]	; 0x40
    7b7e:	ldr	r1, [sp, #68]	; 0x44
    7b80:	add	r1, r0
    7b82:	addw	r3, r1, #1074	; 0x432
    7b86:	cmp	r3, #32
    7b88:	ble.w	800e <_dtoa_r+0x556>
    7b8c:	rsb	r3, r3, #64	; 0x40
    7b90:	addw	r2, r1, #1042	; 0x412
    7b94:	lsls	r6, r3
    7b96:	lsr.w	r3, sl, r2
    7b9a:	orrs	r3, r6
    7b9c:	vmov	s15, r3
    7ba0:	vcvt.f64.u32	d7, s15
    7ba4:	movs	r5, #1
    7ba6:	vmov	r2, r3, d7
    7baa:	subs	r1, #1
    7bac:	sub.w	r3, r3, #32505856	; 0x1f00000
    7bb0:	str	r5, [sp, #40]	; 0x28
    7bb2:	vmov	d7, r2, r3
    7bb6:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    7bba:	vldr	d4, [pc, #564]	; 7df0 <_dtoa_r+0x338>
    7bbe:	vsub.f64	d6, d7, d6
    7bc2:	vldr	d7, [pc, #564]	; 7df8 <_dtoa_r+0x340>
    7bc6:	vldr	d5, [pc, #568]	; 7e00 <_dtoa_r+0x348>
    7bca:	vfma.f64	d7, d6, d4
    7bce:	vmov	s13, r1
    7bd2:	vcvt.f64.s32	d6, s13
    7bd6:	vfma.f64	d7, d6, d5
    7bda:	vcvt.s32.f64	s13, d7
    7bde:	vcmpe.f64	d7, #0.0
    7be2:	vmrs	APSR_nzcv, fpscr
    7be6:	vstr	s13, [sp, #8]
    7bea:	bmi.w	7e26 <_dtoa_r+0x36e>
    7bee:	ldr	r5, [sp, #8]
    7bf0:	cmp	r5, #22
    7bf2:	bhi.w	7e20 <_dtoa_r+0x368>
    7bf6:	ldr	r3, [pc, #540]	; (7e14 <_dtoa_r+0x35c>)
    7bf8:	add.w	r3, r3, r5, lsl #3
    7bfc:	vldr	d7, [r3]
    7c00:	vmov	d6, sl, fp
    7c04:	vcmpe.f64	d7, d6
    7c08:	vmrs	APSR_nzcv, fpscr
    7c0c:	ble.w	801c <_dtoa_r+0x564>
    7c10:	subs	r3, r5, #1
    7c12:	str	r3, [sp, #8]
    7c14:	movs	r3, #0
    7c16:	str	r3, [sp, #48]	; 0x30
    7c18:	subs	r1, r0, r1
    7c1a:	subs.w	r9, r1, #1
    7c1e:	bmi.w	7e50 <_dtoa_r+0x398>
    7c22:	movs	r3, #0
    7c24:	str	r3, [sp, #24]
    7c26:	ldr	r3, [sp, #8]
    7c28:	cmp	r3, #0
    7c2a:	blt.w	7e3e <_dtoa_r+0x386>
    7c2e:	add	r9, r3
    7c30:	str	r3, [sp, #44]	; 0x2c
    7c32:	movs	r3, #0
    7c34:	str	r3, [sp, #20]
    7c36:	ldr	r3, [sp, #4]
    7c38:	cmp	r3, #9
    7c3a:	bhi.n	7c96 <_dtoa_r+0x1de>
    7c3c:	cmp	r3, #5
    7c3e:	ble.w	8700 <_dtoa_r+0xc48>
    7c42:	subs	r3, #4
    7c44:	str	r3, [sp, #4]
    7c46:	movs	r3, #0
    7c48:	str	r3, [sp, #56]	; 0x38
    7c4a:	ldr	r3, [sp, #4]
    7c4c:	subs	r3, #2
    7c4e:	cmp	r3, #3
    7c50:	bhi.w	8712 <_dtoa_r+0xc5a>
    7c54:	tbh	[pc, r3, lsl #1]
    7c58:	.word	0x01e502a9
    7c5c:	.word	0x03c802b5
    7c60:	ldr	r3, [pc, #428]	; (7e10 <_dtoa_r+0x358>)
    7c62:	ldr	r2, [pc, #436]	; (7e18 <_dtoa_r+0x360>)
    7c64:	ubfx	r0, r6, #0, #20
    7c68:	cmp	r0, #0
    7c6a:	ite	ne
    7c6c:	movne	r0, r3
    7c6e:	moveq	r0, r2
    7c70:	b.n	7b3e <_dtoa_r+0x86>
    7c72:	ldrd	r2, r3, [sp, #8]
    7c76:	ubfx	r0, r3, #0, #20
    7c7a:	orr.w	r3, r0, #1069547520	; 0x3fc00000
    7c7e:	movs	r5, #0
    7c80:	subw	r1, r1, #1023	; 0x3ff
    7c84:	orr.w	r3, r3, #3145728	; 0x300000
    7c88:	ldr	r0, [sp, #64]	; 0x40
    7c8a:	str	r5, [sp, #40]	; 0x28
    7c8c:	b.n	7bb2 <_dtoa_r+0xfa>
    7c8e:	ldr	r0, [pc, #396]	; (7e1c <_dtoa_r+0x364>)
    7c90:	b.n	7b26 <_dtoa_r+0x6e>
    7c92:	adds	r3, r0, #3
    7c94:	b.n	7b50 <_dtoa_r+0x98>
    7c96:	movs	r1, #0
    7c98:	str	r1, [r4, #68]	; 0x44
    7c9a:	mov	r0, r4
    7c9c:	mov	r8, r1
    7c9e:	str	r1, [sp, #4]
    7ca0:	bl	8a70 <_Balloc>
    7ca4:	mov.w	r7, #4294967295
    7ca8:	movs	r3, #1
    7caa:	str	r0, [sp, #32]
    7cac:	str	r0, [r4, #64]	; 0x40
    7cae:	str	r7, [sp, #52]	; 0x34
    7cb0:	str	r3, [sp, #36]	; 0x24
    7cb2:	ldr	r3, [sp, #68]	; 0x44
    7cb4:	cmp	r3, #0
    7cb6:	blt.n	7dae <_dtoa_r+0x2f6>
    7cb8:	ldr	r2, [sp, #8]
    7cba:	cmp	r2, #14
    7cbc:	bgt.n	7dae <_dtoa_r+0x2f6>
    7cbe:	ldr	r3, [pc, #340]	; (7e14 <_dtoa_r+0x35c>)
    7cc0:	cmp.w	r8, #0
    7cc4:	add.w	r3, r3, r2, lsl #3
    7cc8:	vldr	d4, [r3]
    7ccc:	blt.w	81d8 <_dtoa_r+0x720>
    7cd0:	vneg.f64	d2, d4
    7cd4:	vmov	d7, sl, fp
    7cd8:	vdiv.f64	d6, d7, d4
    7cdc:	vcvt.s32.f64	s12, d6
    7ce0:	ldr	r2, [sp, #32]
    7ce2:	vmov	r3, s12
    7ce6:	cmp	r7, #1
    7ce8:	add.w	r3, r3, #48	; 0x30
    7cec:	vcvt.f64.s32	d5, s12
    7cf0:	add.w	fp, r2, #1
    7cf4:	strb	r3, [r2, #0]
    7cf6:	vfma.f64	d7, d2, d5
    7cfa:	beq.n	7d42 <_dtoa_r+0x28a>
    7cfc:	vmov.f64	d3, #36	; 0x41200000  10.0
    7d00:	vmul.f64	d7, d7, d3
    7d04:	vcmp.f64	d7, #0.0
    7d08:	vmrs	APSR_nzcv, fpscr
    7d0c:	beq.n	7d84 <_dtoa_r+0x2cc>
    7d0e:	ldr	r2, [sp, #32]
    7d10:	b.n	7d20 <_dtoa_r+0x268>
    7d12:	vmul.f64	d7, d7, d3
    7d16:	vcmp.f64	d7, #0.0
    7d1a:	vmrs	APSR_nzcv, fpscr
    7d1e:	beq.n	7d84 <_dtoa_r+0x2cc>
    7d20:	vdiv.f64	d6, d7, d4
    7d24:	vcvt.s32.f64	s12, d6
    7d28:	vmov	r3, s12
    7d2c:	adds	r3, #48	; 0x30
    7d2e:	strb.w	r3, [fp], #1
    7d32:	rsb	r3, r2, fp
    7d36:	cmp	r3, r7
    7d38:	vcvt.f64.s32	d5, s12
    7d3c:	vfma.f64	d7, d2, d5
    7d40:	bne.n	7d12 <_dtoa_r+0x25a>
    7d42:	vadd.f64	d7, d7, d7
    7d46:	vcmpe.f64	d4, d7
    7d4a:	vmrs	APSR_nzcv, fpscr
    7d4e:	bmi.n	7d62 <_dtoa_r+0x2aa>
    7d50:	vcmp.f64	d4, d7
    7d54:	vmrs	APSR_nzcv, fpscr
    7d58:	bne.n	7d84 <_dtoa_r+0x2cc>
    7d5a:	vmov	r3, s12
    7d5e:	lsls	r3, r3, #31
    7d60:	bpl.n	7d84 <_dtoa_r+0x2cc>
    7d62:	ldrb.w	r0, [fp, #-1]
    7d66:	ldr	r2, [sp, #32]
    7d68:	add.w	r3, fp, #4294967295
    7d6c:	b.n	7d78 <_dtoa_r+0x2c0>
    7d6e:	cmp	r2, r3
    7d70:	beq.w	853e <_dtoa_r+0xa86>
    7d74:	ldrb.w	r0, [r3, #-1]!
    7d78:	cmp	r0, #57	; 0x39
    7d7a:	add.w	fp, r3, #1
    7d7e:	beq.n	7d6e <_dtoa_r+0x2b6>
    7d80:	adds	r0, #1
    7d82:	strb	r0, [r3, #0]
    7d84:	ldr	r1, [sp, #28]
    7d86:	mov	r0, r4
    7d88:	bl	8abc <_Bfree>
    7d8c:	movs	r2, #0
    7d8e:	ldr	r3, [sp, #8]
    7d90:	strb.w	r2, [fp]
    7d94:	ldr	r2, [sp, #16]
    7d96:	adds	r3, #1
    7d98:	str	r3, [r2, #0]
    7d9a:	ldr	r3, [sp, #116]	; 0x74
    7d9c:	cmp	r3, #0
    7d9e:	beq.w	846e <_dtoa_r+0x9b6>
    7da2:	ldr	r0, [sp, #32]
    7da4:	str.w	fp, [r3]
    7da8:	add	sp, #76	; 0x4c
    7daa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7dae:	ldr	r2, [sp, #36]	; 0x24
    7db0:	cmp	r2, #0
    7db2:	beq.n	7e5c <_dtoa_r+0x3a4>
    7db4:	ldr	r2, [sp, #4]
    7db6:	cmp	r2, #1
    7db8:	ble.w	8218 <_dtoa_r+0x760>
    7dbc:	ldr	r1, [sp, #20]
    7dbe:	subs	r2, r7, #1
    7dc0:	cmp	r1, r2
    7dc2:	blt.w	8474 <_dtoa_r+0x9bc>
    7dc6:	subs	r3, r1, r2
    7dc8:	str	r3, [sp, #56]	; 0x38
    7dca:	cmp	r7, #0
    7dcc:	ldr	r3, [sp, #24]
    7dce:	blt.w	861a <_dtoa_r+0xb62>
    7dd2:	str	r3, [sp, #40]	; 0x28
    7dd4:	mov	r3, r7
    7dd6:	ldr	r2, [sp, #24]
    7dd8:	movs	r1, #1
    7dda:	add	r2, r3
    7ddc:	mov	r0, r4
    7dde:	str	r2, [sp, #24]
    7de0:	add	r9, r3
    7de2:	bl	8bec <__i2b>
    7de6:	mov	r6, r0
    7de8:	b.n	7e66 <_dtoa_r+0x3ae>
    7dea:	nop
    7dec:	nop.w
    7df0:	.word	0x636f4361
    7df4:	.word	0x3fd287a7
    7df8:	.word	0x8b60c8b3
    7dfc:	.word	0x3fc68a28
    7e00:	.word	0x509f79fb
    7e04:	.word	0x3fd34413
    7e08:	.word	0x7ff00000
    7e0c:	.word	0x2000081d
    7e10:	.word	0x20000940
    7e14:	.word	0x20000948
    7e18:	.word	0x20000934
    7e1c:	.word	0x2000081c
    7e20:	movs	r3, #1
    7e22:	str	r3, [sp, #48]	; 0x30
    7e24:	b.n	7c18 <_dtoa_r+0x160>
    7e26:	vcvt.f64.s32	d6, s13
    7e2a:	vcmp.f64	d7, d6
    7e2e:	vmrs	APSR_nzcv, fpscr
    7e32:	beq.w	7bee <_dtoa_r+0x136>
    7e36:	ldr	r3, [sp, #8]
    7e38:	subs	r3, #1
    7e3a:	str	r3, [sp, #8]
    7e3c:	b.n	7bee <_dtoa_r+0x136>
    7e3e:	ldr	r2, [sp, #24]
    7e40:	ldr	r3, [sp, #8]
    7e42:	subs	r2, r2, r3
    7e44:	negs	r3, r3
    7e46:	str	r3, [sp, #20]
    7e48:	movs	r3, #0
    7e4a:	str	r2, [sp, #24]
    7e4c:	str	r3, [sp, #44]	; 0x2c
    7e4e:	b.n	7c36 <_dtoa_r+0x17e>
    7e50:	rsb	r3, r9, #0
    7e54:	str	r3, [sp, #24]
    7e56:	mov.w	r9, #0
    7e5a:	b.n	7c26 <_dtoa_r+0x16e>
    7e5c:	ldr	r3, [sp, #20]
    7e5e:	str	r3, [sp, #56]	; 0x38
    7e60:	ldr	r6, [sp, #36]	; 0x24
    7e62:	ldr	r3, [sp, #24]
    7e64:	str	r3, [sp, #40]	; 0x28
    7e66:	ldr	r1, [sp, #40]	; 0x28
    7e68:	mov	r3, r1
    7e6a:	cbz	r1, 7e86 <_dtoa_r+0x3ce>
    7e6c:	cmp.w	r9, #0
    7e70:	ble.n	7e86 <_dtoa_r+0x3ce>
    7e72:	cmp	r1, r9
    7e74:	ldr	r2, [sp, #24]
    7e76:	it	ge
    7e78:	movge	r3, r9
    7e7a:	subs	r2, r2, r3
    7e7c:	str	r2, [sp, #24]
    7e7e:	subs	r2, r1, r3
    7e80:	str	r2, [sp, #40]	; 0x28
    7e82:	rsb	r9, r3, r9
    7e86:	ldr	r3, [sp, #20]
    7e88:	cmp	r3, #0
    7e8a:	ble.w	838e <_dtoa_r+0x8d6>
    7e8e:	ldr	r2, [sp, #36]	; 0x24
    7e90:	cmp	r2, #0
    7e92:	beq.w	81ca <_dtoa_r+0x712>
    7e96:	ldr	r2, [sp, #56]	; 0x38
    7e98:	cmp	r2, #0
    7e9a:	beq.w	81ca <_dtoa_r+0x712>
    7e9e:	mov	r1, r6
    7ea0:	mov	r0, r4
    7ea2:	bl	8d30 <__pow5mult>
    7ea6:	ldr	r2, [sp, #28]
    7ea8:	mov	r1, r0
    7eaa:	mov	r6, r0
    7eac:	mov	r0, r4
    7eae:	bl	8c00 <__multiply>
    7eb2:	ldr	r1, [sp, #28]
    7eb4:	mov	r5, r0
    7eb6:	mov	r0, r4
    7eb8:	bl	8abc <_Bfree>
    7ebc:	ldr	r3, [sp, #20]
    7ebe:	ldr	r2, [sp, #56]	; 0x38
    7ec0:	subs	r3, r3, r2
    7ec2:	str	r3, [sp, #20]
    7ec4:	bne.w	81c8 <_dtoa_r+0x710>
    7ec8:	movs	r1, #1
    7eca:	mov	r0, r4
    7ecc:	bl	8bec <__i2b>
    7ed0:	ldr	r3, [sp, #44]	; 0x2c
    7ed2:	str	r0, [sp, #20]
    7ed4:	cmp	r3, #0
    7ed6:	beq.w	8232 <_dtoa_r+0x77a>
    7eda:	mov	r1, r0
    7edc:	mov	r2, r3
    7ede:	mov	r0, r4
    7ee0:	bl	8d30 <__pow5mult>
    7ee4:	ldr	r3, [sp, #4]
    7ee6:	str	r0, [sp, #20]
    7ee8:	cmp	r3, #1
    7eea:	ble.w	83ee <_dtoa_r+0x936>
    7eee:	movs	r3, #0
    7ef0:	str	r3, [sp, #28]
    7ef2:	ldr	r2, [sp, #20]
    7ef4:	ldr	r3, [r2, #16]
    7ef6:	add.w	r3, r2, r3, lsl #2
    7efa:	ldr	r0, [r3, #16]
    7efc:	bl	8b50 <__hi0bits>
    7f00:	rsb	r0, r0, #32
    7f04:	add	r0, r9
    7f06:	ands.w	r0, r0, #31
    7f0a:	beq.w	822e <_dtoa_r+0x776>
    7f0e:	rsb	r3, r0, #32
    7f12:	cmp	r3, #4
    7f14:	ble.w	8708 <_dtoa_r+0xc50>
    7f18:	rsb	r0, r0, #28
    7f1c:	ldr	r3, [sp, #24]
    7f1e:	add	r3, r0
    7f20:	str	r3, [sp, #24]
    7f22:	ldr	r3, [sp, #40]	; 0x28
    7f24:	add	r3, r0
    7f26:	str	r3, [sp, #40]	; 0x28
    7f28:	add	r9, r0
    7f2a:	ldr	r3, [sp, #24]
    7f2c:	cmp	r3, #0
    7f2e:	ble.n	7f3c <_dtoa_r+0x484>
    7f30:	mov	r1, r5
    7f32:	mov	r2, r3
    7f34:	mov	r0, r4
    7f36:	bl	8dd0 <__lshift>
    7f3a:	mov	r5, r0
    7f3c:	cmp.w	r9, #0
    7f40:	ble.n	7f4e <_dtoa_r+0x496>
    7f42:	mov	r2, r9
    7f44:	ldr	r1, [sp, #20]
    7f46:	mov	r0, r4
    7f48:	bl	8dd0 <__lshift>
    7f4c:	str	r0, [sp, #20]
    7f4e:	ldr	r3, [sp, #48]	; 0x30
    7f50:	cmp	r3, #0
    7f52:	bne.w	8358 <_dtoa_r+0x8a0>
    7f56:	cmp	r7, #0
    7f58:	ble.w	839c <_dtoa_r+0x8e4>
    7f5c:	ldr	r3, [sp, #36]	; 0x24
    7f5e:	cmp	r3, #0
    7f60:	bne.w	825a <_dtoa_r+0x7a2>
    7f64:	ldr.w	fp, [sp, #32]
    7f68:	ldr.w	sl, [sp, #20]
    7f6c:	mov	r8, fp
    7f6e:	b.n	7f76 <_dtoa_r+0x4be>
    7f70:	bl	8ad0 <__multadd>
    7f74:	mov	r5, r0
    7f76:	mov	r1, sl
    7f78:	mov	r0, r5
    7f7a:	bl	7990 <quorem>
    7f7e:	add.w	r9, r0, #48	; 0x30
    7f82:	strb.w	r9, [r8], #1
    7f86:	rsb	r3, fp, r8
    7f8a:	cmp	r3, r7
    7f8c:	mov.w	r2, #10
    7f90:	mov.w	r3, #0
    7f94:	mov	r1, r5
    7f96:	mov	r0, r4
    7f98:	blt.n	7f70 <_dtoa_r+0x4b8>
    7f9a:	ldr	r3, [sp, #32]
    7f9c:	cmp	r7, #1
    7f9e:	ite	ge
    7fa0:	addge	r3, r3, r7
    7fa2:	addlt	r3, #1
    7fa4:	mov	fp, r3
    7fa6:	mov.w	sl, #0
    7faa:	mov	r1, r5
    7fac:	movs	r2, #1
    7fae:	mov	r0, r4
    7fb0:	bl	8dd0 <__lshift>
    7fb4:	ldr	r1, [sp, #20]
    7fb6:	str	r0, [sp, #28]
    7fb8:	bl	8e80 <__mcmp>
    7fbc:	cmp	r0, #0
    7fbe:	ble.w	84da <_dtoa_r+0xa22>
    7fc2:	ldrb.w	r2, [fp, #-1]
    7fc6:	ldr	r1, [sp, #32]
    7fc8:	add.w	r3, fp, #4294967295
    7fcc:	b.n	7fd8 <_dtoa_r+0x520>
    7fce:	cmp	r3, r1
    7fd0:	beq.w	83da <_dtoa_r+0x922>
    7fd4:	ldrb.w	r2, [r3, #-1]!
    7fd8:	cmp	r2, #57	; 0x39
    7fda:	add.w	fp, r3, #1
    7fde:	beq.n	7fce <_dtoa_r+0x516>
    7fe0:	adds	r2, #1
    7fe2:	strb	r2, [r3, #0]
    7fe4:	ldr	r1, [sp, #20]
    7fe6:	mov	r0, r4
    7fe8:	bl	8abc <_Bfree>
    7fec:	cmp	r6, #0
    7fee:	beq.w	7d84 <_dtoa_r+0x2cc>
    7ff2:	cmp.w	sl, #0
    7ff6:	beq.n	8004 <_dtoa_r+0x54c>
    7ff8:	cmp	sl, r6
    7ffa:	beq.n	8004 <_dtoa_r+0x54c>
    7ffc:	mov	r1, sl
    7ffe:	mov	r0, r4
    8000:	bl	8abc <_Bfree>
    8004:	mov	r1, r6
    8006:	mov	r0, r4
    8008:	bl	8abc <_Bfree>
    800c:	b.n	7d84 <_dtoa_r+0x2cc>
    800e:	rsb	r3, r3, #32
    8012:	lsl.w	r3, sl, r3
    8016:	vmov	s15, r3
    801a:	b.n	7ba0 <_dtoa_r+0xe8>
    801c:	movs	r3, #0
    801e:	str	r3, [sp, #48]	; 0x30
    8020:	b.n	7c18 <_dtoa_r+0x160>
    8022:	movs	r3, #0
    8024:	str	r3, [sp, #36]	; 0x24
    8026:	ldr	r3, [sp, #8]
    8028:	add	r3, r8
    802a:	adds	r7, r3, #1
    802c:	cmp	r7, #0
    802e:	str	r3, [sp, #52]	; 0x34
    8030:	ble.w	848e <_dtoa_r+0x9d6>
    8034:	mov	r6, r7
    8036:	mov	r5, r7
    8038:	movs	r1, #0
    803a:	cmp	r6, #23
    803c:	str	r1, [r4, #68]	; 0x44
    803e:	bls.n	8056 <_dtoa_r+0x59e>
    8040:	movs	r2, #1
    8042:	movs	r3, #4
    8044:	lsls	r3, r3, #1
    8046:	add.w	r0, r3, #20
    804a:	cmp	r0, r6
    804c:	mov	r1, r2
    804e:	add.w	r2, r2, #1
    8052:	bls.n	8044 <_dtoa_r+0x58c>
    8054:	str	r1, [r4, #68]	; 0x44
    8056:	mov	r0, r4
    8058:	bl	8a70 <_Balloc>
    805c:	cmp	r5, #14
    805e:	str	r0, [sp, #32]
    8060:	str	r0, [r4, #64]	; 0x40
    8062:	bhi.w	7cb2 <_dtoa_r+0x1fa>
    8066:	ldr	r3, [sp, #56]	; 0x38
    8068:	cmp	r3, #0
    806a:	beq.w	7cb2 <_dtoa_r+0x1fa>
    806e:	ldr	r1, [sp, #8]
    8070:	cmp	r1, #0
    8072:	strd	sl, fp, [sp, #56]	; 0x38
    8076:	ble.w	84fc <_dtoa_r+0xa44>
    807a:	ldr	r3, [pc, #792]	; (8394 <_dtoa_r+0x8dc>)
    807c:	and.w	r2, r1, #15
    8080:	add.w	r2, r3, r2, lsl #3
    8084:	asrs	r3, r1, #4
    8086:	lsls	r6, r3, #27
    8088:	vldr	d6, [r2]
    808c:	bpl.w	8486 <_dtoa_r+0x9ce>
    8090:	ldr	r2, [pc, #772]	; (8398 <_dtoa_r+0x8e0>)
    8092:	vldr	d7, [r2, #32]
    8096:	vmov	d4, sl, fp
    809a:	and.w	r3, r3, #15
    809e:	movs	r1, #3
    80a0:	vdiv.f64	d5, d4, d7
    80a4:	cbz	r3, 80be <_dtoa_r+0x606>
    80a6:	ldr	r2, [pc, #752]	; (8398 <_dtoa_r+0x8e0>)
    80a8:	lsls	r5, r3, #31
    80aa:	bpl.n	80b6 <_dtoa_r+0x5fe>
    80ac:	vldr	d7, [r2]
    80b0:	adds	r1, #1
    80b2:	vmul.f64	d6, d6, d7
    80b6:	asrs	r3, r3, #1
    80b8:	add.w	r2, r2, #8
    80bc:	bne.n	80a8 <_dtoa_r+0x5f0>
    80be:	vdiv.f64	d4, d5, d6
    80c2:	ldr	r3, [sp, #48]	; 0x30
    80c4:	cbz	r3, 80d6 <_dtoa_r+0x61e>
    80c6:	vmov.f64	d7, #112	; 0x3f800000  1.0
    80ca:	vcmpe.f64	d4, d7
    80ce:	vmrs	APSR_nzcv, fpscr
    80d2:	bmi.w	8644 <_dtoa_r+0xb8c>
    80d6:	vmov	s15, r1
    80da:	vcvt.f64.s32	d6, s15
    80de:	vmov.f64	d7, #28	; 0x40e00000  7.0
    80e2:	vfma.f64	d7, d6, d4
    80e6:	vmov	r2, r3, d7
    80ea:	sub.w	r3, r3, #54525952	; 0x3400000
    80ee:	cmp	r7, #0
    80f0:	beq.w	8440 <_dtoa_r+0x988>
    80f4:	ldr	r6, [sp, #8]
    80f6:	mov	r1, r7
    80f8:	ldr	r0, [sp, #36]	; 0x24
    80fa:	cmp	r0, #0
    80fc:	beq.w	859a <_dtoa_r+0xae2>
    8100:	vmov.f64	d3, #96	; 0x3f000000  0.5
    8104:	ldr	r0, [pc, #652]	; (8394 <_dtoa_r+0x8dc>)
    8106:	ldr	r5, [sp, #32]
    8108:	add.w	r0, r0, r1, lsl #3
    810c:	vldr	d6, [r0, #-8]
    8110:	vcvt.s32.f64	s14, d4
    8114:	vdiv.f64	d5, d3, d6
    8118:	vmov	r0, s14
    811c:	vmov	d6, r2, r3
    8120:	adds	r0, #48	; 0x30
    8122:	uxtb	r0, r0
    8124:	vsub.f64	d5, d5, d6
    8128:	vcvt.f64.s32	d7, s14
    812c:	vsub.f64	d7, d4, d7
    8130:	vcmpe.f64	d5, d7
    8134:	vmrs	APSR_nzcv, fpscr
    8138:	strb	r0, [r5, #0]
    813a:	add.w	fp, r5, #1
    813e:	bgt.n	81a6 <_dtoa_r+0x6ee>
    8140:	vmov.f64	d3, #112	; 0x3f800000  1.0
    8144:	vsub.f64	d6, d3, d7
    8148:	vcmpe.f64	d5, d6
    814c:	vmrs	APSR_nzcv, fpscr
    8150:	bgt.w	86b0 <_dtoa_r+0xbf8>
    8154:	cmp	r1, #1
    8156:	ble.w	84f4 <_dtoa_r+0xa3c>
    815a:	vmov.f64	d4, #36	; 0x41200000  10.0
    815e:	ldr	r3, [sp, #32]
    8160:	add	r1, r3
    8162:	b.n	817a <_dtoa_r+0x6c2>
    8164:	vsub.f64	d6, d3, d7
    8168:	vcmpe.f64	d6, d5
    816c:	vmrs	APSR_nzcv, fpscr
    8170:	bmi.w	86b0 <_dtoa_r+0xbf8>
    8174:	cmp	fp, r1
    8176:	beq.w	84f4 <_dtoa_r+0xa3c>
    817a:	vmul.f64	d7, d7, d4
    817e:	vmul.f64	d5, d5, d4
    8182:	vcvt.s32.f64	s12, d7
    8186:	vmov	r3, s12
    818a:	add.w	r0, r3, #48	; 0x30
    818e:	uxtb	r0, r0
    8190:	vcvt.f64.s32	d6, s12
    8194:	vsub.f64	d7, d7, d6
    8198:	vcmpe.f64	d7, d5
    819c:	vmrs	APSR_nzcv, fpscr
    81a0:	strb.w	r0, [fp], #1
    81a4:	bpl.n	8164 <_dtoa_r+0x6ac>
    81a6:	str	r6, [sp, #8]
    81a8:	b.n	7d84 <_dtoa_r+0x2cc>
    81aa:	movs	r3, #0
    81ac:	str	r3, [sp, #36]	; 0x24
    81ae:	cmp.w	r8, #0
    81b2:	ble.w	8496 <_dtoa_r+0x9de>
    81b6:	mov	r6, r8
    81b8:	mov	r5, r8
    81ba:	str.w	r8, [sp, #52]	; 0x34
    81be:	mov	r7, r8
    81c0:	b.n	8038 <_dtoa_r+0x580>
    81c2:	movs	r3, #1
    81c4:	str	r3, [sp, #36]	; 0x24
    81c6:	b.n	81ae <_dtoa_r+0x6f6>
    81c8:	str	r5, [sp, #28]
    81ca:	ldr	r2, [sp, #20]
    81cc:	ldr	r1, [sp, #28]
    81ce:	mov	r0, r4
    81d0:	bl	8d30 <__pow5mult>
    81d4:	mov	r5, r0
    81d6:	b.n	7ec8 <_dtoa_r+0x410>
    81d8:	cmp	r7, #0
    81da:	bgt.w	7cd0 <_dtoa_r+0x218>
    81de:	bne.w	8466 <_dtoa_r+0x9ae>
    81e2:	vmov.f64	d7, #20	; 0x40a00000  5.0
    81e6:	vmul.f64	d4, d4, d7
    81ea:	vmov	d7, sl, fp
    81ee:	vcmpe.f64	d4, d7
    81f2:	vmrs	APSR_nzcv, fpscr
    81f6:	mov	r6, r7
    81f8:	str	r7, [sp, #20]
    81fa:	blt.w	83c8 <_dtoa_r+0x910>
    81fe:	mvn.w	r3, r8
    8202:	ldr.w	fp, [sp, #32]
    8206:	str	r3, [sp, #8]
    8208:	ldr	r1, [sp, #20]
    820a:	mov	r0, r4
    820c:	bl	8abc <_Bfree>
    8210:	cmp	r6, #0
    8212:	beq.w	7d84 <_dtoa_r+0x2cc>
    8216:	b.n	8004 <_dtoa_r+0x54c>
    8218:	ldr	r2, [sp, #40]	; 0x28
    821a:	cmp	r2, #0
    821c:	beq.w	8624 <_dtoa_r+0xb6c>
    8220:	ldr	r2, [sp, #20]
    8222:	str	r2, [sp, #56]	; 0x38
    8224:	ldr	r2, [sp, #24]
    8226:	str	r2, [sp, #40]	; 0x28
    8228:	addw	r3, r3, #1075	; 0x433
    822c:	b.n	7dd6 <_dtoa_r+0x31e>
    822e:	movs	r0, #28
    8230:	b.n	7f1c <_dtoa_r+0x464>
    8232:	ldr	r3, [sp, #4]
    8234:	cmp	r3, #1
    8236:	ble.w	86ba <_dtoa_r+0xc02>
    823a:	ldr	r3, [sp, #44]	; 0x2c
    823c:	str	r3, [sp, #28]
    823e:	movs	r0, #1
    8240:	b.n	7f04 <_dtoa_r+0x44c>
    8242:	mov	r1, r6
    8244:	movs	r3, #0
    8246:	movs	r2, #10
    8248:	mov	r0, r4
    824a:	bl	8ad0 <__multadd>
    824e:	ldr	r3, [sp, #52]	; 0x34
    8250:	cmp	r3, #0
    8252:	mov	r6, r0
    8254:	ble.w	86f2 <_dtoa_r+0xc3a>
    8258:	mov	r7, r3
    825a:	ldr	r3, [sp, #40]	; 0x28
    825c:	cmp	r3, #0
    825e:	ble.n	826c <_dtoa_r+0x7b4>
    8260:	mov	r1, r6
    8262:	mov	r2, r3
    8264:	mov	r0, r4
    8266:	bl	8dd0 <__lshift>
    826a:	mov	r6, r0
    826c:	ldr	r3, [sp, #28]
    826e:	cmp	r3, #0
    8270:	bne.w	8550 <_dtoa_r+0xa98>
    8274:	mov	r8, r6
    8276:	ldr	r3, [sp, #32]
    8278:	subs	r7, #1
    827a:	adds	r2, r3, r7
    827c:	str	r2, [sp, #36]	; 0x24
    827e:	and.w	r2, sl, #1
    8282:	str	r2, [sp, #40]	; 0x28
    8284:	mov	r7, r3
    8286:	ldr.w	fp, [sp, #20]
    828a:	mov	r0, r5
    828c:	mov	r1, fp
    828e:	bl	7990 <quorem>
    8292:	mov	r1, r6
    8294:	mov	sl, r0
    8296:	mov	r0, r5
    8298:	bl	8e80 <__mcmp>
    829c:	mov	r2, r8
    829e:	mov	r1, fp
    82a0:	mov	r9, r0
    82a2:	mov	r0, r4
    82a4:	bl	8ec4 <__mdiff>
    82a8:	ldr	r3, [r0, #12]
    82aa:	mov	fp, r0
    82ac:	add.w	r2, sl, #48	; 0x30
    82b0:	cmp	r3, #0
    82b2:	bne.n	8348 <_dtoa_r+0x890>
    82b4:	mov	r1, r0
    82b6:	mov	r0, r5
    82b8:	str	r2, [sp, #28]
    82ba:	bl	8e80 <__mcmp>
    82be:	mov	r1, fp
    82c0:	str	r0, [sp, #24]
    82c2:	mov	r0, r4
    82c4:	bl	8abc <_Bfree>
    82c8:	ldr	r3, [sp, #24]
    82ca:	ldr	r2, [sp, #28]
    82cc:	cbnz	r3, 82da <_dtoa_r+0x822>
    82ce:	ldr	r1, [sp, #4]
    82d0:	cbnz	r1, 82da <_dtoa_r+0x822>
    82d2:	ldr	r1, [sp, #40]	; 0x28
    82d4:	cmp	r1, #0
    82d6:	beq.w	86c4 <_dtoa_r+0xc0c>
    82da:	cmp.w	r9, #0
    82de:	blt.w	84a0 <_dtoa_r+0x9e8>
    82e2:	bne.n	82f0 <_dtoa_r+0x838>
    82e4:	ldr	r1, [sp, #4]
    82e6:	cbnz	r1, 82f0 <_dtoa_r+0x838>
    82e8:	ldr	r1, [sp, #40]	; 0x28
    82ea:	cmp	r1, #0
    82ec:	beq.w	84a0 <_dtoa_r+0x9e8>
    82f0:	cmp	r3, #0
    82f2:	bgt.w	8578 <_dtoa_r+0xac0>
    82f6:	ldr	r3, [sp, #36]	; 0x24
    82f8:	strb	r2, [r7, #0]
    82fa:	add.w	r9, r7, #1
    82fe:	cmp	r7, r3
    8300:	mov	fp, r9
    8302:	beq.w	8592 <_dtoa_r+0xada>
    8306:	mov	r1, r5
    8308:	movs	r3, #0
    830a:	movs	r2, #10
    830c:	mov	r0, r4
    830e:	bl	8ad0 <__multadd>
    8312:	cmp	r6, r8
    8314:	mov	r5, r0
    8316:	mov	r1, r6
    8318:	mov.w	r3, #0
    831c:	mov.w	r2, #10
    8320:	mov	r0, r4
    8322:	beq.n	833c <_dtoa_r+0x884>
    8324:	bl	8ad0 <__multadd>
    8328:	mov	r1, r8
    832a:	mov	r6, r0
    832c:	movs	r3, #0
    832e:	movs	r2, #10
    8330:	mov	r0, r4
    8332:	bl	8ad0 <__multadd>
    8336:	mov	r7, r9
    8338:	mov	r8, r0
    833a:	b.n	8286 <_dtoa_r+0x7ce>
    833c:	bl	8ad0 <__multadd>
    8340:	mov	r7, r9
    8342:	mov	r6, r0
    8344:	mov	r8, r0
    8346:	b.n	8286 <_dtoa_r+0x7ce>
    8348:	mov	r1, r0
    834a:	mov	r0, r4
    834c:	str	r2, [sp, #24]
    834e:	bl	8abc <_Bfree>
    8352:	movs	r3, #1
    8354:	ldr	r2, [sp, #24]
    8356:	b.n	82da <_dtoa_r+0x822>
    8358:	ldr	r1, [sp, #20]
    835a:	mov	r0, r5
    835c:	bl	8e80 <__mcmp>
    8360:	cmp	r0, #0
    8362:	bge.w	7f56 <_dtoa_r+0x49e>
    8366:	mov	r1, r5
    8368:	ldr	r5, [sp, #8]
    836a:	movs	r3, #0
    836c:	subs	r5, #1
    836e:	movs	r2, #10
    8370:	mov	r0, r4
    8372:	str	r5, [sp, #8]
    8374:	bl	8ad0 <__multadd>
    8378:	ldr	r3, [sp, #36]	; 0x24
    837a:	mov	r5, r0
    837c:	cmp	r3, #0
    837e:	bne.w	8242 <_dtoa_r+0x78a>
    8382:	ldr	r3, [sp, #52]	; 0x34
    8384:	cmp	r3, #0
    8386:	ble.w	86e4 <_dtoa_r+0xc2c>
    838a:	mov	r7, r3
    838c:	b.n	7f64 <_dtoa_r+0x4ac>
    838e:	ldr	r5, [sp, #28]
    8390:	b.n	7ec8 <_dtoa_r+0x410>
    8392:	nop
    8394:	.word	0x20000948
    8398:	.word	0x20000a10
    839c:	ldr	r3, [sp, #4]
    839e:	cmp	r3, #2
    83a0:	ble.w	7f5c <_dtoa_r+0x4a4>
    83a4:	cmp	r7, #0
    83a6:	bne.w	867c <_dtoa_r+0xbc4>
    83aa:	mov	r3, r7
    83ac:	ldr	r1, [sp, #20]
    83ae:	movs	r2, #5
    83b0:	mov	r0, r4
    83b2:	bl	8ad0 <__multadd>
    83b6:	mov	r1, r0
    83b8:	str	r0, [sp, #20]
    83ba:	mov	r0, r5
    83bc:	bl	8e80 <__mcmp>
    83c0:	cmp	r0, #0
    83c2:	str	r5, [sp, #28]
    83c4:	ble.w	81fe <_dtoa_r+0x746>
    83c8:	ldr	r2, [sp, #8]
    83ca:	ldr	r1, [sp, #32]
    83cc:	movs	r3, #49	; 0x31
    83ce:	adds	r2, #1
    83d0:	str	r2, [sp, #8]
    83d2:	strb	r3, [r1, #0]
    83d4:	add.w	fp, r1, #1
    83d8:	b.n	8208 <_dtoa_r+0x750>
    83da:	ldr	r2, [sp, #8]
    83dc:	adds	r2, #1
    83de:	str	r2, [sp, #8]
    83e0:	ldr	r2, [sp, #32]
    83e2:	movs	r3, #49	; 0x31
    83e4:	strb	r3, [r2, #0]
    83e6:	b.n	7fe4 <_dtoa_r+0x52c>
    83e8:	movs	r3, #1
    83ea:	str	r3, [sp, #36]	; 0x24
    83ec:	b.n	8026 <_dtoa_r+0x56e>
    83ee:	cmp.w	sl, #0
    83f2:	bne.w	7eee <_dtoa_r+0x436>
    83f6:	ubfx	r3, fp, #0, #20
    83fa:	cmp	r3, #0
    83fc:	bne.w	8636 <_dtoa_r+0xb7e>
    8400:	bic.w	r3, fp, #2147483648	; 0x80000000
    8404:	lsrs	r3, r3, #20
    8406:	lsls	r3, r3, #20
    8408:	cmp	r3, #0
    840a:	beq.w	86b6 <_dtoa_r+0xbfe>
    840e:	ldr	r3, [sp, #24]
    8410:	adds	r3, #1
    8412:	str	r3, [sp, #24]
    8414:	movs	r3, #1
    8416:	add.w	r9, r9, #1
    841a:	str	r3, [sp, #28]
    841c:	ldr	r3, [sp, #44]	; 0x2c
    841e:	movs	r0, #1
    8420:	cmp	r3, #0
    8422:	beq.w	7f04 <_dtoa_r+0x44c>
    8426:	b.n	7ef2 <_dtoa_r+0x43a>
    8428:	vmov	s15, r1
    842c:	vcvt.f64.s32	d6, s15
    8430:	vmov.f64	d7, #28	; 0x40e00000  7.0
    8434:	vfma.f64	d7, d4, d6
    8438:	vmov	r2, r3, d7
    843c:	sub.w	r3, r3, #54525952	; 0x3400000
    8440:	vmov	d6, r2, r3
    8444:	vmov.f64	d7, #20	; 0x40a00000  5.0
    8448:	vsub.f64	d7, d4, d7
    844c:	vcmpe.f64	d7, d6
    8450:	vmrs	APSR_nzcv, fpscr
    8454:	bgt.w	8612 <_dtoa_r+0xb5a>
    8458:	vneg.f64	d6, d6
    845c:	vcmpe.f64	d7, d6
    8460:	vmrs	APSR_nzcv, fpscr
    8464:	bpl.n	84f4 <_dtoa_r+0xa3c>
    8466:	movs	r3, #0
    8468:	str	r3, [sp, #20]
    846a:	mov	r6, r3
    846c:	b.n	81fe <_dtoa_r+0x746>
    846e:	ldr	r0, [sp, #32]
    8470:	b.w	7b26 <_dtoa_r+0x6e>
    8474:	ldr	r3, [sp, #20]
    8476:	ldr	r1, [sp, #44]	; 0x2c
    8478:	str	r2, [sp, #20]
    847a:	subs	r3, r2, r3
    847c:	add	r1, r3
    847e:	movs	r3, #0
    8480:	str	r1, [sp, #44]	; 0x2c
    8482:	str	r3, [sp, #56]	; 0x38
    8484:	b.n	7dca <_dtoa_r+0x312>
    8486:	vldr	d5, [sp, #56]	; 0x38
    848a:	movs	r1, #2
    848c:	b.n	80a4 <_dtoa_r+0x5ec>
    848e:	mov	r5, r7
    8490:	movs	r1, #0
    8492:	str	r1, [r4, #68]	; 0x44
    8494:	b.n	8056 <_dtoa_r+0x59e>
    8496:	movs	r5, #1
    8498:	str	r5, [sp, #52]	; 0x34
    849a:	mov	r7, r5
    849c:	mov	r8, r5
    849e:	b.n	8490 <_dtoa_r+0x9d8>
    84a0:	cmp	r3, #0
    84a2:	mov	r9, r2
    84a4:	ble.n	84ca <_dtoa_r+0xa12>
    84a6:	mov	r1, r5
    84a8:	movs	r2, #1
    84aa:	mov	r0, r4
    84ac:	bl	8dd0 <__lshift>
    84b0:	ldr	r1, [sp, #20]
    84b2:	mov	r5, r0
    84b4:	bl	8e80 <__mcmp>
    84b8:	cmp	r0, #0
    84ba:	ble.w	86d6 <_dtoa_r+0xc1e>
    84be:	cmp.w	r9, #57	; 0x39
    84c2:	beq.w	8680 <_dtoa_r+0xbc8>
    84c6:	add.w	r9, sl, #49	; 0x31
    84ca:	mov	sl, r6
    84cc:	strb.w	r9, [r7]
    84d0:	add.w	fp, r7, #1
    84d4:	mov	r6, r8
    84d6:	str	r5, [sp, #28]
    84d8:	b.n	7fe4 <_dtoa_r+0x52c>
    84da:	bne.n	84e6 <_dtoa_r+0xa2e>
    84dc:	tst.w	r9, #1
    84e0:	beq.n	84e6 <_dtoa_r+0xa2e>
    84e2:	b.n	7fc2 <_dtoa_r+0x50a>
    84e4:	mov	fp, r2
    84e6:	ldrb.w	r3, [fp, #-1]
    84ea:	cmp	r3, #48	; 0x30
    84ec:	add.w	r2, fp, #4294967295
    84f0:	beq.n	84e4 <_dtoa_r+0xa2c>
    84f2:	b.n	7fe4 <_dtoa_r+0x52c>
    84f4:	ldrd	sl, fp, [sp, #56]	; 0x38
    84f8:	b.w	7cb2 <_dtoa_r+0x1fa>
    84fc:	ldr	r3, [sp, #8]
    84fe:	negs	r3, r3
    8500:	cmp	r3, #0
    8502:	beq.w	863c <_dtoa_r+0xb84>
    8506:	ldr	r2, [pc, #556]	; (8734 <_dtoa_r+0xc7c>)
    8508:	and.w	r1, r3, #15
    850c:	add.w	r2, r2, r1, lsl #3
    8510:	vldr	d7, [r2]
    8514:	vldr	d6, [sp, #56]	; 0x38
    8518:	asrs	r3, r3, #4
    851a:	vmul.f64	d4, d6, d7
    851e:	beq.w	86ee <_dtoa_r+0xc36>
    8522:	ldr	r2, [pc, #532]	; (8738 <_dtoa_r+0xc80>)
    8524:	movs	r1, #2
    8526:	lsls	r0, r3, #31
    8528:	bpl.n	8534 <_dtoa_r+0xa7c>
    852a:	vldr	d7, [r2]
    852e:	adds	r1, #1
    8530:	vmul.f64	d4, d4, d7
    8534:	asrs	r3, r3, #1
    8536:	add.w	r2, r2, #8
    853a:	bne.n	8526 <_dtoa_r+0xa6e>
    853c:	b.n	80c2 <_dtoa_r+0x60a>
    853e:	ldr	r1, [sp, #32]
    8540:	movs	r2, #48	; 0x30
    8542:	strb	r2, [r1, #0]
    8544:	ldr	r2, [sp, #8]
    8546:	ldrb.w	r0, [fp, #-1]
    854a:	adds	r2, #1
    854c:	str	r2, [sp, #8]
    854e:	b.n	7d80 <_dtoa_r+0x2c8>
    8550:	ldr	r1, [r6, #4]
    8552:	mov	r0, r4
    8554:	bl	8a70 <_Balloc>
    8558:	ldr	r3, [r6, #16]
    855a:	adds	r2, r3, #2
    855c:	mov	r8, r0
    855e:	lsls	r2, r2, #2
    8560:	add.w	r1, r6, #12
    8564:	adds	r0, #12
    8566:	bl	249c <memcpy>
    856a:	mov	r1, r8
    856c:	movs	r2, #1
    856e:	mov	r0, r4
    8570:	bl	8dd0 <__lshift>
    8574:	mov	r8, r0
    8576:	b.n	8276 <_dtoa_r+0x7be>
    8578:	cmp	r2, #57	; 0x39
    857a:	beq.w	8680 <_dtoa_r+0xbc8>
    857e:	add.w	r9, r2, #1
    8582:	mov	sl, r6
    8584:	strb.w	r9, [r7]
    8588:	add.w	fp, r7, #1
    858c:	mov	r6, r8
    858e:	str	r5, [sp, #28]
    8590:	b.n	7fe4 <_dtoa_r+0x52c>
    8592:	mov	sl, r6
    8594:	mov	r9, r2
    8596:	mov	r6, r8
    8598:	b.n	7faa <_dtoa_r+0x4f2>
    859a:	ldr	r0, [pc, #408]	; (8734 <_dtoa_r+0xc7c>)
    859c:	vcvt.s32.f64	s12, d4
    85a0:	subs	r5, r1, #1
    85a2:	add.w	r0, r0, r5, lsl #3
    85a6:	vmov	d7, r2, r3
    85aa:	vldr	d3, [r0]
    85ae:	vmov	r3, s12
    85b2:	vmul.f64	d3, d3, d7
    85b6:	ldr	r0, [sp, #32]
    85b8:	adds	r3, #48	; 0x30
    85ba:	cmp	r1, #1
    85bc:	vcvt.f64.s32	d6, s12
    85c0:	strb	r3, [r0, #0]
    85c2:	add.w	fp, r0, #1
    85c6:	vsub.f64	d7, d4, d6
    85ca:	beq.n	85f6 <_dtoa_r+0xb3e>
    85cc:	vmov.f64	d5, #36	; 0x41200000  10.0
    85d0:	ldr	r3, [sp, #32]
    85d2:	add	r1, r3
    85d4:	mov	r3, fp
    85d6:	vmul.f64	d7, d7, d5
    85da:	vcvt.s32.f64	s12, d7
    85de:	vmov	r2, s12
    85e2:	adds	r2, #48	; 0x30
    85e4:	strb.w	r2, [r3], #1
    85e8:	cmp	r1, r3
    85ea:	vcvt.f64.s32	d6, s12
    85ee:	vsub.f64	d7, d7, d6
    85f2:	bne.n	85d6 <_dtoa_r+0xb1e>
    85f4:	add	fp, r5
    85f6:	vmov.f64	d6, #96	; 0x3f000000  0.5
    85fa:	vadd.f64	d5, d3, d6
    85fe:	vcmpe.f64	d5, d7
    8602:	vmrs	APSR_nzcv, fpscr
    8606:	bpl.n	8690 <_dtoa_r+0xbd8>
    8608:	str	r6, [sp, #8]
    860a:	ldrb.w	r0, [fp, #-1]
    860e:	b.w	7d66 <_dtoa_r+0x2ae>
    8612:	movs	r3, #0
    8614:	str	r3, [sp, #20]
    8616:	mov	r6, r3
    8618:	b.n	83c8 <_dtoa_r+0x910>
    861a:	subs	r3, r3, r7
    861c:	str	r3, [sp, #40]	; 0x28
    861e:	movs	r3, #0
    8620:	b.w	7dd6 <_dtoa_r+0x31e>
    8624:	ldr	r2, [sp, #20]
    8626:	ldr	r3, [sp, #64]	; 0x40
    8628:	str	r2, [sp, #56]	; 0x38
    862a:	ldr	r2, [sp, #24]
    862c:	str	r2, [sp, #40]	; 0x28
    862e:	rsb	r3, r3, #54	; 0x36
    8632:	b.w	7dd6 <_dtoa_r+0x31e>
    8636:	movs	r3, #0
    8638:	str	r3, [sp, #28]
    863a:	b.n	841c <_dtoa_r+0x964>
    863c:	vldr	d4, [sp, #56]	; 0x38
    8640:	movs	r1, #2
    8642:	b.n	80c2 <_dtoa_r+0x60a>
    8644:	cmp	r7, #0
    8646:	beq.w	8428 <_dtoa_r+0x970>
    864a:	ldr	r0, [sp, #52]	; 0x34
    864c:	cmp	r0, #0
    864e:	ble.w	84f4 <_dtoa_r+0xa3c>
    8652:	vmov.f64	d5, #36	; 0x41200000  10.0
    8656:	vmov.f64	d7, #28	; 0x40e00000  7.0
    865a:	adds	r1, #1
    865c:	vmov	s13, r1
    8660:	vmul.f64	d4, d4, d5
    8664:	ldr	r3, [sp, #8]
    8666:	vcvt.f64.s32	d6, s13
    866a:	subs	r6, r3, #1
    866c:	vfma.f64	d7, d4, d6
    8670:	vmov	r2, r3, d7
    8674:	mov	r1, r0
    8676:	sub.w	r3, r3, #54525952	; 0x3400000
    867a:	b.n	80f8 <_dtoa_r+0x640>
    867c:	str	r5, [sp, #28]
    867e:	b.n	81fe <_dtoa_r+0x746>
    8680:	movs	r2, #57	; 0x39
    8682:	mov	sl, r6
    8684:	str	r5, [sp, #28]
    8686:	mov	r6, r8
    8688:	strb	r2, [r7, #0]
    868a:	add.w	fp, r7, #1
    868e:	b.n	7fc6 <_dtoa_r+0x50e>
    8690:	vsub.f64	d6, d6, d3
    8694:	vcmpe.f64	d6, d7
    8698:	vmrs	APSR_nzcv, fpscr
    869c:	bgt.n	86a2 <_dtoa_r+0xbea>
    869e:	b.n	84f4 <_dtoa_r+0xa3c>
    86a0:	mov	fp, r2
    86a2:	ldrb.w	r3, [fp, #-1]
    86a6:	cmp	r3, #48	; 0x30
    86a8:	add.w	r2, fp, #4294967295
    86ac:	beq.n	86a0 <_dtoa_r+0xbe8>
    86ae:	b.n	81a6 <_dtoa_r+0x6ee>
    86b0:	str	r6, [sp, #8]
    86b2:	b.w	7d66 <_dtoa_r+0x2ae>
    86b6:	str	r3, [sp, #28]
    86b8:	b.n	841c <_dtoa_r+0x964>
    86ba:	cmp.w	sl, #0
    86be:	bne.w	823a <_dtoa_r+0x782>
    86c2:	b.n	83f6 <_dtoa_r+0x93e>
    86c4:	cmp	r2, #57	; 0x39
    86c6:	mov	fp, r9
    86c8:	mov	r9, r2
    86ca:	beq.n	8680 <_dtoa_r+0xbc8>
    86cc:	cmp.w	fp, #0
    86d0:	bgt.w	84c6 <_dtoa_r+0xa0e>
    86d4:	b.n	84ca <_dtoa_r+0xa12>
    86d6:	bne.w	84ca <_dtoa_r+0xa12>
    86da:	tst.w	r9, #1
    86de:	beq.w	84ca <_dtoa_r+0xa12>
    86e2:	b.n	84be <_dtoa_r+0xa06>
    86e4:	ldr	r3, [sp, #4]
    86e6:	cmp	r3, #2
    86e8:	bgt.n	86fc <_dtoa_r+0xc44>
    86ea:	ldr	r7, [sp, #52]	; 0x34
    86ec:	b.n	7f64 <_dtoa_r+0x4ac>
    86ee:	movs	r1, #2
    86f0:	b.n	80c2 <_dtoa_r+0x60a>
    86f2:	ldr	r3, [sp, #4]
    86f4:	cmp	r3, #2
    86f6:	bgt.n	86fc <_dtoa_r+0xc44>
    86f8:	ldr	r7, [sp, #52]	; 0x34
    86fa:	b.n	825a <_dtoa_r+0x7a2>
    86fc:	ldr	r7, [sp, #52]	; 0x34
    86fe:	b.n	83a4 <_dtoa_r+0x8ec>
    8700:	movs	r3, #1
    8702:	str	r3, [sp, #56]	; 0x38
    8704:	b.w	7c4a <_dtoa_r+0x192>
    8708:	beq.w	7f2a <_dtoa_r+0x472>
    870c:	rsb	r0, r0, #60	; 0x3c
    8710:	b.n	7f1c <_dtoa_r+0x464>
    8712:	movs	r5, #0
    8714:	str	r5, [r4, #68]	; 0x44
    8716:	mov	r1, r5
    8718:	mov	r0, r4
    871a:	bl	8a70 <_Balloc>
    871e:	mov.w	r7, #4294967295
    8722:	movs	r3, #1
    8724:	str	r0, [sp, #32]
    8726:	mov	r8, r5
    8728:	str	r0, [r4, #64]	; 0x40
    872a:	str	r7, [sp, #52]	; 0x34
    872c:	str	r3, [sp, #36]	; 0x24
    872e:	b.w	7cb2 <_dtoa_r+0x1fa>
    8732:	nop
    8734:	.word	0x20000948
    8738:	.word	0x20000a10

0000873c <_malloc_trim_r>:
    873c:	push	{r3, r4, r5, r6, r7, lr}
    873e:	ldr	r7, [pc, #140]	; (87cc <_malloc_trim_r+0x90>)
    8740:	mov	r4, r1
    8742:	mov	r6, r0
    8744:	bl	5dfc <__malloc_lock>
    8748:	ldr	r3, [r7, #8]
    874a:	ldr	r5, [r3, #4]
    874c:	bic.w	r5, r5, #3
    8750:	subs	r1, r5, r4
    8752:	addw	r1, r1, #4079	; 0xfef
    8756:	bic.w	r1, r1, #4080	; 0xff0
    875a:	bic.w	r1, r1, #15
    875e:	sub.w	r4, r1, #4096	; 0x1000
    8762:	cmp.w	r4, #4096	; 0x1000
    8766:	blt.n	8778 <_malloc_trim_r+0x3c>
    8768:	movs	r1, #0
    876a:	mov	r0, r6
    876c:	bl	61e4 <_sbrk_r>
    8770:	ldr	r3, [r7, #8]
    8772:	add	r3, r5
    8774:	cmp	r0, r3
    8776:	beq.n	8782 <_malloc_trim_r+0x46>
    8778:	mov	r0, r6
    877a:	bl	5e00 <__malloc_unlock>
    877e:	movs	r0, #0
    8780:	pop	{r3, r4, r5, r6, r7, pc}
    8782:	negs	r1, r4
    8784:	mov	r0, r6
    8786:	bl	61e4 <_sbrk_r>
    878a:	adds	r0, #1
    878c:	beq.n	87aa <_malloc_trim_r+0x6e>
    878e:	ldr	r3, [pc, #64]	; (87d0 <_malloc_trim_r+0x94>)
    8790:	ldr	r2, [r7, #8]
    8792:	ldr	r1, [r3, #0]
    8794:	subs	r5, r5, r4
    8796:	orr.w	r5, r5, #1
    879a:	mov	r0, r6
    879c:	subs	r1, r1, r4
    879e:	str	r5, [r2, #4]
    87a0:	str	r1, [r3, #0]
    87a2:	bl	5e00 <__malloc_unlock>
    87a6:	movs	r0, #1
    87a8:	pop	{r3, r4, r5, r6, r7, pc}
    87aa:	movs	r1, #0
    87ac:	mov	r0, r6
    87ae:	bl	61e4 <_sbrk_r>
    87b2:	ldr	r2, [r7, #8]
    87b4:	subs	r3, r0, r2
    87b6:	cmp	r3, #15
    87b8:	ble.n	8778 <_malloc_trim_r+0x3c>
    87ba:	ldr	r4, [pc, #24]	; (87d4 <_malloc_trim_r+0x98>)
    87bc:	ldr	r1, [pc, #16]	; (87d0 <_malloc_trim_r+0x94>)
    87be:	ldr	r4, [r4, #0]
    87c0:	orr.w	r3, r3, #1
    87c4:	subs	r0, r0, r4
    87c6:	str	r3, [r2, #4]
    87c8:	str	r0, [r1, #0]
    87ca:	b.n	8778 <_malloc_trim_r+0x3c>
    87cc:	.word	0x20001108
    87d0:	.word	0x20001b58
    87d4:	.word	0x20001514

000087d8 <_free_r>:
    87d8:	cmp	r1, #0
    87da:	beq.n	8868 <_free_r+0x90>
    87dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87e0:	mov	r5, r1
    87e2:	mov	r8, r0
    87e4:	bl	5dfc <__malloc_lock>
    87e8:	ldr.w	r7, [r5, #-4]
    87ec:	ldr	r1, [pc, #424]	; (8998 <_free_r+0x1c0>)
    87ee:	bic.w	r3, r7, #1
    87f2:	sub.w	r4, r5, #8
    87f6:	adds	r2, r4, r3
    87f8:	ldr	r6, [r1, #8]
    87fa:	ldr	r0, [r2, #4]
    87fc:	cmp	r2, r6
    87fe:	bic.w	r0, r0, #3
    8802:	beq.n	88ca <_free_r+0xf2>
    8804:	lsls	r6, r7, #31
    8806:	str	r0, [r2, #4]
    8808:	bmi.n	8822 <_free_r+0x4a>
    880a:	ldr.w	r7, [r5, #-8]
    880e:	subs	r4, r4, r7
    8810:	add.w	lr, r1, #8
    8814:	ldr	r5, [r4, #8]
    8816:	cmp	r5, lr
    8818:	add	r3, r7
    881a:	beq.n	88fc <_free_r+0x124>
    881c:	ldr	r7, [r4, #12]
    881e:	str	r7, [r5, #12]
    8820:	str	r5, [r7, #8]
    8822:	adds	r5, r2, r0
    8824:	ldr	r5, [r5, #4]
    8826:	lsls	r5, r5, #31
    8828:	bpl.n	88b0 <_free_r+0xd8>
    882a:	orr.w	r2, r3, #1
    882e:	str	r2, [r4, #4]
    8830:	str	r3, [r4, r3]
    8832:	cmp.w	r3, #512	; 0x200
    8836:	bcs.n	886a <_free_r+0x92>
    8838:	lsrs	r3, r3, #3
    883a:	adds	r2, r3, #1
    883c:	ldr	r5, [r1, #4]
    883e:	ldr.w	r7, [r1, r2, lsl #3]
    8842:	str	r7, [r4, #8]
    8844:	movs	r0, #1
    8846:	asrs	r3, r3, #2
    8848:	lsl.w	r3, r0, r3
    884c:	add.w	r0, r1, r2, lsl #3
    8850:	orrs	r5, r3
    8852:	subs	r0, #8
    8854:	str	r0, [r4, #12]
    8856:	str	r5, [r1, #4]
    8858:	str.w	r4, [r1, r2, lsl #3]
    885c:	str	r4, [r7, #12]
    885e:	mov	r0, r8
    8860:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8864:	b.w	5e00 <__malloc_unlock>
    8868:	bx	lr
    886a:	lsrs	r2, r3, #9
    886c:	cmp	r2, #4
    886e:	bhi.n	8918 <_free_r+0x140>
    8870:	lsrs	r2, r3, #6
    8872:	add.w	r7, r2, #57	; 0x39
    8876:	lsls	r7, r7, #1
    8878:	add.w	r5, r2, #56	; 0x38
    887c:	add.w	r0, r1, r7, lsl #2
    8880:	ldr.w	r2, [r1, r7, lsl #2]
    8884:	ldr	r1, [pc, #272]	; (8998 <_free_r+0x1c0>)
    8886:	subs	r0, #8
    8888:	cmp	r0, r2
    888a:	beq.n	8928 <_free_r+0x150>
    888c:	ldr	r1, [r2, #4]
    888e:	bic.w	r1, r1, #3
    8892:	cmp	r3, r1
    8894:	bcs.n	889c <_free_r+0xc4>
    8896:	ldr	r2, [r2, #8]
    8898:	cmp	r0, r2
    889a:	bne.n	888c <_free_r+0xb4>
    889c:	ldr	r0, [r2, #12]
    889e:	str	r0, [r4, #12]
    88a0:	str	r2, [r4, #8]
    88a2:	str	r4, [r0, #8]
    88a4:	str	r4, [r2, #12]
    88a6:	mov	r0, r8
    88a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    88ac:	b.w	5e00 <__malloc_unlock>
    88b0:	ldr	r5, [r2, #8]
    88b2:	ldr	r7, [pc, #232]	; (899c <_free_r+0x1c4>)
    88b4:	cmp	r5, r7
    88b6:	add	r3, r0
    88b8:	beq.n	893a <_free_r+0x162>
    88ba:	ldr	r0, [r2, #12]
    88bc:	str	r0, [r5, #12]
    88be:	orr.w	r2, r3, #1
    88c2:	str	r5, [r0, #8]
    88c4:	str	r2, [r4, #4]
    88c6:	str	r3, [r4, r3]
    88c8:	b.n	8832 <_free_r+0x5a>
    88ca:	lsls	r7, r7, #31
    88cc:	add	r3, r0
    88ce:	bmi.n	88e0 <_free_r+0x108>
    88d0:	ldr.w	r2, [r5, #-8]
    88d4:	subs	r4, r4, r2
    88d6:	add	r3, r2
    88d8:	ldr	r0, [r4, #8]
    88da:	ldr	r2, [r4, #12]
    88dc:	str	r2, [r0, #12]
    88de:	str	r0, [r2, #8]
    88e0:	ldr	r2, [pc, #188]	; (89a0 <_free_r+0x1c8>)
    88e2:	ldr	r2, [r2, #0]
    88e4:	orr.w	r0, r3, #1
    88e8:	cmp	r3, r2
    88ea:	str	r0, [r4, #4]
    88ec:	str	r4, [r1, #8]
    88ee:	bcc.n	885e <_free_r+0x86>
    88f0:	ldr	r3, [pc, #176]	; (89a4 <_free_r+0x1cc>)
    88f2:	mov	r0, r8
    88f4:	ldr	r1, [r3, #0]
    88f6:	bl	873c <_malloc_trim_r>
    88fa:	b.n	885e <_free_r+0x86>
    88fc:	adds	r1, r2, r0
    88fe:	ldr	r1, [r1, #4]
    8900:	lsls	r1, r1, #31
    8902:	bmi.n	898e <_free_r+0x1b6>
    8904:	ldr	r1, [r2, #8]
    8906:	ldr	r2, [r2, #12]
    8908:	str	r2, [r1, #12]
    890a:	add	r3, r0
    890c:	orr.w	r0, r3, #1
    8910:	str	r1, [r2, #8]
    8912:	str	r0, [r4, #4]
    8914:	str	r3, [r4, r3]
    8916:	b.n	885e <_free_r+0x86>
    8918:	cmp	r2, #20
    891a:	bhi.n	894c <_free_r+0x174>
    891c:	add.w	r7, r2, #92	; 0x5c
    8920:	lsls	r7, r7, #1
    8922:	add.w	r5, r2, #91	; 0x5b
    8926:	b.n	887c <_free_r+0xa4>
    8928:	asrs	r2, r5, #2
    892a:	ldr	r3, [r1, #4]
    892c:	movs	r5, #1
    892e:	lsl.w	r2, r5, r2
    8932:	orrs	r3, r2
    8934:	str	r3, [r1, #4]
    8936:	mov	r2, r0
    8938:	b.n	889e <_free_r+0xc6>
    893a:	orr.w	r2, r3, #1
    893e:	str	r4, [r1, #20]
    8940:	str	r4, [r1, #16]
    8942:	str	r5, [r4, #12]
    8944:	str	r5, [r4, #8]
    8946:	str	r2, [r4, #4]
    8948:	str	r3, [r4, r3]
    894a:	b.n	885e <_free_r+0x86>
    894c:	cmp	r2, #84	; 0x54
    894e:	bhi.n	895e <_free_r+0x186>
    8950:	lsrs	r2, r3, #12
    8952:	add.w	r7, r2, #111	; 0x6f
    8956:	lsls	r7, r7, #1
    8958:	add.w	r5, r2, #110	; 0x6e
    895c:	b.n	887c <_free_r+0xa4>
    895e:	cmp.w	r2, #340	; 0x154
    8962:	bhi.n	8972 <_free_r+0x19a>
    8964:	lsrs	r2, r3, #15
    8966:	add.w	r7, r2, #120	; 0x78
    896a:	lsls	r7, r7, #1
    896c:	add.w	r5, r2, #119	; 0x77
    8970:	b.n	887c <_free_r+0xa4>
    8972:	movw	r0, #1364	; 0x554
    8976:	cmp	r2, r0
    8978:	bhi.n	8988 <_free_r+0x1b0>
    897a:	lsrs	r2, r3, #18
    897c:	add.w	r7, r2, #125	; 0x7d
    8980:	lsls	r7, r7, #1
    8982:	add.w	r5, r2, #124	; 0x7c
    8986:	b.n	887c <_free_r+0xa4>
    8988:	movs	r7, #254	; 0xfe
    898a:	movs	r5, #126	; 0x7e
    898c:	b.n	887c <_free_r+0xa4>
    898e:	orr.w	r2, r3, #1
    8992:	str	r2, [r4, #4]
    8994:	str	r3, [r4, r3]
    8996:	b.n	885e <_free_r+0x86>
    8998:	.word	0x20001108
    899c:	.word	0x20001110
    89a0:	.word	0x20001510
    89a4:	.word	0x20001b54

000089a8 <_localeconv_r>:
    89a8:	ldr	r2, [pc, #16]	; (89bc <_localeconv_r+0x14>)
    89aa:	ldr	r3, [pc, #20]	; (89c0 <_localeconv_r+0x18>)
    89ac:	ldr	r2, [r2, #0]
    89ae:	ldr	r0, [r2, #52]	; 0x34
    89b0:	cmp	r0, #0
    89b2:	it	eq
    89b4:	moveq	r0, r3
    89b6:	adds	r0, #240	; 0xf0
    89b8:	bx	lr
    89ba:	nop
    89bc:	.word	0x20000f98
    89c0:	.word	0x20000f9c
	...

000089d0 <memchr>:
    89d0:	and.w	r1, r1, #255	; 0xff
    89d4:	cmp	r2, #16
    89d6:	blt.n	8a30 <memchr+0x60>
    89d8:	tst.w	r0, #7
    89dc:	beq.n	89f0 <memchr+0x20>
    89de:	ldrb.w	r3, [r0], #1
    89e2:	subs	r2, #1
    89e4:	cmp	r3, r1
    89e6:	beq.n	8a44 <memchr+0x74>
    89e8:	tst.w	r0, #7
    89ec:	cbz	r2, 8a40 <memchr+0x70>
    89ee:	bne.n	89de <memchr+0xe>
    89f0:	push	{r4, r5, r6, r7}
    89f2:	orr.w	r1, r1, r1, lsl #8
    89f6:	orr.w	r1, r1, r1, lsl #16
    89fa:	bic.w	r4, r2, #7
    89fe:	mvns.w	r7, #0
    8a02:	movs	r3, #0
    8a04:	ldrd	r5, r6, [r0], #8
    8a08:	subs	r4, #8
    8a0a:	eor.w	r5, r5, r1
    8a0e:	eor.w	r6, r6, r1
    8a12:	uadd8	r5, r5, r7
    8a16:	sel	r5, r3, r7
    8a1a:	uadd8	r6, r6, r7
    8a1e:	sel	r6, r5, r7
    8a22:	cbnz	r6, 8a48 <memchr+0x78>
    8a24:	bne.n	8a04 <memchr+0x34>
    8a26:	pop	{r4, r5, r6, r7}
    8a28:	and.w	r1, r1, #255	; 0xff
    8a2c:	and.w	r2, r2, #7
    8a30:	cbz	r2, 8a40 <memchr+0x70>
    8a32:	ldrb.w	r3, [r0], #1
    8a36:	subs	r2, #1
    8a38:	eor.w	r3, r3, r1
    8a3c:	cbz	r3, 8a44 <memchr+0x74>
    8a3e:	bne.n	8a32 <memchr+0x62>
    8a40:	movs	r0, #0
    8a42:	bx	lr
    8a44:	subs	r0, #1
    8a46:	bx	lr
    8a48:	cmp	r5, #0
    8a4a:	itte	eq
    8a4c:	moveq	r5, r6
    8a4e:	subeq	r0, #3
    8a50:	subne	r0, #7
    8a52:	tst.w	r5, #1
    8a56:	bne.n	8a68 <memchr+0x98>
    8a58:	adds	r0, #1
    8a5a:	tst.w	r5, #256	; 0x100
    8a5e:	ittt	eq
    8a60:	addeq	r0, #1
    8a62:	tsteq.w	r5, #98304	; 0x18000
    8a66:	addeq	r0, #1
    8a68:	pop	{r4, r5, r6, r7}
    8a6a:	subs	r0, #1
    8a6c:	bx	lr
    8a6e:	nop

00008a70 <_Balloc>:
    8a70:	ldr	r3, [r0, #76]	; 0x4c
    8a72:	push	{r4, r5, r6, lr}
    8a74:	mov	r5, r0
    8a76:	mov	r4, r1
    8a78:	cbz	r3, 8a8e <_Balloc+0x1e>
    8a7a:	ldr.w	r0, [r3, r4, lsl #2]
    8a7e:	cbz	r0, 8aa2 <_Balloc+0x32>
    8a80:	ldr	r2, [r0, #0]
    8a82:	str.w	r2, [r3, r4, lsl #2]
    8a86:	movs	r3, #0
    8a88:	str	r3, [r0, #16]
    8a8a:	str	r3, [r0, #12]
    8a8c:	pop	{r4, r5, r6, pc}
    8a8e:	movs	r2, #33	; 0x21
    8a90:	movs	r1, #4
    8a92:	bl	9194 <_calloc_r>
    8a96:	str	r0, [r5, #76]	; 0x4c
    8a98:	mov	r3, r0
    8a9a:	cmp	r0, #0
    8a9c:	bne.n	8a7a <_Balloc+0xa>
    8a9e:	movs	r0, #0
    8aa0:	pop	{r4, r5, r6, pc}
    8aa2:	movs	r1, #1
    8aa4:	lsl.w	r6, r1, r4
    8aa8:	adds	r2, r6, #5
    8aaa:	mov	r0, r5
    8aac:	lsls	r2, r2, #2
    8aae:	bl	9194 <_calloc_r>
    8ab2:	cmp	r0, #0
    8ab4:	beq.n	8a9e <_Balloc+0x2e>
    8ab6:	str	r4, [r0, #4]
    8ab8:	str	r6, [r0, #8]
    8aba:	b.n	8a86 <_Balloc+0x16>

00008abc <_Bfree>:
    8abc:	cbz	r1, 8acc <_Bfree+0x10>
    8abe:	ldr	r3, [r0, #76]	; 0x4c
    8ac0:	ldr	r2, [r1, #4]
    8ac2:	ldr.w	r0, [r3, r2, lsl #2]
    8ac6:	str	r0, [r1, #0]
    8ac8:	str.w	r1, [r3, r2, lsl #2]
    8acc:	bx	lr
    8ace:	nop

00008ad0 <__multadd>:
    8ad0:	push	{r4, r5, r6, r7, lr}
    8ad2:	ldr	r4, [r1, #16]
    8ad4:	sub	sp, #12
    8ad6:	mov	r5, r1
    8ad8:	mov	r6, r0
    8ada:	add.w	lr, r1, #20
    8ade:	movs	r7, #0
    8ae0:	ldr.w	r0, [lr]
    8ae4:	uxth	r1, r0
    8ae6:	mla	r1, r2, r1, r3
    8aea:	lsrs	r3, r1, #16
    8aec:	lsrs	r0, r0, #16
    8aee:	mla	r3, r2, r0, r3
    8af2:	uxth	r1, r1
    8af4:	adds	r7, #1
    8af6:	add.w	r1, r1, r3, lsl #16
    8afa:	cmp	r4, r7
    8afc:	str.w	r1, [lr], #4
    8b00:	mov.w	r3, r3, lsr #16
    8b04:	bgt.n	8ae0 <__multadd+0x10>
    8b06:	cbz	r3, 8b18 <__multadd+0x48>
    8b08:	ldr	r2, [r5, #8]
    8b0a:	cmp	r4, r2
    8b0c:	bge.n	8b1e <__multadd+0x4e>
    8b0e:	add.w	r2, r5, r4, lsl #2
    8b12:	adds	r4, #1
    8b14:	str	r3, [r2, #20]
    8b16:	str	r4, [r5, #16]
    8b18:	mov	r0, r5
    8b1a:	add	sp, #12
    8b1c:	pop	{r4, r5, r6, r7, pc}
    8b1e:	ldr	r1, [r5, #4]
    8b20:	str	r3, [sp, #4]
    8b22:	adds	r1, #1
    8b24:	mov	r0, r6
    8b26:	bl	8a70 <_Balloc>
    8b2a:	ldr	r2, [r5, #16]
    8b2c:	adds	r2, #2
    8b2e:	add.w	r1, r5, #12
    8b32:	mov	r7, r0
    8b34:	lsls	r2, r2, #2
    8b36:	adds	r0, #12
    8b38:	bl	249c <memcpy>
    8b3c:	ldr	r2, [r6, #76]	; 0x4c
    8b3e:	ldr	r1, [r5, #4]
    8b40:	ldr	r3, [sp, #4]
    8b42:	ldr.w	r0, [r2, r1, lsl #2]
    8b46:	str	r0, [r5, #0]
    8b48:	str.w	r5, [r2, r1, lsl #2]
    8b4c:	mov	r5, r7
    8b4e:	b.n	8b0e <__multadd+0x3e>

00008b50 <__hi0bits>:
    8b50:	lsrs	r3, r0, #16
    8b52:	lsls	r3, r3, #16
    8b54:	cbnz	r3, 8b84 <__hi0bits+0x34>
    8b56:	lsls	r0, r0, #16
    8b58:	movs	r3, #16
    8b5a:	tst.w	r0, #4278190080	; 0xff000000
    8b5e:	itt	eq
    8b60:	lsleq	r0, r0, #8
    8b62:	addeq	r3, #8
    8b64:	tst.w	r0, #4026531840	; 0xf0000000
    8b68:	itt	eq
    8b6a:	lsleq	r0, r0, #4
    8b6c:	addeq	r3, #4
    8b6e:	tst.w	r0, #3221225472	; 0xc0000000
    8b72:	itt	eq
    8b74:	lsleq	r0, r0, #2
    8b76:	addeq	r3, #2
    8b78:	cmp	r0, #0
    8b7a:	blt.n	8b8c <__hi0bits+0x3c>
    8b7c:	lsls	r2, r0, #1
    8b7e:	bmi.n	8b88 <__hi0bits+0x38>
    8b80:	movs	r0, #32
    8b82:	bx	lr
    8b84:	movs	r3, #0
    8b86:	b.n	8b5a <__hi0bits+0xa>
    8b88:	adds	r0, r3, #1
    8b8a:	bx	lr
    8b8c:	mov	r0, r3
    8b8e:	bx	lr

00008b90 <__lo0bits>:
    8b90:	ldr	r3, [r0, #0]
    8b92:	ands.w	r2, r3, #7
    8b96:	beq.n	8ba8 <__lo0bits+0x18>
    8b98:	lsls	r1, r3, #31
    8b9a:	bmi.n	8bde <__lo0bits+0x4e>
    8b9c:	lsls	r2, r3, #30
    8b9e:	bmi.n	8be2 <__lo0bits+0x52>
    8ba0:	lsrs	r3, r3, #2
    8ba2:	str	r3, [r0, #0]
    8ba4:	movs	r0, #2
    8ba6:	bx	lr
    8ba8:	uxth	r1, r3
    8baa:	cbnz	r1, 8bb0 <__lo0bits+0x20>
    8bac:	lsrs	r3, r3, #16
    8bae:	movs	r2, #16
    8bb0:	tst.w	r3, #255	; 0xff
    8bb4:	itt	eq
    8bb6:	lsreq	r3, r3, #8
    8bb8:	addeq	r2, #8
    8bba:	lsls	r1, r3, #28
    8bbc:	itt	eq
    8bbe:	lsreq	r3, r3, #4
    8bc0:	addeq	r2, #4
    8bc2:	lsls	r1, r3, #30
    8bc4:	itt	eq
    8bc6:	lsreq	r3, r3, #2
    8bc8:	addeq	r2, #2
    8bca:	lsls	r1, r3, #31
    8bcc:	bmi.n	8bd8 <__lo0bits+0x48>
    8bce:	lsrs	r3, r3, #1
    8bd0:	bne.n	8bd6 <__lo0bits+0x46>
    8bd2:	movs	r0, #32
    8bd4:	bx	lr
    8bd6:	adds	r2, #1
    8bd8:	str	r3, [r0, #0]
    8bda:	mov	r0, r2
    8bdc:	bx	lr
    8bde:	movs	r0, #0
    8be0:	bx	lr
    8be2:	lsrs	r3, r3, #1
    8be4:	str	r3, [r0, #0]
    8be6:	movs	r0, #1
    8be8:	bx	lr
    8bea:	nop

00008bec <__i2b>:
    8bec:	push	{r4, lr}
    8bee:	mov	r4, r1
    8bf0:	movs	r1, #1
    8bf2:	bl	8a70 <_Balloc>
    8bf6:	movs	r2, #1
    8bf8:	str	r4, [r0, #20]
    8bfa:	str	r2, [r0, #16]
    8bfc:	pop	{r4, pc}
    8bfe:	nop

00008c00 <__multiply>:
    8c00:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c04:	ldr	r5, [r1, #16]
    8c06:	ldr	r7, [r2, #16]
    8c08:	cmp	r5, r7
    8c0a:	sub	sp, #12
    8c0c:	mov	r4, r1
    8c0e:	mov	r6, r2
    8c10:	bge.n	8c1c <__multiply+0x1c>
    8c12:	mov	r2, r5
    8c14:	mov	r4, r6
    8c16:	mov	r5, r7
    8c18:	mov	r6, r1
    8c1a:	mov	r7, r2
    8c1c:	ldr	r3, [r4, #8]
    8c1e:	ldr	r1, [r4, #4]
    8c20:	add.w	r8, r5, r7
    8c24:	cmp	r8, r3
    8c26:	it	gt
    8c28:	addgt	r1, #1
    8c2a:	bl	8a70 <_Balloc>
    8c2e:	add.w	ip, r0, #20
    8c32:	add.w	r9, ip, r8, lsl #2
    8c36:	cmp	ip, r9
    8c38:	str	r0, [sp, #0]
    8c3a:	bcs.n	8c48 <__multiply+0x48>
    8c3c:	mov	r3, ip
    8c3e:	movs	r1, #0
    8c40:	str.w	r1, [r3], #4
    8c44:	cmp	r9, r3
    8c46:	bhi.n	8c40 <__multiply+0x40>
    8c48:	add.w	r2, r6, #20
    8c4c:	add.w	sl, r2, r7, lsl #2
    8c50:	add.w	r3, r4, #20
    8c54:	cmp	r2, sl
    8c56:	add.w	lr, r3, r5, lsl #2
    8c5a:	bcs.n	8d06 <__multiply+0x106>
    8c5c:	str.w	r9, [sp, #4]
    8c60:	mov	r9, r3
    8c62:	ldr.w	r3, [r2], #4
    8c66:	uxth.w	fp, r3
    8c6a:	cmp.w	fp, #0
    8c6e:	beq.n	8cb2 <__multiply+0xb2>
    8c70:	movs	r0, #0
    8c72:	mov	r7, r9
    8c74:	mov	r6, ip
    8c76:	mov	r5, r0
    8c78:	b.n	8c7c <__multiply+0x7c>
    8c7a:	mov	r6, r3
    8c7c:	ldr.w	r4, [r7], #4
    8c80:	ldr	r0, [r6, #0]
    8c82:	uxth	r1, r4
    8c84:	uxth	r3, r0
    8c86:	mla	r1, fp, r1, r3
    8c8a:	lsrs	r4, r4, #16
    8c8c:	lsrs	r0, r0, #16
    8c8e:	adds	r3, r1, r5
    8c90:	mla	r0, fp, r4, r0
    8c94:	add.w	r0, r0, r3, lsr #16
    8c98:	uxth	r1, r3
    8c9a:	mov	r3, r6
    8c9c:	orr.w	r1, r1, r0, lsl #16
    8ca0:	cmp	lr, r7
    8ca2:	mov.w	r5, r0, lsr #16
    8ca6:	str.w	r1, [r3], #4
    8caa:	bhi.n	8c7a <__multiply+0x7a>
    8cac:	str	r5, [r6, #4]
    8cae:	ldr.w	r3, [r2, #-4]
    8cb2:	movs.w	fp, r3, lsr #16
    8cb6:	beq.n	8cfa <__multiply+0xfa>
    8cb8:	ldr.w	r3, [ip]
    8cbc:	mov	r7, ip
    8cbe:	mov	r0, r3
    8cc0:	mov	r5, r9
    8cc2:	movs	r1, #0
    8cc4:	b.n	8cc8 <__multiply+0xc8>
    8cc6:	mov	r7, r6
    8cc8:	ldrh	r4, [r5, #0]
    8cca:	lsrs	r0, r0, #16
    8ccc:	mla	r0, fp, r4, r0
    8cd0:	add	r1, r0
    8cd2:	uxth	r4, r3
    8cd4:	mov	r6, r7
    8cd6:	orr.w	r3, r4, r1, lsl #16
    8cda:	str.w	r3, [r6], #4
    8cde:	ldr	r0, [r7, #4]
    8ce0:	ldr.w	r4, [r5], #4
    8ce4:	uxth	r3, r0
    8ce6:	lsrs	r4, r4, #16
    8ce8:	mla	r4, fp, r4, r3
    8cec:	add.w	r3, r4, r1, lsr #16
    8cf0:	cmp	lr, r5
    8cf2:	mov.w	r1, r3, lsr #16
    8cf6:	bhi.n	8cc6 <__multiply+0xc6>
    8cf8:	str	r3, [r7, #4]
    8cfa:	cmp	sl, r2
    8cfc:	add.w	ip, ip, #4
    8d00:	bhi.n	8c62 <__multiply+0x62>
    8d02:	ldr.w	r9, [sp, #4]
    8d06:	cmp.w	r8, #0
    8d0a:	ble.n	8d24 <__multiply+0x124>
    8d0c:	ldr.w	r3, [r9, #-4]
    8d10:	sub.w	r9, r9, #4
    8d14:	cbz	r3, 8d1e <__multiply+0x11e>
    8d16:	b.n	8d24 <__multiply+0x124>
    8d18:	ldr.w	r3, [r9, #-4]!
    8d1c:	cbnz	r3, 8d24 <__multiply+0x124>
    8d1e:	subs.w	r8, r8, #1
    8d22:	bne.n	8d18 <__multiply+0x118>
    8d24:	ldr	r0, [sp, #0]
    8d26:	str.w	r8, [r0, #16]
    8d2a:	add	sp, #12
    8d2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008d30 <__pow5mult>:
    8d30:	ands.w	r3, r2, #3
    8d34:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d38:	mov	r4, r2
    8d3a:	mov	r7, r0
    8d3c:	bne.n	8d9c <__pow5mult+0x6c>
    8d3e:	mov	r6, r1
    8d40:	asrs	r4, r4, #2
    8d42:	beq.n	8d7e <__pow5mult+0x4e>
    8d44:	ldr	r5, [r7, #72]	; 0x48
    8d46:	cbz	r5, 8dae <__pow5mult+0x7e>
    8d48:	lsls	r3, r4, #31
    8d4a:	mov.w	r8, #0
    8d4e:	bmi.n	8d5e <__pow5mult+0x2e>
    8d50:	asrs	r4, r4, #1
    8d52:	beq.n	8d7e <__pow5mult+0x4e>
    8d54:	ldr	r0, [r5, #0]
    8d56:	cbz	r0, 8d84 <__pow5mult+0x54>
    8d58:	mov	r5, r0
    8d5a:	lsls	r3, r4, #31
    8d5c:	bpl.n	8d50 <__pow5mult+0x20>
    8d5e:	mov	r2, r5
    8d60:	mov	r1, r6
    8d62:	mov	r0, r7
    8d64:	bl	8c00 <__multiply>
    8d68:	cbz	r6, 8d98 <__pow5mult+0x68>
    8d6a:	ldr	r2, [r6, #4]
    8d6c:	ldr	r3, [r7, #76]	; 0x4c
    8d6e:	asrs	r4, r4, #1
    8d70:	ldr.w	r1, [r3, r2, lsl #2]
    8d74:	str	r1, [r6, #0]
    8d76:	str.w	r6, [r3, r2, lsl #2]
    8d7a:	mov	r6, r0
    8d7c:	bne.n	8d54 <__pow5mult+0x24>
    8d7e:	mov	r0, r6
    8d80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d84:	mov	r2, r5
    8d86:	mov	r1, r5
    8d88:	mov	r0, r7
    8d8a:	bl	8c00 <__multiply>
    8d8e:	str	r0, [r5, #0]
    8d90:	str.w	r8, [r0]
    8d94:	mov	r5, r0
    8d96:	b.n	8d5a <__pow5mult+0x2a>
    8d98:	mov	r6, r0
    8d9a:	b.n	8d50 <__pow5mult+0x20>
    8d9c:	subs	r2, r3, #1
    8d9e:	ldr	r5, [pc, #44]	; (8dcc <__pow5mult+0x9c>)
    8da0:	movs	r3, #0
    8da2:	ldr.w	r2, [r5, r2, lsl #2]
    8da6:	bl	8ad0 <__multadd>
    8daa:	mov	r6, r0
    8dac:	b.n	8d40 <__pow5mult+0x10>
    8dae:	movs	r1, #1
    8db0:	mov	r0, r7
    8db2:	bl	8a70 <_Balloc>
    8db6:	movw	r1, #625	; 0x271
    8dba:	movs	r2, #1
    8dbc:	movs	r3, #0
    8dbe:	str	r1, [r0, #20]
    8dc0:	str	r2, [r0, #16]
    8dc2:	mov	r5, r0
    8dc4:	str	r0, [r7, #72]	; 0x48
    8dc6:	str	r3, [r0, #0]
    8dc8:	b.n	8d48 <__pow5mult+0x18>
    8dca:	nop
    8dcc:	.word	0x20000a38

00008dd0 <__lshift>:
    8dd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8dd4:	mov	r9, r2
    8dd6:	ldr	r2, [r1, #16]
    8dd8:	ldr	r3, [r1, #8]
    8dda:	mov.w	r4, r9, asr #5
    8dde:	add.w	r8, r4, r2
    8de2:	add.w	r5, r8, #1
    8de6:	cmp	r5, r3
    8de8:	mov	r6, r1
    8dea:	mov	sl, r0
    8dec:	ldr	r1, [r1, #4]
    8dee:	ble.n	8dfa <__lshift+0x2a>
    8df0:	lsls	r3, r3, #1
    8df2:	cmp	r5, r3
    8df4:	add.w	r1, r1, #1
    8df8:	bgt.n	8df0 <__lshift+0x20>
    8dfa:	mov	r0, sl
    8dfc:	bl	8a70 <_Balloc>
    8e00:	cmp	r4, #0
    8e02:	add.w	r2, r0, #20
    8e06:	ble.n	8e7a <__lshift+0xaa>
    8e08:	add.w	r3, r2, r4, lsl #2
    8e0c:	movs	r1, #0
    8e0e:	str.w	r1, [r2], #4
    8e12:	cmp	r3, r2
    8e14:	bne.n	8e0e <__lshift+0x3e>
    8e16:	ldr	r4, [r6, #16]
    8e18:	add.w	r1, r6, #20
    8e1c:	ands.w	r9, r9, #31
    8e20:	add.w	lr, r1, r4, lsl #2
    8e24:	beq.n	8e6a <__lshift+0x9a>
    8e26:	rsb	r2, r9, #32
    8e2a:	movs	r4, #0
    8e2c:	ldr	r7, [r1, #0]
    8e2e:	lsl.w	ip, r7, r9
    8e32:	orr.w	r4, ip, r4
    8e36:	mov	ip, r3
    8e38:	str.w	r4, [r3], #4
    8e3c:	ldr.w	r4, [r1], #4
    8e40:	cmp	lr, r1
    8e42:	lsr.w	r4, r4, r2
    8e46:	bhi.n	8e2c <__lshift+0x5c>
    8e48:	str.w	r4, [ip, #4]
    8e4c:	cbz	r4, 8e52 <__lshift+0x82>
    8e4e:	add.w	r5, r8, #2
    8e52:	ldr.w	r3, [sl, #76]	; 0x4c
    8e56:	ldr	r2, [r6, #4]
    8e58:	subs	r5, #1
    8e5a:	ldr.w	r1, [r3, r2, lsl #2]
    8e5e:	str	r5, [r0, #16]
    8e60:	str	r1, [r6, #0]
    8e62:	str.w	r6, [r3, r2, lsl #2]
    8e66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e6a:	subs	r3, #4
    8e6c:	ldr.w	r2, [r1], #4
    8e70:	str.w	r2, [r3, #4]!
    8e74:	cmp	lr, r1
    8e76:	bhi.n	8e6c <__lshift+0x9c>
    8e78:	b.n	8e52 <__lshift+0x82>
    8e7a:	mov	r3, r2
    8e7c:	b.n	8e16 <__lshift+0x46>
    8e7e:	nop

00008e80 <__mcmp>:
    8e80:	ldr	r2, [r0, #16]
    8e82:	ldr	r3, [r1, #16]
    8e84:	subs	r2, r2, r3
    8e86:	bne.n	8eb0 <__mcmp+0x30>
    8e88:	lsls	r3, r3, #2
    8e8a:	adds	r0, #20
    8e8c:	adds	r1, #20
    8e8e:	add	r1, r3
    8e90:	push	{r4}
    8e92:	add	r3, r0
    8e94:	b.n	8e9a <__mcmp+0x1a>
    8e96:	cmp	r0, r3
    8e98:	bcs.n	8eb4 <__mcmp+0x34>
    8e9a:	ldr.w	r4, [r3, #-4]!
    8e9e:	ldr.w	r2, [r1, #-4]!
    8ea2:	cmp	r4, r2
    8ea4:	beq.n	8e96 <__mcmp+0x16>
    8ea6:	bcc.n	8ebc <__mcmp+0x3c>
    8ea8:	movs	r0, #1
    8eaa:	ldr.w	r4, [sp], #4
    8eae:	bx	lr
    8eb0:	mov	r0, r2
    8eb2:	bx	lr
    8eb4:	movs	r0, #0
    8eb6:	ldr.w	r4, [sp], #4
    8eba:	bx	lr
    8ebc:	mov.w	r0, #4294967295
    8ec0:	b.n	8eaa <__mcmp+0x2a>
    8ec2:	nop

00008ec4 <__mdiff>:
    8ec4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ec8:	ldr	r3, [r1, #16]
    8eca:	mov	r7, r1
    8ecc:	ldr	r1, [r2, #16]
    8ece:	subs	r3, r3, r1
    8ed0:	cmp	r3, #0
    8ed2:	mov	r8, r2
    8ed4:	bne.n	8f06 <__mdiff+0x42>
    8ed6:	lsls	r1, r1, #2
    8ed8:	add.w	r2, r7, #20
    8edc:	add.w	r5, r8, #20
    8ee0:	adds	r3, r2, r1
    8ee2:	add	r1, r5
    8ee4:	b.n	8eea <__mdiff+0x26>
    8ee6:	cmp	r2, r3
    8ee8:	bcs.n	8fa8 <__mdiff+0xe4>
    8eea:	ldr.w	r6, [r3, #-4]!
    8eee:	ldr.w	r4, [r1, #-4]!
    8ef2:	cmp	r6, r4
    8ef4:	beq.n	8ee6 <__mdiff+0x22>
    8ef6:	bcs.n	8fba <__mdiff+0xf6>
    8ef8:	mov	r3, r7
    8efa:	mov	r4, r2
    8efc:	mov	r7, r8
    8efe:	mov.w	r9, #1
    8f02:	mov	r8, r3
    8f04:	b.n	8f14 <__mdiff+0x50>
    8f06:	blt.n	8fc4 <__mdiff+0x100>
    8f08:	add.w	r5, r7, #20
    8f0c:	add.w	r4, r2, #20
    8f10:	mov.w	r9, #0
    8f14:	ldr	r1, [r7, #4]
    8f16:	bl	8a70 <_Balloc>
    8f1a:	ldr.w	r3, [r8, #16]
    8f1e:	ldr	r6, [r7, #16]
    8f20:	str.w	r9, [r0, #12]
    8f24:	add.w	ip, r4, r3, lsl #2
    8f28:	mov	lr, r4
    8f2a:	add.w	r7, r5, r6, lsl #2
    8f2e:	add.w	r4, r0, #20
    8f32:	movs	r3, #0
    8f34:	ldr.w	r1, [lr], #4
    8f38:	ldr.w	r8, [r5], #4
    8f3c:	uxth	r2, r1
    8f3e:	uxtah	r3, r3, r8
    8f42:	lsrs	r1, r1, #16
    8f44:	subs	r2, r3, r2
    8f46:	rsb	r3, r1, r8, lsr #16
    8f4a:	add.w	r3, r3, r2, asr #16
    8f4e:	uxth	r2, r2
    8f50:	orr.w	r2, r2, r3, lsl #16
    8f54:	cmp	ip, lr
    8f56:	str.w	r2, [r4], #4
    8f5a:	mov.w	r3, r3, asr #16
    8f5e:	bhi.n	8f34 <__mdiff+0x70>
    8f60:	cmp	r7, r5
    8f62:	bls.n	8f94 <__mdiff+0xd0>
    8f64:	mov	ip, r4
    8f66:	mov	r1, r5
    8f68:	ldr.w	lr, [r1], #4
    8f6c:	uxtah	r2, r3, lr
    8f70:	asrs	r3, r2, #16
    8f72:	add.w	r3, r3, lr, lsr #16
    8f76:	uxth	r2, r2
    8f78:	orr.w	r2, r2, r3, lsl #16
    8f7c:	cmp	r7, r1
    8f7e:	str.w	r2, [ip], #4
    8f82:	mov.w	r3, r3, asr #16
    8f86:	bhi.n	8f68 <__mdiff+0xa4>
    8f88:	mvns	r5, r5
    8f8a:	add	r5, r7
    8f8c:	bic.w	r5, r5, #3
    8f90:	adds	r5, #4
    8f92:	add	r4, r5
    8f94:	subs	r4, #4
    8f96:	cbnz	r2, 8fa2 <__mdiff+0xde>
    8f98:	ldr.w	r3, [r4, #-4]!
    8f9c:	subs	r6, #1
    8f9e:	cmp	r3, #0
    8fa0:	beq.n	8f98 <__mdiff+0xd4>
    8fa2:	str	r6, [r0, #16]
    8fa4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8fa8:	movs	r1, #0
    8faa:	bl	8a70 <_Balloc>
    8fae:	movs	r2, #1
    8fb0:	movs	r3, #0
    8fb2:	str	r2, [r0, #16]
    8fb4:	str	r3, [r0, #20]
    8fb6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8fba:	mov	r4, r5
    8fbc:	mov.w	r9, #0
    8fc0:	mov	r5, r2
    8fc2:	b.n	8f14 <__mdiff+0x50>
    8fc4:	mov	r3, r7
    8fc6:	add.w	r4, r7, #20
    8fca:	add.w	r5, r8, #20
    8fce:	mov	r7, r8
    8fd0:	mov.w	r9, #1
    8fd4:	mov	r8, r3
    8fd6:	b.n	8f14 <__mdiff+0x50>

00008fd8 <__d2b>:
    8fd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8fdc:	vmov	r6, r7, d0
    8fe0:	sub	sp, #12
    8fe2:	mov	r8, r1
    8fe4:	movs	r1, #1
    8fe6:	mov	r4, r7
    8fe8:	ubfx	r5, r7, #20, #11
    8fec:	mov	r7, r2
    8fee:	bl	8a70 <_Balloc>
    8ff2:	ubfx	r4, r4, #0, #20
    8ff6:	mov	r9, r0
    8ff8:	cbz	r5, 8ffe <__d2b+0x26>
    8ffa:	orr.w	r4, r4, #1048576	; 0x100000
    8ffe:	str	r4, [sp, #4]
    9000:	cbz	r6, 904a <__d2b+0x72>
    9002:	add	r0, sp, #8
    9004:	str.w	r6, [r0, #-8]!
    9008:	bl	8b90 <__lo0bits>
    900c:	cmp	r0, #0
    900e:	bne.n	907a <__d2b+0xa2>
    9010:	ldmia.w	sp, {r2, r3}
    9014:	str.w	r2, [r9, #20]
    9018:	cmp	r3, #0
    901a:	ite	eq
    901c:	moveq	r1, #1
    901e:	movne	r1, #2
    9020:	str.w	r3, [r9, #24]
    9024:	str.w	r1, [r9, #16]
    9028:	cbnz	r5, 9062 <__d2b+0x8a>
    902a:	add.w	r3, r9, r1, lsl #2
    902e:	subw	r0, r0, #1074	; 0x432
    9032:	str.w	r0, [r8]
    9036:	ldr	r0, [r3, #16]
    9038:	bl	8b50 <__hi0bits>
    903c:	rsb	r0, r0, r1, lsl #5
    9040:	str	r0, [r7, #0]
    9042:	mov	r0, r9
    9044:	add	sp, #12
    9046:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    904a:	add	r0, sp, #4
    904c:	bl	8b90 <__lo0bits>
    9050:	ldr	r3, [sp, #4]
    9052:	str.w	r3, [r9, #20]
    9056:	movs	r1, #1
    9058:	adds	r0, #32
    905a:	str.w	r1, [r9, #16]
    905e:	cmp	r5, #0
    9060:	beq.n	902a <__d2b+0x52>
    9062:	subw	r5, r5, #1075	; 0x433
    9066:	add	r5, r0
    9068:	rsb	r0, r0, #53	; 0x35
    906c:	str.w	r5, [r8]
    9070:	str	r0, [r7, #0]
    9072:	mov	r0, r9
    9074:	add	sp, #12
    9076:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    907a:	ldmia.w	sp, {r2, r3}
    907e:	rsb	r1, r0, #32
    9082:	lsl.w	r1, r3, r1
    9086:	orrs	r2, r1
    9088:	lsrs	r3, r0
    908a:	str	r3, [sp, #4]
    908c:	str.w	r2, [r9, #20]
    9090:	b.n	9018 <__d2b+0x40>
    9092:	nop

00009094 <__ssprint_r>:
    9094:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9098:	ldr	r3, [r2, #8]
    909a:	sub	sp, #12
    909c:	mov	r8, r2
    909e:	cmp	r3, #0
    90a0:	beq.n	9188 <__ssprint_r+0xf4>
    90a2:	mov	fp, r0
    90a4:	mov.w	r9, #0
    90a8:	ldr	r6, [r2, #0]
    90aa:	ldr	r0, [r1, #0]
    90ac:	ldr	r3, [r1, #8]
    90ae:	mov	r5, r1
    90b0:	mov	r4, r9
    90b2:	cmp	r4, #0
    90b4:	beq.n	9142 <__ssprint_r+0xae>
    90b6:	cmp	r4, r3
    90b8:	mov	r7, r3
    90ba:	mov	sl, r3
    90bc:	bcc.n	914c <__ssprint_r+0xb8>
    90be:	ldrh	r3, [r5, #12]
    90c0:	tst.w	r3, #1152	; 0x480
    90c4:	beq.n	9122 <__ssprint_r+0x8e>
    90c6:	ldr	r7, [r5, #20]
    90c8:	ldr	r1, [r5, #16]
    90ca:	add.w	r7, r7, r7, lsl #1
    90ce:	rsb	sl, r1, r0
    90d2:	add.w	r7, r7, r7, lsr #31
    90d6:	adds	r0, r4, #1
    90d8:	asrs	r7, r7, #1
    90da:	add	r0, sl
    90dc:	cmp	r0, r7
    90de:	mov	r2, r7
    90e0:	itt	hi
    90e2:	movhi	r7, r0
    90e4:	movhi	r2, r7
    90e6:	lsls	r3, r3, #21
    90e8:	bpl.n	9152 <__ssprint_r+0xbe>
    90ea:	mov	r1, r2
    90ec:	mov	r0, fp
    90ee:	bl	56fc <_malloc_r>
    90f2:	cmp	r0, #0
    90f4:	beq.n	9166 <__ssprint_r+0xd2>
    90f6:	mov	r2, sl
    90f8:	ldr	r1, [r5, #16]
    90fa:	str	r0, [sp, #4]
    90fc:	bl	249c <memcpy>
    9100:	ldrh	r2, [r5, #12]
    9102:	ldr	r3, [sp, #4]
    9104:	bic.w	r2, r2, #1152	; 0x480
    9108:	orr.w	r2, r2, #128	; 0x80
    910c:	strh	r2, [r5, #12]
    910e:	rsb	r2, sl, r7
    9112:	add.w	r0, r3, sl
    9116:	str	r7, [r5, #20]
    9118:	str	r3, [r5, #16]
    911a:	str	r0, [r5, #0]
    911c:	str	r2, [r5, #8]
    911e:	mov	r7, r4
    9120:	mov	sl, r4
    9122:	mov	r2, sl
    9124:	mov	r1, r9
    9126:	bl	5c98 <memmove>
    912a:	ldr.w	r2, [r8, #8]
    912e:	ldr	r3, [r5, #8]
    9130:	ldr	r0, [r5, #0]
    9132:	subs	r3, r3, r7
    9134:	add	r0, sl
    9136:	subs	r4, r2, r4
    9138:	str	r3, [r5, #8]
    913a:	str	r0, [r5, #0]
    913c:	str.w	r4, [r8, #8]
    9140:	cbz	r4, 9188 <__ssprint_r+0xf4>
    9142:	ldr.w	r9, [r6]
    9146:	ldr	r4, [r6, #4]
    9148:	adds	r6, #8
    914a:	b.n	90b2 <__ssprint_r+0x1e>
    914c:	mov	r7, r4
    914e:	mov	sl, r4
    9150:	b.n	9122 <__ssprint_r+0x8e>
    9152:	mov	r0, fp
    9154:	bl	5e04 <_realloc_r>
    9158:	mov	r3, r0
    915a:	cmp	r0, #0
    915c:	bne.n	910e <__ssprint_r+0x7a>
    915e:	ldr	r1, [r5, #16]
    9160:	mov	r0, fp
    9162:	bl	87d8 <_free_r>
    9166:	movs	r3, #12
    9168:	str.w	r3, [fp]
    916c:	ldrh	r3, [r5, #12]
    916e:	movs	r2, #0
    9170:	orr.w	r3, r3, #64	; 0x40
    9174:	mov.w	r0, #4294967295
    9178:	strh	r3, [r5, #12]
    917a:	str.w	r2, [r8, #8]
    917e:	str.w	r2, [r8, #4]
    9182:	add	sp, #12
    9184:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9188:	movs	r0, #0
    918a:	str.w	r0, [r8, #4]
    918e:	add	sp, #12
    9190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009194 <_calloc_r>:
    9194:	push	{r4, lr}
    9196:	mul.w	r1, r2, r1
    919a:	bl	56fc <_malloc_r>
    919e:	mov	r4, r0
    91a0:	cbz	r0, 91da <_calloc_r+0x46>
    91a2:	ldr.w	r2, [r0, #-4]
    91a6:	bic.w	r2, r2, #3
    91aa:	subs	r2, #4
    91ac:	cmp	r2, #36	; 0x24
    91ae:	bhi.n	91e2 <_calloc_r+0x4e>
    91b0:	cmp	r2, #19
    91b2:	bls.n	91de <_calloc_r+0x4a>
    91b4:	movs	r3, #0
    91b6:	cmp	r2, #27
    91b8:	str	r3, [r0, #0]
    91ba:	str	r3, [r0, #4]
    91bc:	bls.n	91ec <_calloc_r+0x58>
    91be:	cmp	r2, #36	; 0x24
    91c0:	str	r3, [r0, #8]
    91c2:	str	r3, [r0, #12]
    91c4:	iteee	ne
    91c6:	addne.w	r2, r0, #16
    91ca:	streq	r3, [r0, #16]
    91cc:	streq	r3, [r0, #20]
    91ce:	addeq.w	r2, r0, #24
    91d2:	movs	r3, #0
    91d4:	str	r3, [r2, #0]
    91d6:	str	r3, [r2, #4]
    91d8:	str	r3, [r2, #8]
    91da:	mov	r0, r4
    91dc:	pop	{r4, pc}
    91de:	mov	r2, r0
    91e0:	b.n	91d2 <_calloc_r+0x3e>
    91e2:	movs	r1, #0
    91e4:	bl	5d60 <memset>
    91e8:	mov	r0, r4
    91ea:	pop	{r4, pc}
    91ec:	add.w	r2, r0, #8
    91f0:	b.n	91d2 <_calloc_r+0x3e>
    91f2:	nop

000091f4 <__aeabi_uldivmod>:
    91f4:	cbnz	r3, 920c <__aeabi_uldivmod+0x18>
    91f6:	cbnz	r2, 920c <__aeabi_uldivmod+0x18>
    91f8:	cmp	r1, #0
    91fa:	it	eq
    91fc:	cmpeq	r0, #0
    91fe:	itt	ne
    9200:	movne.w	r1, #4294967295
    9204:	movne.w	r0, #4294967295
    9208:	b.w	9508 <__aeabi_idiv0>
    920c:	sub.w	ip, sp, #8
    9210:	strd	ip, lr, [sp, #-16]!
    9214:	bl	9224 <__udivmoddi4>
    9218:	ldr.w	lr, [sp, #4]
    921c:	ldrd	r2, r3, [sp, #8]
    9220:	add	sp, #16
    9222:	bx	lr

00009224 <__udivmoddi4>:
    9224:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9228:	mov	ip, r1
    922a:	mov	r6, r1
    922c:	mov	r4, r0
    922e:	ldr	r5, [sp, #32]
    9230:	cmp	r3, #0
    9232:	bne.n	92d6 <__udivmoddi4+0xb2>
    9234:	cmp	r2, r1
    9236:	mov	r7, r2
    9238:	bls.n	9314 <__udivmoddi4+0xf0>
    923a:	clz	lr, r2
    923e:	cmp.w	lr, #0
    9242:	beq.n	925c <__udivmoddi4+0x38>
    9244:	rsb	r4, lr, #32
    9248:	lsr.w	r4, r0, r4
    924c:	lsl.w	r6, r1, lr
    9250:	orr.w	ip, r4, r6
    9254:	lsl.w	r7, r2, lr
    9258:	lsl.w	r4, r0, lr
    925c:	mov.w	r9, r7, lsr #16
    9260:	lsrs	r2, r4, #16
    9262:	udiv	r0, ip, r9
    9266:	uxth.w	r8, r7
    926a:	mls	r6, r9, r0, ip
    926e:	orr.w	r6, r2, r6, lsl #16
    9272:	mul.w	r3, r0, r8
    9276:	cmp	r3, r6
    9278:	bls.n	928e <__udivmoddi4+0x6a>
    927a:	adds	r6, r6, r7
    927c:	add.w	r2, r0, #4294967295
    9280:	bcs.w	94c8 <__udivmoddi4+0x2a4>
    9284:	cmp	r3, r6
    9286:	bls.w	94c8 <__udivmoddi4+0x2a4>
    928a:	subs	r0, #2
    928c:	add	r6, r7
    928e:	subs	r6, r6, r3
    9290:	uxth	r2, r4
    9292:	udiv	r3, r6, r9
    9296:	mls	r6, r9, r3, r6
    929a:	orr.w	r4, r2, r6, lsl #16
    929e:	mul.w	r8, r3, r8
    92a2:	cmp	r8, r4
    92a4:	bls.n	92ba <__udivmoddi4+0x96>
    92a6:	adds	r4, r4, r7
    92a8:	add.w	r2, r3, #4294967295
    92ac:	bcs.w	94c4 <__udivmoddi4+0x2a0>
    92b0:	cmp	r8, r4
    92b2:	bls.w	94c4 <__udivmoddi4+0x2a0>
    92b6:	subs	r3, #2
    92b8:	add	r4, r7
    92ba:	rsb	r4, r8, r4
    92be:	orr.w	r0, r3, r0, lsl #16
    92c2:	movs	r1, #0
    92c4:	cmp	r5, #0
    92c6:	beq.n	938e <__udivmoddi4+0x16a>
    92c8:	lsr.w	r4, r4, lr
    92cc:	movs	r3, #0
    92ce:	str	r4, [r5, #0]
    92d0:	str	r3, [r5, #4]
    92d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    92d6:	cmp	r3, r1
    92d8:	bls.n	92ea <__udivmoddi4+0xc6>
    92da:	cmp	r5, #0
    92dc:	beq.n	938a <__udivmoddi4+0x166>
    92de:	movs	r1, #0
    92e0:	stmia.w	r5, {r0, r6}
    92e4:	mov	r0, r1
    92e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    92ea:	clz	r1, r3
    92ee:	cmp	r1, #0
    92f0:	bne.w	9414 <__udivmoddi4+0x1f0>
    92f4:	cmp	r3, r6
    92f6:	bcc.n	92fe <__udivmoddi4+0xda>
    92f8:	cmp	r2, r0
    92fa:	bhi.w	94ee <__udivmoddi4+0x2ca>
    92fe:	subs	r4, r0, r2
    9300:	sbc.w	r6, r6, r3
    9304:	movs	r0, #1
    9306:	mov	ip, r6
    9308:	cmp	r5, #0
    930a:	beq.n	938e <__udivmoddi4+0x16a>
    930c:	stmia.w	r5, {r4, ip}
    9310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9314:	cbnz	r2, 931c <__udivmoddi4+0xf8>
    9316:	movs	r7, #1
    9318:	udiv	r7, r7, r2
    931c:	clz	lr, r7
    9320:	cmp.w	lr, #0
    9324:	bne.n	9392 <__udivmoddi4+0x16e>
    9326:	subs	r3, r6, r7
    9328:	mov.w	r8, r7, lsr #16
    932c:	uxth.w	ip, r7
    9330:	movs	r1, #1
    9332:	udiv	r0, r3, r8
    9336:	lsrs	r2, r4, #16
    9338:	mls	r6, r8, r0, r3
    933c:	orr.w	r6, r2, r6, lsl #16
    9340:	mul.w	r3, ip, r0
    9344:	cmp	r3, r6
    9346:	bls.n	9358 <__udivmoddi4+0x134>
    9348:	adds	r6, r6, r7
    934a:	add.w	r2, r0, #4294967295
    934e:	bcs.n	9356 <__udivmoddi4+0x132>
    9350:	cmp	r3, r6
    9352:	bhi.w	94f2 <__udivmoddi4+0x2ce>
    9356:	mov	r0, r2
    9358:	subs	r6, r6, r3
    935a:	uxth	r2, r4
    935c:	udiv	r3, r6, r8
    9360:	mls	r6, r8, r3, r6
    9364:	orr.w	r4, r2, r6, lsl #16
    9368:	mul.w	ip, ip, r3
    936c:	cmp	ip, r4
    936e:	bls.n	9380 <__udivmoddi4+0x15c>
    9370:	adds	r4, r4, r7
    9372:	add.w	r2, r3, #4294967295
    9376:	bcs.n	937e <__udivmoddi4+0x15a>
    9378:	cmp	ip, r4
    937a:	bhi.w	94e8 <__udivmoddi4+0x2c4>
    937e:	mov	r3, r2
    9380:	rsb	r4, ip, r4
    9384:	orr.w	r0, r3, r0, lsl #16
    9388:	b.n	92c4 <__udivmoddi4+0xa0>
    938a:	mov	r1, r5
    938c:	mov	r0, r5
    938e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9392:	rsb	r1, lr, #32
    9396:	lsl.w	r3, r6, lr
    939a:	lsl.w	r7, r7, lr
    939e:	lsr.w	r9, r0, r1
    93a2:	mov.w	r8, r7, lsr #16
    93a6:	lsrs	r6, r1
    93a8:	orr.w	r9, r9, r3
    93ac:	udiv	sl, r6, r8
    93b0:	mov.w	r4, r9, lsr #16
    93b4:	mls	r6, r8, sl, r6
    93b8:	uxth.w	ip, r7
    93bc:	orr.w	r3, r4, r6, lsl #16
    93c0:	mul.w	r2, sl, ip
    93c4:	cmp	r2, r3
    93c6:	lsl.w	r4, r0, lr
    93ca:	bls.n	93e2 <__udivmoddi4+0x1be>
    93cc:	adds	r3, r3, r7
    93ce:	add.w	r1, sl, #4294967295
    93d2:	bcs.w	94e4 <__udivmoddi4+0x2c0>
    93d6:	cmp	r2, r3
    93d8:	bls.w	94e4 <__udivmoddi4+0x2c0>
    93dc:	sub.w	sl, sl, #2
    93e0:	add	r3, r7
    93e2:	subs	r3, r3, r2
    93e4:	uxth.w	r9, r9
    93e8:	udiv	r1, r3, r8
    93ec:	mls	r3, r8, r1, r3
    93f0:	orr.w	r3, r9, r3, lsl #16
    93f4:	mul.w	r6, r1, ip
    93f8:	cmp	r6, r3
    93fa:	bls.n	940c <__udivmoddi4+0x1e8>
    93fc:	adds	r3, r3, r7
    93fe:	add.w	r2, r1, #4294967295
    9402:	bcs.n	94dc <__udivmoddi4+0x2b8>
    9404:	cmp	r6, r3
    9406:	bls.n	94dc <__udivmoddi4+0x2b8>
    9408:	subs	r1, #2
    940a:	add	r3, r7
    940c:	subs	r3, r3, r6
    940e:	orr.w	r1, r1, sl, lsl #16
    9412:	b.n	9332 <__udivmoddi4+0x10e>
    9414:	rsb	lr, r1, #32
    9418:	lsr.w	r4, r2, lr
    941c:	lsls	r3, r1
    941e:	orrs	r3, r4
    9420:	lsr.w	r7, r0, lr
    9424:	lsl.w	r4, r6, r1
    9428:	mov.w	ip, r3, lsr #16
    942c:	lsr.w	r6, r6, lr
    9430:	orrs	r4, r7
    9432:	udiv	r9, r6, ip
    9436:	lsrs	r7, r4, #16
    9438:	mls	r6, ip, r9, r6
    943c:	uxth.w	r8, r3
    9440:	orr.w	r6, r7, r6, lsl #16
    9444:	mul.w	r7, r9, r8
    9448:	cmp	r7, r6
    944a:	lsl.w	r2, r2, r1
    944e:	lsl.w	sl, r0, r1
    9452:	bls.n	9466 <__udivmoddi4+0x242>
    9454:	adds	r6, r6, r3
    9456:	add.w	r0, r9, #4294967295
    945a:	bcs.n	94e0 <__udivmoddi4+0x2bc>
    945c:	cmp	r7, r6
    945e:	bls.n	94e0 <__udivmoddi4+0x2bc>
    9460:	sub.w	r9, r9, #2
    9464:	add	r6, r3
    9466:	subs	r6, r6, r7
    9468:	uxth	r0, r4
    946a:	udiv	r4, r6, ip
    946e:	mls	r6, ip, r4, r6
    9472:	orr.w	r7, r0, r6, lsl #16
    9476:	mul.w	r8, r4, r8
    947a:	cmp	r8, r7
    947c:	bls.n	948e <__udivmoddi4+0x26a>
    947e:	adds	r7, r7, r3
    9480:	add.w	r0, r4, #4294967295
    9484:	bcs.n	94d8 <__udivmoddi4+0x2b4>
    9486:	cmp	r8, r7
    9488:	bls.n	94d8 <__udivmoddi4+0x2b4>
    948a:	subs	r4, #2
    948c:	add	r7, r3
    948e:	orr.w	r0, r4, r9, lsl #16
    9492:	rsb	r7, r8, r7
    9496:	umull	r8, r9, r0, r2
    949a:	cmp	r7, r9
    949c:	mov	r4, r8
    949e:	mov	r6, r9
    94a0:	bcc.n	94cc <__udivmoddi4+0x2a8>
    94a2:	beq.n	94f8 <__udivmoddi4+0x2d4>
    94a4:	cbz	r5, 9500 <__udivmoddi4+0x2dc>
    94a6:	subs.w	r3, sl, r4
    94aa:	sbc.w	r7, r7, r6
    94ae:	lsl.w	lr, r7, lr
    94b2:	lsrs	r3, r1
    94b4:	lsrs	r7, r1
    94b6:	orr.w	r3, lr, r3
    94ba:	stmia.w	r5, {r3, r7}
    94be:	movs	r1, #0
    94c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    94c4:	mov	r3, r2
    94c6:	b.n	92ba <__udivmoddi4+0x96>
    94c8:	mov	r0, r2
    94ca:	b.n	928e <__udivmoddi4+0x6a>
    94cc:	subs.w	r4, r8, r2
    94d0:	sbc.w	r6, r9, r3
    94d4:	subs	r0, #1
    94d6:	b.n	94a4 <__udivmoddi4+0x280>
    94d8:	mov	r4, r0
    94da:	b.n	948e <__udivmoddi4+0x26a>
    94dc:	mov	r1, r2
    94de:	b.n	940c <__udivmoddi4+0x1e8>
    94e0:	mov	r9, r0
    94e2:	b.n	9466 <__udivmoddi4+0x242>
    94e4:	mov	sl, r1
    94e6:	b.n	93e2 <__udivmoddi4+0x1be>
    94e8:	subs	r3, #2
    94ea:	add	r4, r7
    94ec:	b.n	9380 <__udivmoddi4+0x15c>
    94ee:	mov	r0, r1
    94f0:	b.n	9308 <__udivmoddi4+0xe4>
    94f2:	subs	r0, #2
    94f4:	add	r6, r7
    94f6:	b.n	9358 <__udivmoddi4+0x134>
    94f8:	cmp	sl, r8
    94fa:	bcc.n	94cc <__udivmoddi4+0x2a8>
    94fc:	mov	r6, r7
    94fe:	b.n	94a4 <__udivmoddi4+0x280>
    9500:	mov	r1, r5
    9502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9506:	nop

00009508 <__aeabi_idiv0>:
    9508:	bx	lr
    950a:	nop
    950c:	movs	r0, r0
	...

00009510 <___init_veneer>:
    9510:	ldr.w	pc, [pc]	; 9514 <___init_veneer+0x4>
    9514:	.word	0x60001b8d
	...

Disassembly of section .fini:

00009520 <_fini>:
    9520:	push	{r3, r4, r5, r6, r7, lr}
    9522:	nop
